{"kind":"send-response","message":{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"VLS Version: 0.0.1.d914108, OS: macos 64"}},"timestamp":1664318788}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"VLS executable path: /Users/fleur/.local/share/nvim/lsp_servers/vls/vls"}},"timestamp":1664318788}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"VLS build with V 4b3c3d9"}},"timestamp":1664318788}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Client / Editor: Neovim 0.7.2 (PID: 45874)"}},"timestamp":1664318788}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Using V path (VROOT): /Users/fleur/Documents/prod/ressources/v"}},"timestamp":1664318788}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":1,"result":{"capabilities":{"textDocumentSync":2,"hoverProvider":true,"completionProvider":{"resolveProvider":false,"triggerCharacters":["=",".",":","{",",","("," "]},"signatureHelpProvider":{"triggerCharacters":["("],"retriggerCharacters":[","," "]},"definitionProvider":true,"typeDefinitionProvider":false,"implementationProvider":true,"referencesProvider":false,"documentHightlightProvider":false,"documentSymbolProvider":true,"workspaceSymbolProvider":true,"codeActionProvider":false,"codeLensProvider":{"resolveProvider":false},"documentFormattingProvider":true,"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"","moreTriggerCharacter":[]},"renameProvider":false,"documentLinkProvider":false,"colorProvider":false,"declarationProvider":false,"executeCommandProvider":"","foldingRangeProvider":true,"experimental":{}}}},"timestamp":1664318788}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/nuklear/wrapper.v","diagnostics":[]}},"timestamp":1664318788}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/nuklear/nuklear.v","diagnostics":[]}},"timestamp":1664318788}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/nuklear/wrapper.v","diagnostics":[]}},"timestamp":1664318788}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":2,"method":"textDocument/completion","params":{"position":{"line":57,"character":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/nuklear/wrapper.v"},"context":{"triggerKind":1}}},"timestamp":1664318796}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":2,"result":[{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"C.nk_context","kind":22,"detail":"struct C.nk_context","insertText":"C.nk_context{}","insertTextFormat":1},{"label":"C.nk_rect","kind":22,"detail":"struct C.nk_rect","insertText":"C.nk_rect{x:$1, y:$2, w:$3, h:$4}","insertTextFormat":2},{"label":"C.nk_vec2","kind":22,"detail":"struct C.nk_vec2","insertText":"C.nk_vec2{x:$1, y:$2}","insertTextFormat":2},{"label":"C.nk_color","kind":22,"detail":"struct C.nk_color","insertText":"C.nk_color{r:$1, g:$2, b:$3, a:$4}","insertTextFormat":2},{"label":"C.nk_colorf","kind":22,"detail":"struct C.nk_colorf","insertText":"C.nk_colorf{r:$1, g:$2, b:$3, a:$4}","insertTextFormat":2},{"label":"Nuklear","kind":22,"detail":"pub struct Nuklear","insertText":"Nuklear{nk_ctx:$1}","insertTextFormat":2},{"label":"handle_event","kind":3,"detail":"pub fn handle_event(with_hwnd C.HWND, with_msg u32, with_param u32, and_lparam int) bool","insertText":"handle_event($0, $1, $2, $3)","insertTextFormat":2},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664318796}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/nuklear/wrapper.v","diagnostics":[]}},"timestamp":1664318796}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/nuklear/wrapper.v","diagnostics":[]}},"timestamp":1664318797}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/nuklear/wrapper.v","diagnostics":[]}},"timestamp":1664318797}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":3,"method":"textDocument/completion","params":{"position":{"line":57,"character":4},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/nuklear/wrapper.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664318797}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":3,"result":[]},"timestamp":1664318797}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/nuklear/wrapper.v","diagnostics":[]}},"timestamp":1664318797}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":4,"method":"textDocument/completion","params":{"position":{"line":49,"character":20},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/nuklear/wrapper.v"},"context":{"triggerKind":2,"triggerCharacter":":"}}},"timestamp":1664318821}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":4,"result":[]},"timestamp":1664318821}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/nuklear/wrapper.v","diagnostics":[]}},"timestamp":1664318821}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":5,"method":"textDocument/completion","params":{"position":{"line":49,"character":21},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/nuklear/wrapper.v"},"context":{"triggerKind":1}}},"timestamp":1664318821}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":5,"result":[{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"C.nk_context","kind":22,"detail":"struct C.nk_context","insertText":"C.nk_context{}","insertTextFormat":1},{"label":"C.nk_rect","kind":22,"detail":"struct C.nk_rect","insertText":"C.nk_rect{x:$1, y:$2, w:$3, h:$4}","insertTextFormat":2},{"label":"C.nk_vec2","kind":22,"detail":"struct C.nk_vec2","insertText":"C.nk_vec2{x:$1, y:$2}","insertTextFormat":2},{"label":"C.nk_color","kind":22,"detail":"struct C.nk_color","insertText":"C.nk_color{r:$1, g:$2, b:$3, a:$4}","insertTextFormat":2},{"label":"C.nk_colorf","kind":22,"detail":"pub struct C.nk_colorf","insertText":"C.nk_colorf{r:$1, g:$2, b:$3, a:$4}","insertTextFormat":2},{"label":"Nuklear","kind":22,"detail":"pub struct Nuklear","insertText":"Nuklear{nk_ctx:$1}","insertTextFormat":2},{"label":"handle_event","kind":3,"detail":"pub fn handle_event(with_hwnd C.HWND, with_msg u32, with_param u32, and_lparam int) bool","insertText":"handle_event($0, $1, $2, $3)","insertTextFormat":2},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664318821}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/nuklear/wrapper.v","diagnostics":[]}},"timestamp":1664318821}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":6,"method":"textDocument/completion","params":{"position":{"line":49,"character":20},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/nuklear/wrapper.v"},"context":{"triggerKind":2,"triggerCharacter":":"}}},"timestamp":1664318822}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":6,"result":[]},"timestamp":1664318822}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/nuklear/wrapper.v","diagnostics":[]}},"timestamp":1664318822}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":7,"method":"textDocument/completion","params":{"position":{"line":49,"character":19},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/nuklear/wrapper.v"},"context":{"triggerKind":2,"triggerCharacter":"{"}}},"timestamp":1664318822}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":7,"result":[]},"timestamp":1664318822}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/nuklear/wrapper.v","diagnostics":[]}},"timestamp":1664318822}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/nuklear/wrapper.v","diagnostics":[]}},"timestamp":1664318823}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/math.v","diagnostics":[]}},"timestamp":1664318833}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/process.v","diagnostics":[]}},"timestamp":1664318833}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/mem.v","diagnostics":[]}},"timestamp":1664318833}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/vec.v","diagnostics":[]}},"timestamp":1664318833}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/misc.v","diagnostics":[]}},"timestamp":1664318833}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664318833}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/color.v","diagnostics":[]}},"timestamp":1664318833}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/errors.v","diagnostics":[]}},"timestamp":1664318833}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664318833}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[{"range":{"start":{"line":10,"character":8},"end":{"line":10,"character":8}},"severity":1,"code":"","source":"","message":"unknown function: C.AllocConsole","relatedInformation":[]},{"range":{"start":{"line":14,"character":7},"end":{"line":14,"character":7}},"severity":1,"code":"","source":"","message":"unknown function: C.freopen_s","relatedInformation":[]},{"range":{"start":{"line":31,"character":28},"end":{"line":31,"character":28}},"severity":1,"code":"","source":"","message":"unknown function: C.GetProcAddress","relatedInformation":[]}]}},"timestamp":1664318833}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664318904}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[{"range":{"start":{"line":10,"character":8},"end":{"line":10,"character":8}},"severity":1,"code":"","source":"","message":"unknown function: C.AllocConsole","relatedInformation":[]},{"range":{"start":{"line":14,"character":7},"end":{"line":14,"character":7}},"severity":1,"code":"","source":"","message":"unknown function: C.freopen_s","relatedInformation":[]},{"range":{"start":{"line":31,"character":28},"end":{"line":31,"character":28}},"severity":1,"code":"","source":"","message":"unknown function: C.GetProcAddress","relatedInformation":[]}]}},"timestamp":1664318904}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/color.v","diagnostics":[]}},"timestamp":1664318919}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/color.v","diagnostics":[]}},"timestamp":1664318919}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/color.v","diagnostics":[]}},"timestamp":1664318920}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/color.v","diagnostics":[{"range":{"start":{"line":2,"character":7},"end":{"line":2,"character":7}},"severity":2,"code":"","source":"","message":"module 'nuklear (golphook.nuklear)' is imported but never used","relatedInformation":[]}]}},"timestamp":1664318920}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":8,"method":"textDocument/completion","params":{"position":{"line":34,"character":2},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/color.v"},"context":{"triggerKind":1}}},"timestamp":1664318934}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":8,"result":[{"label":"nuklear","kind":9,"detail":"","insertText":"nuklear","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"radian","kind":6,"detail":"pub const radian f32","insertText":"radian","insertTextFormat":1},{"label":"Vec3","kind":22,"detail":"pub struct Vec3","insertText":"Vec3{x:$1, y:$2, z:$3}","insertTextFormat":2},{"label":"distance_from","kind":3,"detail":"pub fn distance_from(from_ent Vec3, to_ent Vec3) f32","insertText":"distance_from($0, $1)","insertTextFormat":2},{"label":"sin_cos","kind":3,"detail":"pub fn sin_cos(with_radion f32) (f32, f32)","insertText":"sin_cos($0)","insertTextFormat":2},{"label":"Angle","kind":22,"detail":"pub struct Angle","insertText":"Angle{pitch:$1, yaw:$2, roll:$3}","insertTextFormat":2},{"label":"angle_to_vectors","kind":3,"detail":"pub fn angle_to_vectors(with_angle Angle) (Vec3, Vec3, Vec3)","insertText":"angle_to_vectors($0)","insertTextFormat":2},{"label":"get_virtual","kind":3,"detail":"fn get_virtual(in_this_obj voidptr, at_index int) voidptr","insertText":"get_virtual($0, $1)","insertTextFormat":2},{"label":"call_vfunc","kind":3,"detail":"fn call_vfunc(from_class voidptr, at_idx int) T","insertText":"call_vfunc($0, $1)","insertTextFormat":2},{"label":"get_val_offset","kind":3,"detail":"pub fn get_val_offset(in_this_obj voidptr, at_offset usize) &T","insertText":"get_val_offset($0, $1)","insertTextFormat":2},{"label":"Value","kind":22,"detail":"struct Value","insertText":"Value{ptr:$1}","insertTextFormat":2},{"label":"C.IMAGE_DOS_HEADER","kind":22,"detail":"struct C.IMAGE_DOS_HEADER","insertText":"C.IMAGE_DOS_HEADER{pad:$1, pud:$2, ped:$3, pyd:$4, e_lfanew:$5}","insertTextFormat":2},{"label":"C.IMAGE_OPTIONAL_HEADER","kind":22,"detail":"struct C.IMAGE_OPTIONAL_HEADER","insertText":"C.IMAGE_OPTIONAL_HEADER{Magic:$1, pad:$2, SizeOfImage:$3}","insertTextFormat":2},{"label":"C.IMAGE_NT_HEADERS","kind":22,"detail":"struct C.IMAGE_NT_HEADERS","insertText":"C.IMAGE_NT_HEADERS{pad:$1, OptionalHeader:$2}","insertTextFormat":2},{"label":"pattern_scan","kind":3,"detail":"pub fn pattern_scan(in_module string, with_sig string) ?voidptr","insertText":"pattern_scan($0, $1)","insertTextFormat":2},{"label":"wait_for_module","kind":3,"detail":"pub fn wait_for_module(mut with_modules []string, and_max_timeout int)","insertText":"wait_for_module($0, $1)","insertTextFormat":2},{"label":"Matrix","kind":22,"detail":"pub struct Matrix","insertText":"Matrix{m:$1}","insertTextFormat":2},{"label":"Vec2","kind":22,"detail":"pub struct Vec2","insertText":"Vec2{x:$1, y:$2}","insertTextFormat":2},{"label":"op_vec","kind":3,"detail":"pub fn op_vec(with_op_val f32) Vec3","insertText":"op_vec($0)","insertTextFormat":2},{"label":"new_angle","kind":3,"detail":"pub fn new_angle(x T, y T, z T) Angle","insertText":"new_angle($0, $1, $2)","insertTextFormat":2},{"label":"new_vec3","kind":3,"detail":"pub fn new_vec3(x T, y T, z T) Vec3","insertText":"new_vec3($0, $1, $2)","insertTextFormat":2},{"label":"new_vec2","kind":3,"detail":"pub fn new_vec2(x T, y T) Vec2","insertText":"new_vec2($0, $1)","insertTextFormat":2},{"label":"HResult","kind":22,"detail":"pub struct HResult","insertText":"HResult{val:$1}","insertTextFormat":2},{"label":"h_res","kind":3,"detail":"pub fn h_res(with_hres int) HResult","insertText":"h_res($0)","insertTextFormat":2},{"label":"get_key","kind":3,"detail":"fn get_key(with_vk_code int, is_toggle bool) bool","insertText":"get_key($0, $1)","insertTextFormat":2},{"label":"str_align","kind":3,"detail":"pub fn str_align(with_og_text string, with_spaces_count i32, and_final_sep string) string","insertText":"str_align($0, $1, $2)","insertTextFormat":2},{"label":"load_unload_console","kind":3,"detail":"pub fn load_unload_console(with_switch bool, and_file &C.FILE)","insertText":"load_unload_console($0, $1)","insertTextFormat":2},{"label":"Color","kind":22,"detail":"struct Color","insertText":"Color{, rgba:$1}","insertTextFormat":2},{"label":"msg_c","kind":3,"detail":"fn msg_c(with_text string, and_color Color)","insertText":"msg_c($0, $1)","insertTextFormat":2},{"label":"pront","kind":3,"detail":"pub fn pront(with_text string)","insertText":"pront($0)","insertTextFormat":2},{"label":"ColorRgbF","kind":22,"detail":"pub struct ColorRgbF","insertText":"ColorRgbF{r:$1, g:$2, b:$3}","insertTextFormat":2},{"label":"ColorRgbaF","kind":22,"detail":"pub struct ColorRgbaF","insertText":"ColorRgbaF{r:$1, g:$2, b:$3, a:$4}","insertTextFormat":2},{"label":"ColorRgba","kind":22,"detail":"struct ColorRgba","insertText":"ColorRgba{r:$1, g:$2, b:$3, a:$4}","insertTextFormat":2},{"label":"color_rbga","kind":3,"detail":"pub fn color_rbga(r_ T, g_ T, b_ T, a_ T) Color","insertText":"color_rbga($0, $1, $2, $3)","insertTextFormat":2},{"label":"color_f_rbga","kind":3,"detail":"pub fn color_f_rbga(r_ T, g_ T, b_ T, a_ T) Color","insertText":"color_f_rbga($0, $1, $2, $3)","insertTextFormat":2},{"label":"color_hex","kind":3,"detail":"pub fn color_hex(withHex u32) Color","insertText":"color_hex($0)","insertTextFormat":2},{"label":"errors","kind":6,"detail":"const errors","insertText":"errors","insertTextFormat":1},{"label":"error_critical","kind":3,"detail":"pub fn error_critical(with_error string, and_error_complement string)","insertText":"error_critical($0, $1)","insertTextFormat":2},{"label":"client_error","kind":3,"detail":"pub fn client_error(with_error string)","insertText":"client_error($0)","insertTextFormat":2},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664318934}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/color.v","diagnostics":[]}},"timestamp":1664318934}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/color.v","diagnostics":[]}},"timestamp":1664318934}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/color.v","diagnostics":[]}},"timestamp":1664318934}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/color.v","diagnostics":[]}},"timestamp":1664318934}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/color.v","diagnostics":[]}},"timestamp":1664318935}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/color.v","diagnostics":[]}},"timestamp":1664318935}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/color.v","diagnostics":[]}},"timestamp":1664318935}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/color.v","diagnostics":[]}},"timestamp":1664318935}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/color.v","diagnostics":[]}},"timestamp":1664318936}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/color.v","diagnostics":[]}},"timestamp":1664318936}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":9,"method":"textDocument/completion","params":{"position":{"line":34,"character":4},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/color.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664318936}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":9,"result":[]},"timestamp":1664318936}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/color.v","diagnostics":[]}},"timestamp":1664318936}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/color.v","diagnostics":[]}},"timestamp":1664318936}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/color.v","diagnostics":[]}},"timestamp":1664318942}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/color.v","diagnostics":[{"range":{"start":{"line":2,"character":7},"end":{"line":2,"character":7}},"severity":2,"code":"","source":"","message":"module 'nuklear (golphook.nuklear)' is imported but never used","relatedInformation":[]}]}},"timestamp":1664318942}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/killsounds.v","diagnostics":[]}},"timestamp":1664318962}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/skins.v","diagnostics":[]}},"timestamp":1664318962}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_cacher.v","diagnostics":[]}},"timestamp":1664318962}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664318962}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/visuals.v","diagnostics":[]}},"timestamp":1664318962}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/chams.v","diagnostics":[]}},"timestamp":1664318962}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664318962}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664318962}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/n_menu.v","diagnostics":[]}},"timestamp":1664318963}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/config.v","diagnostics":[]}},"timestamp":1664318963}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/others.v","diagnostics":[]}},"timestamp":1664318963}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/drawable.v","diagnostics":[]}},"timestamp":1664318963}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1664318963}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/render_queue.v","diagnostics":[]}},"timestamp":1664318963}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664318963}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1664318963}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1664318963}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":10,"method":"textDocument/completion","params":{"position":{"line":19,"character":13},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v"},"context":{"triggerKind":1}}},"timestamp":1664318979}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":10,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"vmod","kind":9,"detail":"","insertText":"vmod","insertTextFormat":1},{"label":"d3d","kind":9,"detail":"","insertText":"d3d","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664318979}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1664318979}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1664318980}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1664318980}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":11,"method":"textDocument/completion","params":{"position":{"line":19,"character":10},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v"},"context":{"triggerKind":2,"triggerCharacter":"."}}},"timestamp":1664318980}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":11,"result":[]},"timestamp":1664318980}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1664318980}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":12,"method":"textDocument/completion","params":{"position":{"line":19,"character":9},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v"},"context":{"triggerKind":1}}},"timestamp":1664318980}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":12,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"vmod","kind":9,"detail":"","insertText":"vmod","insertTextFormat":1},{"label":"d3d","kind":9,"detail":"","insertText":"d3d","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664318980}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1664318980}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1664318980}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":13,"method":"textDocument/completion","params":{"position":{"line":19,"character":7},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664318980}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":13,"result":[]},"timestamp":1664318980}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1664318980}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":14,"method":"textDocument/completion","params":{"position":{"line":19,"character":8},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v"},"context":{"triggerKind":1}}},"timestamp":1664318980}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":14,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"vmod","kind":9,"detail":"","insertText":"vmod","insertTextFormat":1},{"label":"d3d","kind":9,"detail":"","insertText":"d3d","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664318980}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1664318980}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1664318981}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1664318981}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1664318981}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1664318982}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1664318982}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1664318982}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1664318985}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":15,"method":"textDocument/completion","params":{"position":{"line":7,"character":60},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v"},"context":{"triggerKind":1}}},"timestamp":1664318990}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":15,"result":[{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"with_switch","kind":6,"detail":"with_switch bool","insertText":"with_switch","insertTextFormat":1},{"label":"and_file","kind":6,"detail":"and_file &C.FILE","insertText":"and_file","insertTextFormat":1},{"label":"radian","kind":6,"detail":"pub const radian f32","insertText":"radian","insertTextFormat":1},{"label":"Vec3","kind":22,"detail":"pub struct Vec3","insertText":"Vec3{x:$1, y:$2, z:$3}","insertTextFormat":2},{"label":"distance_from","kind":3,"detail":"pub fn distance_from(from_ent Vec3, to_ent Vec3) f32","insertText":"distance_from($0, $1)","insertTextFormat":2},{"label":"sin_cos","kind":3,"detail":"pub fn sin_cos(with_radion f32) (f32, f32)","insertText":"sin_cos($0)","insertTextFormat":2},{"label":"Angle","kind":22,"detail":"pub struct Angle","insertText":"Angle{pitch:$1, yaw:$2, roll:$3}","insertTextFormat":2},{"label":"angle_to_vectors","kind":3,"detail":"pub fn angle_to_vectors(with_angle Angle) (Vec3, Vec3, Vec3)","insertText":"angle_to_vectors($0)","insertTextFormat":2},{"label":"get_virtual","kind":3,"detail":"fn get_virtual(in_this_obj voidptr, at_index int) voidptr","insertText":"get_virtual($0, $1)","insertTextFormat":2},{"label":"call_vfunc","kind":3,"detail":"fn call_vfunc(from_class voidptr, at_idx int) T","insertText":"call_vfunc($0, $1)","insertTextFormat":2},{"label":"get_val_offset","kind":3,"detail":"pub fn get_val_offset(in_this_obj voidptr, at_offset usize) &T","insertText":"get_val_offset($0, $1)","insertTextFormat":2},{"label":"Value","kind":22,"detail":"struct Value","insertText":"Value{ptr:$1}","insertTextFormat":2},{"label":"C.IMAGE_DOS_HEADER","kind":22,"detail":"struct C.IMAGE_DOS_HEADER","insertText":"C.IMAGE_DOS_HEADER{pad:$1, pud:$2, ped:$3, pyd:$4, e_lfanew:$5}","insertTextFormat":2},{"label":"C.IMAGE_OPTIONAL_HEADER","kind":22,"detail":"struct C.IMAGE_OPTIONAL_HEADER","insertText":"C.IMAGE_OPTIONAL_HEADER{Magic:$1, pad:$2, SizeOfImage:$3}","insertTextFormat":2},{"label":"C.IMAGE_NT_HEADERS","kind":22,"detail":"struct C.IMAGE_NT_HEADERS","insertText":"C.IMAGE_NT_HEADERS{pad:$1, OptionalHeader:$2}","insertTextFormat":2},{"label":"pattern_scan","kind":3,"detail":"pub fn pattern_scan(in_module string, with_sig string) ?voidptr","insertText":"pattern_scan($0, $1)","insertTextFormat":2},{"label":"wait_for_module","kind":3,"detail":"pub fn wait_for_module(mut with_modules []string, and_max_timeout int)","insertText":"wait_for_module($0, $1)","insertTextFormat":2},{"label":"Matrix","kind":22,"detail":"pub struct Matrix","insertText":"Matrix{m:$1}","insertTextFormat":2},{"label":"Vec2","kind":22,"detail":"pub struct Vec2","insertText":"Vec2{x:$1, y:$2}","insertTextFormat":2},{"label":"op_vec","kind":3,"detail":"pub fn op_vec(with_op_val f32) Vec3","insertText":"op_vec($0)","insertTextFormat":2},{"label":"new_angle","kind":3,"detail":"pub fn new_angle(x T, y T, z T) Angle","insertText":"new_angle($0, $1, $2)","insertTextFormat":2},{"label":"new_vec3","kind":3,"detail":"pub fn new_vec3(x T, y T, z T) Vec3","insertText":"new_vec3($0, $1, $2)","insertTextFormat":2},{"label":"new_vec2","kind":3,"detail":"pub fn new_vec2(x T, y T) Vec2","insertText":"new_vec2($0, $1)","insertTextFormat":2},{"label":"HResult","kind":22,"detail":"pub struct HResult","insertText":"HResult{val:$1}","insertTextFormat":2},{"label":"h_res","kind":3,"detail":"pub fn h_res(with_hres int) HResult","insertText":"h_res($0)","insertTextFormat":2},{"label":"get_key","kind":3,"detail":"fn get_key(with_vk_code int, is_toggle bool) bool","insertText":"get_key($0, $1)","insertTextFormat":2},{"label":"str_align","kind":3,"detail":"pub fn str_align(with_og_text string, with_spaces_count i32, and_final_sep string) string","insertText":"str_align($0, $1, $2)","insertTextFormat":2},{"label":"load_unload_console","kind":3,"detail":"pub fn load_unload_console(with_switch bool, and_file &C.FILE)","insertText":"load_unload_console($0, $1)","insertTextFormat":2},{"label":"Color","kind":22,"detail":"pub struct Color","insertText":"Color{, rgba:$1}","insertTextFormat":2},{"label":"msg_c","kind":3,"detail":"fn msg_c(with_text string, and_color Color)","insertText":"msg_c($0, $1)","insertTextFormat":2},{"label":"pront","kind":3,"detail":"pub fn pront(with_text string)","insertText":"pront($0)","insertTextFormat":2},{"label":"ColorRgbF","kind":22,"detail":"pub struct ColorRgbF","insertText":"ColorRgbF{r:$1, g:$2, b:$3}","insertTextFormat":2},{"label":"ColorRgbaF","kind":22,"detail":"pub struct ColorRgbaF","insertText":"ColorRgbaF{r:$1, g:$2, b:$3, a:$4}","insertTextFormat":2},{"label":"ColorRgba","kind":22,"detail":"struct ColorRgba","insertText":"ColorRgba{r:$1, g:$2, b:$3, a:$4}","insertTextFormat":2},{"label":"color_rbga","kind":3,"detail":"pub fn color_rbga(r_ T, g_ T, b_ T, a_ T) Color","insertText":"color_rbga($0, $1, $2, $3)","insertTextFormat":2},{"label":"color_f_rbga","kind":3,"detail":"pub fn color_f_rbga(r_ T, g_ T, b_ T, a_ T) Color","insertText":"color_f_rbga($0, $1, $2, $3)","insertTextFormat":2},{"label":"color_hex","kind":3,"detail":"pub fn color_hex(withHex u32) Color","insertText":"color_hex($0)","insertTextFormat":2},{"label":"errors","kind":6,"detail":"const errors","insertText":"errors","insertTextFormat":1},{"label":"error_critical","kind":3,"detail":"pub fn error_critical(with_error string, and_error_complement string)","insertText":"error_critical($0, $1)","insertTextFormat":2},{"label":"client_error","kind":3,"detail":"pub fn client_error(with_error string)","insertText":"client_error($0)","insertTextFormat":2},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664318990}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664318990}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664318990}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664318990}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664318990}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664318990}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664318990}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":16,"method":"textDocument/completion","params":{"position":{"line":7,"character":57},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v"},"context":{"triggerKind":2,"triggerCharacter":"."}}},"timestamp":1664318990}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":16,"result":[]},"timestamp":1664318990}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664318990}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664318990}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":17,"method":"textDocument/completion","params":{"position":{"line":7,"character":56},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v"},"context":{"triggerKind":1}}},"timestamp":1664318990}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":17,"result":[{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"with_switch","kind":6,"detail":"with_switch bool","insertText":"with_switch","insertTextFormat":1},{"label":"and_file","kind":6,"detail":"and_file &C.","insertText":"and_file","insertTextFormat":1},{"label":"with_switch","kind":6,"detail":"with_switch bool","insertText":"with_switch","insertTextFormat":1},{"label":"and_file","kind":6,"detail":"and_file &C.F","insertText":"and_file","insertTextFormat":1},{"label":"with_switch","kind":6,"detail":"with_switch bool","insertText":"with_switch","insertTextFormat":1},{"label":"and_file","kind":6,"detail":"and_file &C.FI","insertText":"and_file","insertTextFormat":1},{"label":"with_switch","kind":6,"detail":"with_switch bool","insertText":"with_switch","insertTextFormat":1},{"label":"and_file","kind":6,"detail":"and_file &C.FIL","insertText":"and_file","insertTextFormat":1},{"label":"with_switch","kind":6,"detail":"with_switch bool","insertText":"with_switch","insertTextFormat":1},{"label":"and_file","kind":6,"detail":"and_file &C.FILE","insertText":"and_file","insertTextFormat":1},{"label":"radian","kind":6,"detail":"pub const radian f32","insertText":"radian","insertTextFormat":1},{"label":"Vec3","kind":22,"detail":"pub struct Vec3","insertText":"Vec3{x:$1, y:$2, z:$3}","insertTextFormat":2},{"label":"distance_from","kind":3,"detail":"pub fn distance_from(from_ent Vec3, to_ent Vec3) f32","insertText":"distance_from($0, $1)","insertTextFormat":2},{"label":"sin_cos","kind":3,"detail":"pub fn sin_cos(with_radion f32) (f32, f32)","insertText":"sin_cos($0)","insertTextFormat":2},{"label":"Angle","kind":22,"detail":"pub struct Angle","insertText":"Angle{pitch:$1, yaw:$2, roll:$3}","insertTextFormat":2},{"label":"angle_to_vectors","kind":3,"detail":"pub fn angle_to_vectors(with_angle Angle) (Vec3, Vec3, Vec3)","insertText":"angle_to_vectors($0)","insertTextFormat":2},{"label":"get_virtual","kind":3,"detail":"fn get_virtual(in_this_obj voidptr, at_index int) voidptr","insertText":"get_virtual($0, $1)","insertTextFormat":2},{"label":"call_vfunc","kind":3,"detail":"fn call_vfunc(from_class voidptr, at_idx int) T","insertText":"call_vfunc($0, $1)","insertTextFormat":2},{"label":"get_val_offset","kind":3,"detail":"pub fn get_val_offset(in_this_obj voidptr, at_offset usize) &T","insertText":"get_val_offset($0, $1)","insertTextFormat":2},{"label":"Value","kind":22,"detail":"struct Value","insertText":"Value{ptr:$1}","insertTextFormat":2},{"label":"C.IMAGE_DOS_HEADER","kind":22,"detail":"struct C.IMAGE_DOS_HEADER","insertText":"C.IMAGE_DOS_HEADER{pad:$1, pud:$2, ped:$3, pyd:$4, e_lfanew:$5}","insertTextFormat":2},{"label":"C.IMAGE_OPTIONAL_HEADER","kind":22,"detail":"struct C.IMAGE_OPTIONAL_HEADER","insertText":"C.IMAGE_OPTIONAL_HEADER{Magic:$1, pad:$2, SizeOfImage:$3}","insertTextFormat":2},{"label":"C.IMAGE_NT_HEADERS","kind":22,"detail":"struct C.IMAGE_NT_HEADERS","insertText":"C.IMAGE_NT_HEADERS{pad:$1, OptionalHeader:$2}","insertTextFormat":2},{"label":"pattern_scan","kind":3,"detail":"pub fn pattern_scan(in_module string, with_sig string) ?voidptr","insertText":"pattern_scan($0, $1)","insertTextFormat":2},{"label":"wait_for_module","kind":3,"detail":"pub fn wait_for_module(mut with_modules []string, and_max_timeout int)","insertText":"wait_for_module($0, $1)","insertTextFormat":2},{"label":"Matrix","kind":22,"detail":"pub struct Matrix","insertText":"Matrix{m:$1}","insertTextFormat":2},{"label":"Vec2","kind":22,"detail":"pub struct Vec2","insertText":"Vec2{x:$1, y:$2}","insertTextFormat":2},{"label":"op_vec","kind":3,"detail":"pub fn op_vec(with_op_val f32) Vec3","insertText":"op_vec($0)","insertTextFormat":2},{"label":"new_angle","kind":3,"detail":"pub fn new_angle(x T, y T, z T) Angle","insertText":"new_angle($0, $1, $2)","insertTextFormat":2},{"label":"new_vec3","kind":3,"detail":"pub fn new_vec3(x T, y T, z T) Vec3","insertText":"new_vec3($0, $1, $2)","insertTextFormat":2},{"label":"new_vec2","kind":3,"detail":"pub fn new_vec2(x T, y T) Vec2","insertText":"new_vec2($0, $1)","insertTextFormat":2},{"label":"HResult","kind":22,"detail":"pub struct HResult","insertText":"HResult{val:$1}","insertTextFormat":2},{"label":"h_res","kind":3,"detail":"pub fn h_res(with_hres int) HResult","insertText":"h_res($0)","insertTextFormat":2},{"label":"get_key","kind":3,"detail":"fn get_key(with_vk_code int, is_toggle bool) bool","insertText":"get_key($0, $1)","insertTextFormat":2},{"label":"str_align","kind":3,"detail":"pub fn str_align(with_og_text string, with_spaces_count i32, and_final_sep string) string","insertText":"str_align($0, $1, $2)","insertTextFormat":2},{"label":"load_unload_console","kind":3,"detail":"pub fn load_unload_console(with_switch bool, and_file &C.)","insertText":"load_unload_console($0, $1)","insertTextFormat":2},{"label":"Color","kind":22,"detail":"pub struct Color","insertText":"Color{, rgba:$1}","insertTextFormat":2},{"label":"msg_c","kind":3,"detail":"fn msg_c(with_text string, and_color Color)","insertText":"msg_c($0, $1)","insertTextFormat":2},{"label":"pront","kind":3,"detail":"pub fn pront(with_text string)","insertText":"pront($0)","insertTextFormat":2},{"label":"ColorRgbF","kind":22,"detail":"pub struct ColorRgbF","insertText":"ColorRgbF{r:$1, g:$2, b:$3}","insertTextFormat":2},{"label":"ColorRgbaF","kind":22,"detail":"pub struct ColorRgbaF","insertText":"ColorRgbaF{r:$1, g:$2, b:$3, a:$4}","insertTextFormat":2},{"label":"ColorRgba","kind":22,"detail":"struct ColorRgba","insertText":"ColorRgba{r:$1, g:$2, b:$3, a:$4}","insertTextFormat":2},{"label":"color_rbga","kind":3,"detail":"pub fn color_rbga(r_ T, g_ T, b_ T, a_ T) Color","insertText":"color_rbga($0, $1, $2, $3)","insertTextFormat":2},{"label":"color_f_rbga","kind":3,"detail":"pub fn color_f_rbga(r_ T, g_ T, b_ T, a_ T) Color","insertText":"color_f_rbga($0, $1, $2, $3)","insertTextFormat":2},{"label":"color_hex","kind":3,"detail":"pub fn color_hex(withHex u32) Color","insertText":"color_hex($0)","insertTextFormat":2},{"label":"errors","kind":6,"detail":"const errors","insertText":"errors","insertTextFormat":1},{"label":"error_critical","kind":3,"detail":"pub fn error_critical(with_error string, and_error_complement string)","insertText":"error_critical($0, $1)","insertTextFormat":2},{"label":"client_error","kind":3,"detail":"pub fn client_error(with_error string)","insertText":"client_error($0)","insertTextFormat":2},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664318990}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664318990}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664318990}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664318991}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664318991}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":18,"method":"textDocument/completion","params":{"position":{"line":7,"character":56},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v"},"context":{"triggerKind":1}}},"timestamp":1664318991}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":18,"result":[{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"with_switch","kind":6,"detail":"with_switch bool","insertText":"with_switch","insertTextFormat":1},{"label":"and_file","kind":6,"detail":"and_file","insertText":"and_file","insertTextFormat":1},{"label":"with_switch","kind":6,"detail":"with_switch bool","insertText":"with_switch","insertTextFormat":1},{"label":"with_switch","kind":6,"detail":"with_switch bool","insertText":"with_switch","insertTextFormat":1},{"label":"and_file","kind":6,"detail":"and_file &C.","insertText":"and_file","insertTextFormat":1},{"label":"with_switch","kind":6,"detail":"with_switch bool","insertText":"with_switch","insertTextFormat":1},{"label":"and_file","kind":6,"detail":"and_file &C.F","insertText":"and_file","insertTextFormat":1},{"label":"with_switch","kind":6,"detail":"with_switch bool","insertText":"with_switch","insertTextFormat":1},{"label":"and_file","kind":6,"detail":"and_file &C.FI","insertText":"and_file","insertTextFormat":1},{"label":"with_switch","kind":6,"detail":"with_switch bool","insertText":"with_switch","insertTextFormat":1},{"label":"and_file","kind":6,"detail":"and_file &C.FIL","insertText":"and_file","insertTextFormat":1},{"label":"with_switch","kind":6,"detail":"with_switch bool","insertText":"with_switch","insertTextFormat":1},{"label":"and_file","kind":6,"detail":"and_file &C.FILE","insertText":"and_file","insertTextFormat":1},{"label":"radian","kind":6,"detail":"pub const radian f32","insertText":"radian","insertTextFormat":1},{"label":"Vec3","kind":22,"detail":"pub struct Vec3","insertText":"Vec3{x:$1, y:$2, z:$3}","insertTextFormat":2},{"label":"distance_from","kind":3,"detail":"pub fn distance_from(from_ent Vec3, to_ent Vec3) f32","insertText":"distance_from($0, $1)","insertTextFormat":2},{"label":"sin_cos","kind":3,"detail":"pub fn sin_cos(with_radion f32) (f32, f32)","insertText":"sin_cos($0)","insertTextFormat":2},{"label":"Angle","kind":22,"detail":"pub struct Angle","insertText":"Angle{pitch:$1, yaw:$2, roll:$3}","insertTextFormat":2},{"label":"angle_to_vectors","kind":3,"detail":"pub fn angle_to_vectors(with_angle Angle) (Vec3, Vec3, Vec3)","insertText":"angle_to_vectors($0)","insertTextFormat":2},{"label":"get_virtual","kind":3,"detail":"fn get_virtual(in_this_obj voidptr, at_index int) voidptr","insertText":"get_virtual($0, $1)","insertTextFormat":2},{"label":"call_vfunc","kind":3,"detail":"fn call_vfunc(from_class voidptr, at_idx int) T","insertText":"call_vfunc($0, $1)","insertTextFormat":2},{"label":"get_val_offset","kind":3,"detail":"pub fn get_val_offset(in_this_obj voidptr, at_offset usize) &T","insertText":"get_val_offset($0, $1)","insertTextFormat":2},{"label":"Value","kind":22,"detail":"struct Value","insertText":"Value{ptr:$1}","insertTextFormat":2},{"label":"C.IMAGE_DOS_HEADER","kind":22,"detail":"struct C.IMAGE_DOS_HEADER","insertText":"C.IMAGE_DOS_HEADER{pad:$1, pud:$2, ped:$3, pyd:$4, e_lfanew:$5}","insertTextFormat":2},{"label":"C.IMAGE_OPTIONAL_HEADER","kind":22,"detail":"struct C.IMAGE_OPTIONAL_HEADER","insertText":"C.IMAGE_OPTIONAL_HEADER{Magic:$1, pad:$2, SizeOfImage:$3}","insertTextFormat":2},{"label":"C.IMAGE_NT_HEADERS","kind":22,"detail":"struct C.IMAGE_NT_HEADERS","insertText":"C.IMAGE_NT_HEADERS{pad:$1, OptionalHeader:$2}","insertTextFormat":2},{"label":"pattern_scan","kind":3,"detail":"pub fn pattern_scan(in_module string, with_sig string) ?voidptr","insertText":"pattern_scan($0, $1)","insertTextFormat":2},{"label":"wait_for_module","kind":3,"detail":"pub fn wait_for_module(mut with_modules []string, and_max_timeout int)","insertText":"wait_for_module($0, $1)","insertTextFormat":2},{"label":"Matrix","kind":22,"detail":"pub struct Matrix","insertText":"Matrix{m:$1}","insertTextFormat":2},{"label":"Vec2","kind":22,"detail":"pub struct Vec2","insertText":"Vec2{x:$1, y:$2}","insertTextFormat":2},{"label":"op_vec","kind":3,"detail":"pub fn op_vec(with_op_val f32) Vec3","insertText":"op_vec($0)","insertTextFormat":2},{"label":"new_angle","kind":3,"detail":"pub fn new_angle(x T, y T, z T) Angle","insertText":"new_angle($0, $1, $2)","insertTextFormat":2},{"label":"new_vec3","kind":3,"detail":"pub fn new_vec3(x T, y T, z T) Vec3","insertText":"new_vec3($0, $1, $2)","insertTextFormat":2},{"label":"new_vec2","kind":3,"detail":"pub fn new_vec2(x T, y T) Vec2","insertText":"new_vec2($0, $1)","insertTextFormat":2},{"label":"HResult","kind":22,"detail":"pub struct HResult","insertText":"HResult{val:$1}","insertTextFormat":2},{"label":"h_res","kind":3,"detail":"pub fn h_res(with_hres int) HResult","insertText":"h_res($0)","insertTextFormat":2},{"label":"get_key","kind":3,"detail":"fn get_key(with_vk_code int, is_toggle bool) bool","insertText":"get_key($0, $1)","insertTextFormat":2},{"label":"str_align","kind":3,"detail":"pub fn str_align(with_og_text string, with_spaces_count i32, and_final_sep string) string","insertText":"str_align($0, $1, $2)","insertTextFormat":2},{"label":"load_unload_console","kind":3,"detail":"pub fn load_unload_console(with_switch bool, and_file)","insertText":"load_unload_console($0, $1)","insertTextFormat":2},{"label":"Color","kind":22,"detail":"pub struct Color","insertText":"Color{, rgba:$1}","insertTextFormat":2},{"label":"msg_c","kind":3,"detail":"fn msg_c(with_text string, and_color Color)","insertText":"msg_c($0, $1)","insertTextFormat":2},{"label":"pront","kind":3,"detail":"pub fn pront(with_text string)","insertText":"pront($0)","insertTextFormat":2},{"label":"ColorRgbF","kind":22,"detail":"pub struct ColorRgbF","insertText":"ColorRgbF{r:$1, g:$2, b:$3}","insertTextFormat":2},{"label":"ColorRgbaF","kind":22,"detail":"pub struct ColorRgbaF","insertText":"ColorRgbaF{r:$1, g:$2, b:$3, a:$4}","insertTextFormat":2},{"label":"ColorRgba","kind":22,"detail":"struct ColorRgba","insertText":"ColorRgba{r:$1, g:$2, b:$3, a:$4}","insertTextFormat":2},{"label":"color_rbga","kind":3,"detail":"pub fn color_rbga(r_ T, g_ T, b_ T, a_ T) Color","insertText":"color_rbga($0, $1, $2, $3)","insertTextFormat":2},{"label":"color_f_rbga","kind":3,"detail":"pub fn color_f_rbga(r_ T, g_ T, b_ T, a_ T) Color","insertText":"color_f_rbga($0, $1, $2, $3)","insertTextFormat":2},{"label":"color_hex","kind":3,"detail":"pub fn color_hex(withHex u32) Color","insertText":"color_hex($0)","insertTextFormat":2},{"label":"errors","kind":6,"detail":"const errors","insertText":"errors","insertTextFormat":1},{"label":"error_critical","kind":3,"detail":"pub fn error_critical(with_error string, and_error_complement string)","insertText":"error_critical($0, $1)","insertTextFormat":2},{"label":"client_error","kind":3,"detail":"pub fn client_error(with_error string)","insertText":"client_error($0)","insertTextFormat":2},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664318991}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664318991}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664318991}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664318991}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664318991}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":19,"method":"textDocument/completion","params":{"position":{"line":7,"character":54},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664318991}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":19,"result":[]},"timestamp":1664318991}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":20,"method":"textDocument/completion","params":{"position":{"line":7,"character":55},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v"},"context":{"triggerKind":1}}},"timestamp":1664318991}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":20,"result":[{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"with_switch","kind":6,"detail":"with_switch bool","insertText":"with_switch","insertTextFormat":1},{"label":"and_file","kind":6,"detail":"and_file","insertText":"and_file","insertTextFormat":1},{"label":"with_switch","kind":6,"detail":"with_switch bool","insertText":"with_switch","insertTextFormat":1},{"label":"with_switch","kind":6,"detail":"with_switch bool","insertText":"with_switch","insertTextFormat":1},{"label":"and_file","kind":6,"detail":"and_file &C.","insertText":"and_file","insertTextFormat":1},{"label":"with_switch","kind":6,"detail":"with_switch bool","insertText":"with_switch","insertTextFormat":1},{"label":"and_file","kind":6,"detail":"and_file &C.F","insertText":"and_file","insertTextFormat":1},{"label":"with_switch","kind":6,"detail":"with_switch bool","insertText":"with_switch","insertTextFormat":1},{"label":"and_file","kind":6,"detail":"and_file &C.FI","insertText":"and_file","insertTextFormat":1},{"label":"with_switch","kind":6,"detail":"with_switch bool","insertText":"with_switch","insertTextFormat":1},{"label":"and_file","kind":6,"detail":"and_file &C.FIL","insertText":"and_file","insertTextFormat":1},{"label":"with_switch","kind":6,"detail":"with_switch bool","insertText":"with_switch","insertTextFormat":1},{"label":"and_file","kind":6,"detail":"and_file &C.FILE","insertText":"and_file","insertTextFormat":1},{"label":"radian","kind":6,"detail":"pub const radian f32","insertText":"radian","insertTextFormat":1},{"label":"Vec3","kind":22,"detail":"pub struct Vec3","insertText":"Vec3{x:$1, y:$2, z:$3}","insertTextFormat":2},{"label":"distance_from","kind":3,"detail":"pub fn distance_from(from_ent Vec3, to_ent Vec3) f32","insertText":"distance_from($0, $1)","insertTextFormat":2},{"label":"sin_cos","kind":3,"detail":"pub fn sin_cos(with_radion f32) (f32, f32)","insertText":"sin_cos($0)","insertTextFormat":2},{"label":"Angle","kind":22,"detail":"pub struct Angle","insertText":"Angle{pitch:$1, yaw:$2, roll:$3}","insertTextFormat":2},{"label":"angle_to_vectors","kind":3,"detail":"pub fn angle_to_vectors(with_angle Angle) (Vec3, Vec3, Vec3)","insertText":"angle_to_vectors($0)","insertTextFormat":2},{"label":"get_virtual","kind":3,"detail":"fn get_virtual(in_this_obj voidptr, at_index int) voidptr","insertText":"get_virtual($0, $1)","insertTextFormat":2},{"label":"call_vfunc","kind":3,"detail":"fn call_vfunc(from_class voidptr, at_idx int) T","insertText":"call_vfunc($0, $1)","insertTextFormat":2},{"label":"get_val_offset","kind":3,"detail":"pub fn get_val_offset(in_this_obj voidptr, at_offset usize) &T","insertText":"get_val_offset($0, $1)","insertTextFormat":2},{"label":"Value","kind":22,"detail":"struct Value","insertText":"Value{ptr:$1}","insertTextFormat":2},{"label":"C.IMAGE_DOS_HEADER","kind":22,"detail":"struct C.IMAGE_DOS_HEADER","insertText":"C.IMAGE_DOS_HEADER{pad:$1, pud:$2, ped:$3, pyd:$4, e_lfanew:$5}","insertTextFormat":2},{"label":"C.IMAGE_OPTIONAL_HEADER","kind":22,"detail":"struct C.IMAGE_OPTIONAL_HEADER","insertText":"C.IMAGE_OPTIONAL_HEADER{Magic:$1, pad:$2, SizeOfImage:$3}","insertTextFormat":2},{"label":"C.IMAGE_NT_HEADERS","kind":22,"detail":"struct C.IMAGE_NT_HEADERS","insertText":"C.IMAGE_NT_HEADERS{pad:$1, OptionalHeader:$2}","insertTextFormat":2},{"label":"pattern_scan","kind":3,"detail":"pub fn pattern_scan(in_module string, with_sig string) ?voidptr","insertText":"pattern_scan($0, $1)","insertTextFormat":2},{"label":"wait_for_module","kind":3,"detail":"pub fn wait_for_module(mut with_modules []string, and_max_timeout int)","insertText":"wait_for_module($0, $1)","insertTextFormat":2},{"label":"Matrix","kind":22,"detail":"pub struct Matrix","insertText":"Matrix{m:$1}","insertTextFormat":2},{"label":"Vec2","kind":22,"detail":"pub struct Vec2","insertText":"Vec2{x:$1, y:$2}","insertTextFormat":2},{"label":"op_vec","kind":3,"detail":"pub fn op_vec(with_op_val f32) Vec3","insertText":"op_vec($0)","insertTextFormat":2},{"label":"new_angle","kind":3,"detail":"pub fn new_angle(x T, y T, z T) Angle","insertText":"new_angle($0, $1, $2)","insertTextFormat":2},{"label":"new_vec3","kind":3,"detail":"pub fn new_vec3(x T, y T, z T) Vec3","insertText":"new_vec3($0, $1, $2)","insertTextFormat":2},{"label":"new_vec2","kind":3,"detail":"pub fn new_vec2(x T, y T) Vec2","insertText":"new_vec2($0, $1)","insertTextFormat":2},{"label":"HResult","kind":22,"detail":"pub struct HResult","insertText":"HResult{val:$1}","insertTextFormat":2},{"label":"h_res","kind":3,"detail":"pub fn h_res(with_hres int) HResult","insertText":"h_res($0)","insertTextFormat":2},{"label":"get_key","kind":3,"detail":"fn get_key(with_vk_code int, is_toggle bool) bool","insertText":"get_key($0, $1)","insertTextFormat":2},{"label":"str_align","kind":3,"detail":"pub fn str_align(with_og_text string, with_spaces_count i32, and_final_sep string) string","insertText":"str_align($0, $1, $2)","insertTextFormat":2},{"label":"load_unload_console","kind":3,"detail":"pub fn load_unload_console(with_switch bool, and_file)","insertText":"load_unload_console($0, $1)","insertTextFormat":2},{"label":"Color","kind":22,"detail":"pub struct Color","insertText":"Color{, rgba:$1}","insertTextFormat":2},{"label":"msg_c","kind":3,"detail":"fn msg_c(with_text string, and_color Color)","insertText":"msg_c($0, $1)","insertTextFormat":2},{"label":"pront","kind":3,"detail":"pub fn pront(with_text string)","insertText":"pront($0)","insertTextFormat":2},{"label":"ColorRgbF","kind":22,"detail":"pub struct ColorRgbF","insertText":"ColorRgbF{r:$1, g:$2, b:$3}","insertTextFormat":2},{"label":"ColorRgbaF","kind":22,"detail":"pub struct ColorRgbaF","insertText":"ColorRgbaF{r:$1, g:$2, b:$3, a:$4}","insertTextFormat":2},{"label":"ColorRgba","kind":22,"detail":"struct ColorRgba","insertText":"ColorRgba{r:$1, g:$2, b:$3, a:$4}","insertTextFormat":2},{"label":"color_rbga","kind":3,"detail":"pub fn color_rbga(r_ T, g_ T, b_ T, a_ T) Color","insertText":"color_rbga($0, $1, $2, $3)","insertTextFormat":2},{"label":"color_f_rbga","kind":3,"detail":"pub fn color_f_rbga(r_ T, g_ T, b_ T, a_ T) Color","insertText":"color_f_rbga($0, $1, $2, $3)","insertTextFormat":2},{"label":"color_hex","kind":3,"detail":"pub fn color_hex(withHex u32) Color","insertText":"color_hex($0)","insertTextFormat":2},{"label":"errors","kind":6,"detail":"const errors","insertText":"errors","insertTextFormat":1},{"label":"error_critical","kind":3,"detail":"pub fn error_critical(with_error string, and_error_complement string)","insertText":"error_critical($0, $1)","insertTextFormat":2},{"label":"client_error","kind":3,"detail":"pub fn client_error(with_error string)","insertText":"client_error($0)","insertTextFormat":2},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664318991}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664318991}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664318991}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":21,"method":"textDocument/completion","params":{"position":{"line":7,"character":54},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664318992}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":21,"result":[]},"timestamp":1664318992}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664318992}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664318992}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":22,"method":"textDocument/completion","params":{"position":{"line":7,"character":55},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v"},"context":{"triggerKind":1}}},"timestamp":1664318992}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":22,"result":[{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"with_switch","kind":6,"detail":"with_switch bool","insertText":"with_switch","insertTextFormat":1},{"label":"and_file","kind":6,"detail":"and_file ?","insertText":"and_file","insertTextFormat":1},{"label":"with_switch","kind":6,"detail":"with_switch bool","insertText":"with_switch","insertTextFormat":1},{"label":"and_file","kind":6,"detail":"and_file","insertText":"and_file","insertTextFormat":1},{"label":"with_switch","kind":6,"detail":"with_switch bool","insertText":"with_switch","insertTextFormat":1},{"label":"with_switch","kind":6,"detail":"with_switch bool","insertText":"with_switch","insertTextFormat":1},{"label":"and_file","kind":6,"detail":"and_file &C.","insertText":"and_file","insertTextFormat":1},{"label":"with_switch","kind":6,"detail":"with_switch bool","insertText":"with_switch","insertTextFormat":1},{"label":"and_file","kind":6,"detail":"and_file &C.F","insertText":"and_file","insertTextFormat":1},{"label":"with_switch","kind":6,"detail":"with_switch bool","insertText":"with_switch","insertTextFormat":1},{"label":"and_file","kind":6,"detail":"and_file &C.FI","insertText":"and_file","insertTextFormat":1},{"label":"with_switch","kind":6,"detail":"with_switch bool","insertText":"with_switch","insertTextFormat":1},{"label":"and_file","kind":6,"detail":"and_file &C.FIL","insertText":"and_file","insertTextFormat":1},{"label":"with_switch","kind":6,"detail":"with_switch bool","insertText":"with_switch","insertTextFormat":1},{"label":"and_file","kind":6,"detail":"and_file &C.FILE","insertText":"and_file","insertTextFormat":1},{"label":"radian","kind":6,"detail":"pub const radian f32","insertText":"radian","insertTextFormat":1},{"label":"Vec3","kind":22,"detail":"pub struct Vec3","insertText":"Vec3{x:$1, y:$2, z:$3}","insertTextFormat":2},{"label":"distance_from","kind":3,"detail":"pub fn distance_from(from_ent Vec3, to_ent Vec3) f32","insertText":"distance_from($0, $1)","insertTextFormat":2},{"label":"sin_cos","kind":3,"detail":"pub fn sin_cos(with_radion f32) (f32, f32)","insertText":"sin_cos($0)","insertTextFormat":2},{"label":"Angle","kind":22,"detail":"pub struct Angle","insertText":"Angle{pitch:$1, yaw:$2, roll:$3}","insertTextFormat":2},{"label":"angle_to_vectors","kind":3,"detail":"pub fn angle_to_vectors(with_angle Angle) (Vec3, Vec3, Vec3)","insertText":"angle_to_vectors($0)","insertTextFormat":2},{"label":"get_virtual","kind":3,"detail":"fn get_virtual(in_this_obj voidptr, at_index int) voidptr","insertText":"get_virtual($0, $1)","insertTextFormat":2},{"label":"call_vfunc","kind":3,"detail":"fn call_vfunc(from_class voidptr, at_idx int) T","insertText":"call_vfunc($0, $1)","insertTextFormat":2},{"label":"get_val_offset","kind":3,"detail":"pub fn get_val_offset(in_this_obj voidptr, at_offset usize) &T","insertText":"get_val_offset($0, $1)","insertTextFormat":2},{"label":"Value","kind":22,"detail":"struct Value","insertText":"Value{ptr:$1}","insertTextFormat":2},{"label":"C.IMAGE_DOS_HEADER","kind":22,"detail":"struct C.IMAGE_DOS_HEADER","insertText":"C.IMAGE_DOS_HEADER{pad:$1, pud:$2, ped:$3, pyd:$4, e_lfanew:$5}","insertTextFormat":2},{"label":"C.IMAGE_OPTIONAL_HEADER","kind":22,"detail":"struct C.IMAGE_OPTIONAL_HEADER","insertText":"C.IMAGE_OPTIONAL_HEADER{Magic:$1, pad:$2, SizeOfImage:$3}","insertTextFormat":2},{"label":"C.IMAGE_NT_HEADERS","kind":22,"detail":"struct C.IMAGE_NT_HEADERS","insertText":"C.IMAGE_NT_HEADERS{pad:$1, OptionalHeader:$2}","insertTextFormat":2},{"label":"pattern_scan","kind":3,"detail":"pub fn pattern_scan(in_module string, with_sig string) ?voidptr","insertText":"pattern_scan($0, $1)","insertTextFormat":2},{"label":"wait_for_module","kind":3,"detail":"pub fn wait_for_module(mut with_modules []string, and_max_timeout int)","insertText":"wait_for_module($0, $1)","insertTextFormat":2},{"label":"Matrix","kind":22,"detail":"pub struct Matrix","insertText":"Matrix{m:$1}","insertTextFormat":2},{"label":"Vec2","kind":22,"detail":"pub struct Vec2","insertText":"Vec2{x:$1, y:$2}","insertTextFormat":2},{"label":"op_vec","kind":3,"detail":"pub fn op_vec(with_op_val f32) Vec3","insertText":"op_vec($0)","insertTextFormat":2},{"label":"new_angle","kind":3,"detail":"pub fn new_angle(x T, y T, z T) Angle","insertText":"new_angle($0, $1, $2)","insertTextFormat":2},{"label":"new_vec3","kind":3,"detail":"pub fn new_vec3(x T, y T, z T) Vec3","insertText":"new_vec3($0, $1, $2)","insertTextFormat":2},{"label":"new_vec2","kind":3,"detail":"pub fn new_vec2(x T, y T) Vec2","insertText":"new_vec2($0, $1)","insertTextFormat":2},{"label":"HResult","kind":22,"detail":"pub struct HResult","insertText":"HResult{val:$1}","insertTextFormat":2},{"label":"h_res","kind":3,"detail":"pub fn h_res(with_hres int) HResult","insertText":"h_res($0)","insertTextFormat":2},{"label":"get_key","kind":3,"detail":"fn get_key(with_vk_code int, is_toggle bool) bool","insertText":"get_key($0, $1)","insertTextFormat":2},{"label":"str_align","kind":3,"detail":"pub fn str_align(with_og_text string, with_spaces_count i32, and_final_sep string) string","insertText":"str_align($0, $1, $2)","insertTextFormat":2},{"label":"load_unload_console","kind":3,"detail":"pub fn load_unload_console(with_switch bool, and_file ?)","insertText":"load_unload_console($0, $1)","insertTextFormat":2},{"label":"Color","kind":22,"detail":"pub struct Color","insertText":"Color{, rgba:$1}","insertTextFormat":2},{"label":"msg_c","kind":3,"detail":"fn msg_c(with_text string, and_color Color)","insertText":"msg_c($0, $1)","insertTextFormat":2},{"label":"pront","kind":3,"detail":"pub fn pront(with_text string)","insertText":"pront($0)","insertTextFormat":2},{"label":"ColorRgbF","kind":22,"detail":"pub struct ColorRgbF","insertText":"ColorRgbF{r:$1, g:$2, b:$3}","insertTextFormat":2},{"label":"ColorRgbaF","kind":22,"detail":"pub struct ColorRgbaF","insertText":"ColorRgbaF{r:$1, g:$2, b:$3, a:$4}","insertTextFormat":2},{"label":"ColorRgba","kind":22,"detail":"struct ColorRgba","insertText":"ColorRgba{r:$1, g:$2, b:$3, a:$4}","insertTextFormat":2},{"label":"color_rbga","kind":3,"detail":"pub fn color_rbga(r_ T, g_ T, b_ T, a_ T) Color","insertText":"color_rbga($0, $1, $2, $3)","insertTextFormat":2},{"label":"color_f_rbga","kind":3,"detail":"pub fn color_f_rbga(r_ T, g_ T, b_ T, a_ T) Color","insertText":"color_f_rbga($0, $1, $2, $3)","insertTextFormat":2},{"label":"color_hex","kind":3,"detail":"pub fn color_hex(withHex u32) Color","insertText":"color_hex($0)","insertTextFormat":2},{"label":"errors","kind":6,"detail":"const errors","insertText":"errors","insertTextFormat":1},{"label":"error_critical","kind":3,"detail":"pub fn error_critical(with_error string, and_error_complement string)","insertText":"error_critical($0, $1)","insertTextFormat":2},{"label":"client_error","kind":3,"detail":"pub fn client_error(with_error string)","insertText":"client_error($0)","insertTextFormat":2},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664318992}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664318992}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664318992}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664318992}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664318992}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664318992}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664318992}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664318993}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664318993}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664318993}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664318993}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664318993}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664318993}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664318993}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664318993}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664319005}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[{"range":{"start":{"line":10,"character":8},"end":{"line":10,"character":8}},"severity":1,"code":"","source":"","message":"unknown function: C.AllocConsole","relatedInformation":[]},{"range":{"start":{"line":14,"character":7},"end":{"line":14,"character":7}},"severity":1,"code":"","source":"","message":"unknown function: C.freopen_s","relatedInformation":[]},{"range":{"start":{"line":31,"character":28},"end":{"line":31,"character":28}},"severity":1,"code":"","source":"","message":"unknown function: C.GetProcAddress","relatedInformation":[]}]}},"timestamp":1664319005}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664319025}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[{"range":{"start":{"line":10,"character":8},"end":{"line":10,"character":8}},"severity":1,"code":"","source":"","message":"unknown function: C.AllocConsole","relatedInformation":[]},{"range":{"start":{"line":14,"character":7},"end":{"line":14,"character":7}},"severity":1,"code":"","source":"","message":"unknown function: C.freopen_s","relatedInformation":[]},{"range":{"start":{"line":31,"character":28},"end":{"line":31,"character":28}},"severity":1,"code":"","source":"","message":"unknown function: C.GetProcAddress","relatedInformation":[]}]}},"timestamp":1664319025}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_material_system.v","diagnostics":[]}},"timestamp":1664319045}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_material_system.v","diagnostics":[]}},"timestamp":1664319045}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_material_system.v","diagnostics":[]}},"timestamp":1664319050}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":23,"method":"textDocument/completion","params":{"position":{"line":9,"character":2},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_material_system.v"},"context":{"triggerKind":1}}},"timestamp":1664319050}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":23,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"CCLientClass","kind":22,"detail":"struct CCLientClass","insertText":"CCLientClass{create_fn:$1, create_event_fn:$2, network_name:$3, recvtable_ptr:$4, next_ptr:$5, class_id:$6}","insertTextFormat":2},{"label":"Entity_t","kind":22,"detail":"struct Entity_t","insertText":"Entity_t{}","insertTextFormat":1},{"label":"IClientUnknown","kind":22,"detail":"struct IClientUnknown","insertText":"IClientUnknown{}","insertTextFormat":1},{"label":"IClientRenderable","kind":22,"detail":"struct IClientRenderable","insertText":"IClientRenderable{}","insertTextFormat":1},{"label":"Weapon_t","kind":22,"detail":"struct Weapon_t","insertText":"Weapon_t{}","insertTextFormat":1},{"label":"Player","kind":22,"detail":"struct Player","insertText":"Player{}","insertTextFormat":1},{"label":"Item","kind":22,"detail":"struct Item","insertText":"Item{}","insertTextFormat":1},{"label":"Viewmodel","kind":22,"detail":"struct Viewmodel","insertText":"Viewmodel{}","insertTextFormat":1},{"label":"contents_solid","kind":6,"detail":"pub const contents_solid int","insertText":"contents_solid","insertTextFormat":1},{"label":"contents_moveable","kind":6,"detail":"pub const contents_moveable int","insertText":"contents_moveable","insertTextFormat":1},{"label":"contents_monsterclip","kind":6,"detail":"pub const contents_monsterclip int","insertText":"contents_monsterclip","insertTextFormat":1},{"label":"contents_window","kind":6,"detail":"pub const contents_window int","insertText":"contents_window","insertTextFormat":1},{"label":"contents_debris","kind":6,"detail":"pub const contents_debris int","insertText":"contents_debris","insertTextFormat":1},{"label":"contents_hitbox","kind":6,"detail":"pub const contents_hitbox int","insertText":"contents_hitbox","insertTextFormat":1},{"label":"contents_grate","kind":6,"detail":"pub const contents_grate int","insertText":"contents_grate","insertTextFormat":1},{"label":"contents_ignore_nodraw_opaque","kind":6,"detail":"pub const contents_ignore_nodraw_opaque int","insertText":"contents_ignore_nodraw_opaque","insertTextFormat":1},{"label":"contents_opaque","kind":6,"detail":"pub const contents_opaque int","insertText":"contents_opaque","insertTextFormat":1},{"label":"mask_shot","kind":6,"detail":"pub const mask_shot","insertText":"mask_shot","insertTextFormat":1},{"label":"mask_opaque","kind":6,"detail":"pub const mask_opaque","insertText":"mask_opaque","insertTextFormat":1},{"label":"mask_visible","kind":6,"detail":"pub const mask_visible","insertText":"mask_visible","insertTextFormat":1},{"label":"CTraceFilter","kind":22,"detail":"pub struct CTraceFilter","insertText":"CTraceFilter{v_table:$1, p_skip:$2}","insertTextFormat":2},{"label":"CSurface","kind":22,"detail":"pub struct CSurface","insertText":"CSurface{name:$1, surface_prop:$2, flags:$3}","insertTextFormat":2},{"label":"CGameTrace","kind":22,"detail":"pub struct CGameTrace","insertText":"CGameTrace{start_pos:$1, end_pos:$2, pad:$3, fraction:$4, contents:$5, disp_flags:$6, all_solid:$7, start_solid:$8, pod:$9, surface:$10, hit_group:$11, pud:$12, hit_entity:$13, hitbox:$14}","insertTextFormat":2},{"label":"Ray","kind":22,"detail":"pub struct Ray","insertText":"Ray{start:$1, pad:$2, delta:$3, pod:$4, is_ray:$5, is_swept:$6}","insertTextFormat":2},{"label":"IEngineTrace","kind":22,"detail":"struct IEngineTrace","insertText":"IEngineTrace{}","insertTextFormat":1},{"label":"CGlobalVarsBase","kind":22,"detail":"struct CGlobalVarsBase","insertText":"CGlobalVarsBase{realtime:$1, framecount:$2, absoluteframetime:$3, absoluteframestarttimestddev:$4, curtime:$5, frametime:$6, max_clients:$7, tickcount:$8, interval_per_tick:$9, interpolation_amount:$10, sim_ticks_this_frame:$11, network_protocol:$12, p_save_data:$13, bclient:$14, bremoteclient:$15, timestamp_networking_base:$16, timestamp_randomize_window:$17}","insertTextFormat":2},{"label":"msg_c","kind":3,"detail":"fn msg_c(with_color Color, and_text string)","insertText":"msg_c($0, $1)","insertTextFormat":2},{"label":"msg","kind":3,"detail":"fn msg(with_text string)","insertText":"msg($0)","insertTextFormat":2},{"label":"ISurface","kind":22,"detail":"struct ISurface","insertText":"ISurface{}","insertTextFormat":1},{"label":"IVModelInfo","kind":22,"detail":"struct IVModelInfo","insertText":"IVModelInfo{}","insertTextFormat":1},{"label":"IEntityList","kind":22,"detail":"struct IEntityList","insertText":"IEntityList{}","insertTextFormat":1},{"label":"IMaterial","kind":22,"detail":"struct IMaterial","insertText":"IMaterial{}","insertTextFormat":1},{"label":"IMaterialSystem","kind":22,"detail":"struct IMaterialSystem","insertText":"IMaterialSystem{}","insertTextFormat":1},{"label":"ICvar","kind":22,"detail":"struct ICvar","insertText":"ICvar{}","insertTextFormat":1},{"label":"CDrawModelInfo","kind":22,"detail":"struct CDrawModelInfo","insertText":"CDrawModelInfo{studio_hdr:$1, hardware_data:$2, decals:$3, skin:$4, body:$5, hitbox_set:$6, renderable:$7}","insertTextFormat":2},{"label":"IStudioRender","kind":22,"detail":"struct IStudioRender","insertText":"IStudioRender{}","insertTextFormat":1},{"label":"WeaponData","kind":22,"detail":"struct WeaponData","insertText":"WeaponData{pad:$1, clean_name:$2, pud:$3, max_clip:$4, pid:$5, name:$6, pod:$7, w_type:$8, pzd:$9, full_auto:$10, phd:$11, damage:$12, armor_ratio:$13, bullets:$14, penetration:$15, pkd:$16, range:$17, range_modifier:$18, pnd:$19, has_silencer:$20}","insertTextFormat":2},{"label":"IWeaponSystem","kind":22,"detail":"struct IWeaponSystem","insertText":"IWeaponSystem{}","insertTextFormat":1},{"label":"PlayerInfo","kind":22,"detail":"pub struct PlayerInfo","insertText":"PlayerInfo{pad:$1, pod:$2, sz_name:$3, user_id:$4, sz_steam_id:$5, pud:$6, steam_id:$7, friends_sz_name:$8, fake_player:$9, hltv:$10, custom_files:$11, files_downloaded:$12}","insertTextFormat":2},{"label":"IVEngineClient","kind":22,"detail":"struct IVEngineClient","insertText":"IVEngineClient{}","insertTextFormat":1},{"label":"IBaseClientDLL","kind":22,"detail":"struct IBaseClientDLL","insertText":"IBaseClientDLL{}","insertTextFormat":1},{"label":"IInputSystem","kind":22,"detail":"struct IInputSystem","insertText":"IInputSystem{}","insertTextFormat":1},{"label":"IVDebugOverlay","kind":22,"detail":"struct IVDebugOverlay","insertText":"IVDebugOverlay{}","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664319050}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_material_system.v","diagnostics":[]}},"timestamp":1664319050}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_material_system.v","diagnostics":[]}},"timestamp":1664319050}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":24,"method":"textDocument/completion","params":{"position":{"line":9,"character":4},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_material_system.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664319050}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":24,"result":[]},"timestamp":1664319050}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_material_system.v","diagnostics":[]}},"timestamp":1664319050}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_material_system.v","diagnostics":[]}},"timestamp":1664319057}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/cdll_int.v","diagnostics":[]}},"timestamp":1664319172}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/cdll_int.v","diagnostics":[]}},"timestamp":1664319172}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/cdll_int.v","diagnostics":[]}},"timestamp":1664319172}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/cdll_int.v","diagnostics":[]}},"timestamp":1664319172}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/global_vars.v","diagnostics":[]}},"timestamp":1664319178}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/global_vars.v","diagnostics":[]}},"timestamp":1664319178}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_cvar.v","diagnostics":[]}},"timestamp":1664319180}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_cvar.v","diagnostics":[]}},"timestamp":1664319180}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_debug_overlay.v","diagnostics":[]}},"timestamp":1664319182}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_debug_overlay.v","diagnostics":[]}},"timestamp":1664319182}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_entity_list.v","diagnostics":[]}},"timestamp":1664319183}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_entity_list.v","diagnostics":[]}},"timestamp":1664319183}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_model_info.v","diagnostics":[]}},"timestamp":1664319185}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_model_info.v","diagnostics":[]}},"timestamp":1664319185}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_panorama_engine.v","diagnostics":[]}},"timestamp":1664319187}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_panorama_engine.v","diagnostics":[]}},"timestamp":1664319187}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_studio_renderer.v","diagnostics":[]}},"timestamp":1664319188}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_studio_renderer.v","diagnostics":[]}},"timestamp":1664319188}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":25,"method":"textDocument/completion","params":{"position":{"line":4,"character":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_studio_renderer.v"},"context":{"triggerKind":1}}},"timestamp":1664319192}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":25,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"CCLientClass","kind":22,"detail":"struct CCLientClass","insertText":"CCLientClass{create_fn:$1, create_event_fn:$2, network_name:$3, recvtable_ptr:$4, next_ptr:$5, class_id:$6}","insertTextFormat":2},{"label":"Entity_t","kind":22,"detail":"struct Entity_t","insertText":"Entity_t{}","insertTextFormat":1},{"label":"IClientUnknown","kind":22,"detail":"struct IClientUnknown","insertText":"IClientUnknown{}","insertTextFormat":1},{"label":"IClientRenderable","kind":22,"detail":"struct IClientRenderable","insertText":"IClientRenderable{}","insertTextFormat":1},{"label":"Weapon_t","kind":22,"detail":"struct Weapon_t","insertText":"Weapon_t{}","insertTextFormat":1},{"label":"Player","kind":22,"detail":"struct Player","insertText":"Player{}","insertTextFormat":1},{"label":"Item","kind":22,"detail":"struct Item","insertText":"Item{}","insertTextFormat":1},{"label":"Viewmodel","kind":22,"detail":"struct Viewmodel","insertText":"Viewmodel{}","insertTextFormat":1},{"label":"contents_solid","kind":6,"detail":"pub const contents_solid int","insertText":"contents_solid","insertTextFormat":1},{"label":"contents_moveable","kind":6,"detail":"pub const contents_moveable int","insertText":"contents_moveable","insertTextFormat":1},{"label":"contents_monsterclip","kind":6,"detail":"pub const contents_monsterclip int","insertText":"contents_monsterclip","insertTextFormat":1},{"label":"contents_window","kind":6,"detail":"pub const contents_window int","insertText":"contents_window","insertTextFormat":1},{"label":"contents_debris","kind":6,"detail":"pub const contents_debris int","insertText":"contents_debris","insertTextFormat":1},{"label":"contents_hitbox","kind":6,"detail":"pub const contents_hitbox int","insertText":"contents_hitbox","insertTextFormat":1},{"label":"contents_grate","kind":6,"detail":"pub const contents_grate int","insertText":"contents_grate","insertTextFormat":1},{"label":"contents_ignore_nodraw_opaque","kind":6,"detail":"pub const contents_ignore_nodraw_opaque int","insertText":"contents_ignore_nodraw_opaque","insertTextFormat":1},{"label":"contents_opaque","kind":6,"detail":"pub const contents_opaque int","insertText":"contents_opaque","insertTextFormat":1},{"label":"mask_shot","kind":6,"detail":"pub const mask_shot","insertText":"mask_shot","insertTextFormat":1},{"label":"mask_opaque","kind":6,"detail":"pub const mask_opaque","insertText":"mask_opaque","insertTextFormat":1},{"label":"mask_visible","kind":6,"detail":"pub const mask_visible","insertText":"mask_visible","insertTextFormat":1},{"label":"CTraceFilter","kind":22,"detail":"pub struct CTraceFilter","insertText":"CTraceFilter{v_table:$1, p_skip:$2}","insertTextFormat":2},{"label":"CSurface","kind":22,"detail":"pub struct CSurface","insertText":"CSurface{name:$1, surface_prop:$2, flags:$3}","insertTextFormat":2},{"label":"CGameTrace","kind":22,"detail":"pub struct CGameTrace","insertText":"CGameTrace{start_pos:$1, end_pos:$2, pad:$3, fraction:$4, contents:$5, disp_flags:$6, all_solid:$7, start_solid:$8, pod:$9, surface:$10, hit_group:$11, pud:$12, hit_entity:$13, hitbox:$14}","insertTextFormat":2},{"label":"Ray","kind":22,"detail":"pub struct Ray","insertText":"Ray{start:$1, pad:$2, delta:$3, pod:$4, is_ray:$5, is_swept:$6}","insertTextFormat":2},{"label":"IEngineTrace","kind":22,"detail":"struct IEngineTrace","insertText":"IEngineTrace{}","insertTextFormat":1},{"label":"CGlobalVarsBase","kind":22,"detail":"struct CGlobalVarsBase","insertText":"CGlobalVarsBase{realtime:$1, framecount:$2, absoluteframetime:$3, absoluteframestarttimestddev:$4, curtime:$5, frametime:$6, max_clients:$7, tickcount:$8, interval_per_tick:$9, interpolation_amount:$10, sim_ticks_this_frame:$11, network_protocol:$12, p_save_data:$13, bclient:$14, bremoteclient:$15, timestamp_networking_base:$16, timestamp_randomize_window:$17}","insertTextFormat":2},{"label":"msg_c","kind":3,"detail":"fn msg_c(with_color Color, and_text string)","insertText":"msg_c($0, $1)","insertTextFormat":2},{"label":"msg","kind":3,"detail":"fn msg(with_text string)","insertText":"msg($0)","insertTextFormat":2},{"label":"ISurface","kind":22,"detail":"struct ISurface","insertText":"ISurface{}","insertTextFormat":1},{"label":"IVModelInfo","kind":22,"detail":"struct IVModelInfo","insertText":"IVModelInfo{}","insertTextFormat":1},{"label":"IEntityList","kind":22,"detail":"struct IEntityList","insertText":"IEntityList{}","insertTextFormat":1},{"label":"IMaterial","kind":22,"detail":"pub struct IMaterial","insertText":"IMaterial{}","insertTextFormat":1},{"label":"IMaterialSystem","kind":22,"detail":"struct IMaterialSystem","insertText":"IMaterialSystem{}","insertTextFormat":1},{"label":"ICvar","kind":22,"detail":"struct ICvar","insertText":"ICvar{}","insertTextFormat":1},{"label":"CDrawModelInfo","kind":22,"detail":"struct CDrawModelInfo","insertText":"CDrawModelInfo{studio_hdr:$1, hardware_data:$2, decals:$3, skin:$4, body:$5, hitbox_set:$6, renderable:$7}","insertTextFormat":2},{"label":"IStudioRender","kind":22,"detail":"struct IStudioRender","insertText":"IStudioRender{}","insertTextFormat":1},{"label":"WeaponData","kind":22,"detail":"struct WeaponData","insertText":"WeaponData{pad:$1, clean_name:$2, pud:$3, max_clip:$4, pid:$5, name:$6, pod:$7, w_type:$8, pzd:$9, full_auto:$10, phd:$11, damage:$12, armor_ratio:$13, bullets:$14, penetration:$15, pkd:$16, range:$17, range_modifier:$18, pnd:$19, has_silencer:$20}","insertTextFormat":2},{"label":"IWeaponSystem","kind":22,"detail":"struct IWeaponSystem","insertText":"IWeaponSystem{}","insertTextFormat":1},{"label":"PlayerInfo","kind":22,"detail":"pub struct PlayerInfo","insertText":"PlayerInfo{pad:$1, pod:$2, sz_name:$3, user_id:$4, sz_steam_id:$5, pud:$6, steam_id:$7, friends_sz_name:$8, fake_player:$9, hltv:$10, custom_files:$11, files_downloaded:$12}","insertTextFormat":2},{"label":"IVEngineClient","kind":22,"detail":"struct IVEngineClient","insertText":"IVEngineClient{}","insertTextFormat":1},{"label":"IBaseClientDLL","kind":22,"detail":"struct IBaseClientDLL","insertText":"IBaseClientDLL{}","insertTextFormat":1},{"label":"IInputSystem","kind":22,"detail":"struct IInputSystem","insertText":"IInputSystem{}","insertTextFormat":1},{"label":"IVDebugOverlay","kind":22,"detail":"struct IVDebugOverlay","insertText":"IVDebugOverlay{}","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664319192}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_studio_renderer.v","diagnostics":[]}},"timestamp":1664319192}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_studio_renderer.v","diagnostics":[]}},"timestamp":1664319192}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_studio_renderer.v","diagnostics":[]}},"timestamp":1664319192}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":26,"method":"textDocument/completion","params":{"position":{"line":4,"character":4},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_studio_renderer.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664319192}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":26,"result":[]},"timestamp":1664319192}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_studio_renderer.v","diagnostics":[]}},"timestamp":1664319192}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_studio_renderer.v","diagnostics":[]}},"timestamp":1664319193}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/entities.v","diagnostics":[]}},"timestamp":1664319231}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/entities.v","diagnostics":[]}},"timestamp":1664319231}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":27,"method":"textDocument/completion","params":{"position":{"line":231,"character":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/entities.v"},"context":{"triggerKind":1}}},"timestamp":1664319249}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":27,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"CCLientClass","kind":22,"detail":"struct CCLientClass","insertText":"CCLientClass{create_fn:$1, create_event_fn:$2, network_name:$3, recvtable_ptr:$4, next_ptr:$5, class_id:$6}","insertTextFormat":2},{"label":"Entity_t","kind":22,"detail":"struct Entity_t","insertText":"Entity_t{}","insertTextFormat":1},{"label":"IClientUnknown","kind":22,"detail":"struct IClientUnknown","insertText":"IClientUnknown{}","insertTextFormat":1},{"label":"IClientRenderable","kind":22,"detail":"struct IClientRenderable","insertText":"IClientRenderable{}","insertTextFormat":1},{"label":"Weapon_t","kind":22,"detail":"struct Weapon_t","insertText":"Weapon_t{}","insertTextFormat":1},{"label":"Player","kind":22,"detail":"struct Player","insertText":"Player{}","insertTextFormat":1},{"label":"Item","kind":22,"detail":"struct Item","insertText":"Item{}","insertTextFormat":1},{"label":"Viewmodel","kind":22,"detail":"struct Viewmodel","insertText":"Viewmodel{}","insertTextFormat":1},{"label":"contents_solid","kind":6,"detail":"pub const contents_solid int","insertText":"contents_solid","insertTextFormat":1},{"label":"contents_moveable","kind":6,"detail":"pub const contents_moveable int","insertText":"contents_moveable","insertTextFormat":1},{"label":"contents_monsterclip","kind":6,"detail":"pub const contents_monsterclip int","insertText":"contents_monsterclip","insertTextFormat":1},{"label":"contents_window","kind":6,"detail":"pub const contents_window int","insertText":"contents_window","insertTextFormat":1},{"label":"contents_debris","kind":6,"detail":"pub const contents_debris int","insertText":"contents_debris","insertTextFormat":1},{"label":"contents_hitbox","kind":6,"detail":"pub const contents_hitbox int","insertText":"contents_hitbox","insertTextFormat":1},{"label":"contents_grate","kind":6,"detail":"pub const contents_grate int","insertText":"contents_grate","insertTextFormat":1},{"label":"contents_ignore_nodraw_opaque","kind":6,"detail":"pub const contents_ignore_nodraw_opaque int","insertText":"contents_ignore_nodraw_opaque","insertTextFormat":1},{"label":"contents_opaque","kind":6,"detail":"pub const contents_opaque int","insertText":"contents_opaque","insertTextFormat":1},{"label":"mask_shot","kind":6,"detail":"pub const mask_shot","insertText":"mask_shot","insertTextFormat":1},{"label":"mask_opaque","kind":6,"detail":"pub const mask_opaque","insertText":"mask_opaque","insertTextFormat":1},{"label":"mask_visible","kind":6,"detail":"pub const mask_visible","insertText":"mask_visible","insertTextFormat":1},{"label":"CTraceFilter","kind":22,"detail":"pub struct CTraceFilter","insertText":"CTraceFilter{v_table:$1, p_skip:$2}","insertTextFormat":2},{"label":"CSurface","kind":22,"detail":"pub struct CSurface","insertText":"CSurface{name:$1, surface_prop:$2, flags:$3}","insertTextFormat":2},{"label":"CGameTrace","kind":22,"detail":"pub struct CGameTrace","insertText":"CGameTrace{start_pos:$1, end_pos:$2, pad:$3, fraction:$4, contents:$5, disp_flags:$6, all_solid:$7, start_solid:$8, pod:$9, surface:$10, hit_group:$11, pud:$12, hit_entity:$13, hitbox:$14}","insertTextFormat":2},{"label":"Ray","kind":22,"detail":"pub struct Ray","insertText":"Ray{start:$1, pad:$2, delta:$3, pod:$4, is_ray:$5, is_swept:$6}","insertTextFormat":2},{"label":"IEngineTrace","kind":22,"detail":"struct IEngineTrace","insertText":"IEngineTrace{}","insertTextFormat":1},{"label":"CGlobalVarsBase","kind":22,"detail":"struct CGlobalVarsBase","insertText":"CGlobalVarsBase{realtime:$1, framecount:$2, absoluteframetime:$3, absoluteframestarttimestddev:$4, curtime:$5, frametime:$6, max_clients:$7, tickcount:$8, interval_per_tick:$9, interpolation_amount:$10, sim_ticks_this_frame:$11, network_protocol:$12, p_save_data:$13, bclient:$14, bremoteclient:$15, timestamp_networking_base:$16, timestamp_randomize_window:$17}","insertTextFormat":2},{"label":"msg_c","kind":3,"detail":"fn msg_c(with_color Color, and_text string)","insertText":"msg_c($0, $1)","insertTextFormat":2},{"label":"msg","kind":3,"detail":"fn msg(with_text string)","insertText":"msg($0)","insertTextFormat":2},{"label":"ISurface","kind":22,"detail":"struct ISurface","insertText":"ISurface{}","insertTextFormat":1},{"label":"IVModelInfo","kind":22,"detail":"struct IVModelInfo","insertText":"IVModelInfo{}","insertTextFormat":1},{"label":"IEntityList","kind":22,"detail":"struct IEntityList","insertText":"IEntityList{}","insertTextFormat":1},{"label":"IMaterial","kind":22,"detail":"pub struct IMaterial","insertText":"IMaterial{}","insertTextFormat":1},{"label":"IMaterialSystem","kind":22,"detail":"struct IMaterialSystem","insertText":"IMaterialSystem{}","insertTextFormat":1},{"label":"ICvar","kind":22,"detail":"struct ICvar","insertText":"ICvar{}","insertTextFormat":1},{"label":"CDrawModelInfo","kind":22,"detail":"pub struct CDrawModelInfo","insertText":"CDrawModelInfo{studio_hdr:$1, hardware_data:$2, decals:$3, skin:$4, body:$5, hitbox_set:$6, renderable:$7}","insertTextFormat":2},{"label":"IStudioRender","kind":22,"detail":"struct IStudioRender","insertText":"IStudioRender{}","insertTextFormat":1},{"label":"WeaponData","kind":22,"detail":"struct WeaponData","insertText":"WeaponData{pad:$1, clean_name:$2, pud:$3, max_clip:$4, pid:$5, name:$6, pod:$7, w_type:$8, pzd:$9, full_auto:$10, phd:$11, damage:$12, armor_ratio:$13, bullets:$14, penetration:$15, pkd:$16, range:$17, range_modifier:$18, pnd:$19, has_silencer:$20}","insertTextFormat":2},{"label":"IWeaponSystem","kind":22,"detail":"struct IWeaponSystem","insertText":"IWeaponSystem{}","insertTextFormat":1},{"label":"PlayerInfo","kind":22,"detail":"pub struct PlayerInfo","insertText":"PlayerInfo{pad:$1, pod:$2, sz_name:$3, user_id:$4, sz_steam_id:$5, pud:$6, steam_id:$7, friends_sz_name:$8, fake_player:$9, hltv:$10, custom_files:$11, files_downloaded:$12}","insertTextFormat":2},{"label":"IVEngineClient","kind":22,"detail":"struct IVEngineClient","insertText":"IVEngineClient{}","insertTextFormat":1},{"label":"IBaseClientDLL","kind":22,"detail":"struct IBaseClientDLL","insertText":"IBaseClientDLL{}","insertTextFormat":1},{"label":"IInputSystem","kind":22,"detail":"struct IInputSystem","insertText":"IInputSystem{}","insertTextFormat":1},{"label":"IVDebugOverlay","kind":22,"detail":"struct IVDebugOverlay","insertText":"IVDebugOverlay{}","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664319249}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/entities.v","diagnostics":[]}},"timestamp":1664319249}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/entities.v","diagnostics":[]}},"timestamp":1664319250}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/entities.v","diagnostics":[]}},"timestamp":1664319250}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":28,"method":"textDocument/completion","params":{"position":{"line":231,"character":4},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/entities.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664319250}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":28,"result":[]},"timestamp":1664319250}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/entities.v","diagnostics":[]}},"timestamp":1664319250}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/entities.v","diagnostics":[]}},"timestamp":1664319252}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":29,"method":"textDocument/completion","params":{"position":{"line":396,"character":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/entities.v"},"context":{"triggerKind":1}}},"timestamp":1664319494}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":29,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"CCLientClass","kind":22,"detail":"struct CCLientClass","insertText":"CCLientClass{create_fn:$1, create_event_fn:$2, network_name:$3, recvtable_ptr:$4, next_ptr:$5, class_id:$6}","insertTextFormat":2},{"label":"Entity_t","kind":22,"detail":"struct Entity_t","insertText":"Entity_t{}","insertTextFormat":1},{"label":"IClientUnknown","kind":22,"detail":"struct IClientUnknown","insertText":"IClientUnknown{}","insertTextFormat":1},{"label":"IClientRenderable","kind":22,"detail":"struct IClientRenderable","insertText":"IClientRenderable{}","insertTextFormat":1},{"label":"Weapon_t","kind":22,"detail":"struct Weapon_t","insertText":"Weapon_t{}","insertTextFormat":1},{"label":"Player","kind":22,"detail":"pub struct Player","insertText":"Player{}","insertTextFormat":1},{"label":"Item","kind":22,"detail":"struct Item","insertText":"Item{}","insertTextFormat":1},{"label":"Viewmodel","kind":22,"detail":"struct Viewmodel","insertText":"Viewmodel{}","insertTextFormat":1},{"label":"contents_solid","kind":6,"detail":"pub const contents_solid int","insertText":"contents_solid","insertTextFormat":1},{"label":"contents_moveable","kind":6,"detail":"pub const contents_moveable int","insertText":"contents_moveable","insertTextFormat":1},{"label":"contents_monsterclip","kind":6,"detail":"pub const contents_monsterclip int","insertText":"contents_monsterclip","insertTextFormat":1},{"label":"contents_window","kind":6,"detail":"pub const contents_window int","insertText":"contents_window","insertTextFormat":1},{"label":"contents_debris","kind":6,"detail":"pub const contents_debris int","insertText":"contents_debris","insertTextFormat":1},{"label":"contents_hitbox","kind":6,"detail":"pub const contents_hitbox int","insertText":"contents_hitbox","insertTextFormat":1},{"label":"contents_grate","kind":6,"detail":"pub const contents_grate int","insertText":"contents_grate","insertTextFormat":1},{"label":"contents_ignore_nodraw_opaque","kind":6,"detail":"pub const contents_ignore_nodraw_opaque int","insertText":"contents_ignore_nodraw_opaque","insertTextFormat":1},{"label":"contents_opaque","kind":6,"detail":"pub const contents_opaque int","insertText":"contents_opaque","insertTextFormat":1},{"label":"mask_shot","kind":6,"detail":"pub const mask_shot","insertText":"mask_shot","insertTextFormat":1},{"label":"mask_opaque","kind":6,"detail":"pub const mask_opaque","insertText":"mask_opaque","insertTextFormat":1},{"label":"mask_visible","kind":6,"detail":"pub const mask_visible","insertText":"mask_visible","insertTextFormat":1},{"label":"CTraceFilter","kind":22,"detail":"pub struct CTraceFilter","insertText":"CTraceFilter{v_table:$1, p_skip:$2}","insertTextFormat":2},{"label":"CSurface","kind":22,"detail":"pub struct CSurface","insertText":"CSurface{name:$1, surface_prop:$2, flags:$3}","insertTextFormat":2},{"label":"CGameTrace","kind":22,"detail":"pub struct CGameTrace","insertText":"CGameTrace{start_pos:$1, end_pos:$2, pad:$3, fraction:$4, contents:$5, disp_flags:$6, all_solid:$7, start_solid:$8, pod:$9, surface:$10, hit_group:$11, pud:$12, hit_entity:$13, hitbox:$14}","insertTextFormat":2},{"label":"Ray","kind":22,"detail":"pub struct Ray","insertText":"Ray{start:$1, pad:$2, delta:$3, pod:$4, is_ray:$5, is_swept:$6}","insertTextFormat":2},{"label":"IEngineTrace","kind":22,"detail":"struct IEngineTrace","insertText":"IEngineTrace{}","insertTextFormat":1},{"label":"CGlobalVarsBase","kind":22,"detail":"struct CGlobalVarsBase","insertText":"CGlobalVarsBase{realtime:$1, framecount:$2, absoluteframetime:$3, absoluteframestarttimestddev:$4, curtime:$5, frametime:$6, max_clients:$7, tickcount:$8, interval_per_tick:$9, interpolation_amount:$10, sim_ticks_this_frame:$11, network_protocol:$12, p_save_data:$13, bclient:$14, bremoteclient:$15, timestamp_networking_base:$16, timestamp_randomize_window:$17}","insertTextFormat":2},{"label":"msg_c","kind":3,"detail":"fn msg_c(with_color Color, and_text string)","insertText":"msg_c($0, $1)","insertTextFormat":2},{"label":"msg","kind":3,"detail":"fn msg(with_text string)","insertText":"msg($0)","insertTextFormat":2},{"label":"ISurface","kind":22,"detail":"struct ISurface","insertText":"ISurface{}","insertTextFormat":1},{"label":"IVModelInfo","kind":22,"detail":"struct IVModelInfo","insertText":"IVModelInfo{}","insertTextFormat":1},{"label":"IEntityList","kind":22,"detail":"struct IEntityList","insertText":"IEntityList{}","insertTextFormat":1},{"label":"IMaterial","kind":22,"detail":"pub struct IMaterial","insertText":"IMaterial{}","insertTextFormat":1},{"label":"IMaterialSystem","kind":22,"detail":"struct IMaterialSystem","insertText":"IMaterialSystem{}","insertTextFormat":1},{"label":"ICvar","kind":22,"detail":"struct ICvar","insertText":"ICvar{}","insertTextFormat":1},{"label":"CDrawModelInfo","kind":22,"detail":"pub struct CDrawModelInfo","insertText":"CDrawModelInfo{studio_hdr:$1, hardware_data:$2, decals:$3, skin:$4, body:$5, hitbox_set:$6, renderable:$7}","insertTextFormat":2},{"label":"IStudioRender","kind":22,"detail":"struct IStudioRender","insertText":"IStudioRender{}","insertTextFormat":1},{"label":"WeaponData","kind":22,"detail":"struct WeaponData","insertText":"WeaponData{pad:$1, clean_name:$2, pud:$3, max_clip:$4, pid:$5, name:$6, pod:$7, w_type:$8, pzd:$9, full_auto:$10, phd:$11, damage:$12, armor_ratio:$13, bullets:$14, penetration:$15, pkd:$16, range:$17, range_modifier:$18, pnd:$19, has_silencer:$20}","insertTextFormat":2},{"label":"IWeaponSystem","kind":22,"detail":"struct IWeaponSystem","insertText":"IWeaponSystem{}","insertTextFormat":1},{"label":"PlayerInfo","kind":22,"detail":"pub struct PlayerInfo","insertText":"PlayerInfo{pad:$1, pod:$2, sz_name:$3, user_id:$4, sz_steam_id:$5, pud:$6, steam_id:$7, friends_sz_name:$8, fake_player:$9, hltv:$10, custom_files:$11, files_downloaded:$12}","insertTextFormat":2},{"label":"IVEngineClient","kind":22,"detail":"struct IVEngineClient","insertText":"IVEngineClient{}","insertTextFormat":1},{"label":"IBaseClientDLL","kind":22,"detail":"struct IBaseClientDLL","insertText":"IBaseClientDLL{}","insertTextFormat":1},{"label":"IInputSystem","kind":22,"detail":"struct IInputSystem","insertText":"IInputSystem{}","insertTextFormat":1},{"label":"IVDebugOverlay","kind":22,"detail":"struct IVDebugOverlay","insertText":"IVDebugOverlay{}","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664319494}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/entities.v","diagnostics":[]}},"timestamp":1664319494}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/entities.v","diagnostics":[]}},"timestamp":1664319494}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/entities.v","diagnostics":[]}},"timestamp":1664319494}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/entities.v","diagnostics":[]}},"timestamp":1664319494}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/entities.v","diagnostics":[]}},"timestamp":1664319495}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/entities.v","diagnostics":[]}},"timestamp":1664319495}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/entities.v","diagnostics":[]}},"timestamp":1664319495}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/entities.v","diagnostics":[]}},"timestamp":1664319495}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/entities.v","diagnostics":[]}},"timestamp":1664319495}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/entities.v","diagnostics":[]}},"timestamp":1664319496}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":30,"method":"textDocument/completion","params":{"position":{"line":396,"character":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/entities.v"},"context":{"triggerKind":1}}},"timestamp":1664319496}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":30,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"CCLientClass","kind":22,"detail":"struct CCLientClass","insertText":"CCLientClass{create_fn:$1, create_event_fn:$2, network_name:$3, recvtable_ptr:$4, next_ptr:$5, class_id:$6}","insertTextFormat":2},{"label":"Entity_t","kind":22,"detail":"struct Entity_t","insertText":"Entity_t{}","insertTextFormat":1},{"label":"IClientUnknown","kind":22,"detail":"struct IClientUnknown","insertText":"IClientUnknown{}","insertTextFormat":1},{"label":"IClientRenderable","kind":22,"detail":"struct IClientRenderable","insertText":"IClientRenderable{}","insertTextFormat":1},{"label":"Weapon_t","kind":22,"detail":"struct Weapon_t","insertText":"Weapon_t{}","insertTextFormat":1},{"label":"Player","kind":22,"detail":"pub struct Player","insertText":"Player{}","insertTextFormat":1},{"label":"Item","kind":22,"detail":"struct Item","insertText":"Item{}","insertTextFormat":1},{"label":"Viewmodel","kind":22,"detail":"struct Viewmodel","insertText":"Viewmodel{}","insertTextFormat":1},{"label":"contents_solid","kind":6,"detail":"pub const contents_solid int","insertText":"contents_solid","insertTextFormat":1},{"label":"contents_moveable","kind":6,"detail":"pub const contents_moveable int","insertText":"contents_moveable","insertTextFormat":1},{"label":"contents_monsterclip","kind":6,"detail":"pub const contents_monsterclip int","insertText":"contents_monsterclip","insertTextFormat":1},{"label":"contents_window","kind":6,"detail":"pub const contents_window int","insertText":"contents_window","insertTextFormat":1},{"label":"contents_debris","kind":6,"detail":"pub const contents_debris int","insertText":"contents_debris","insertTextFormat":1},{"label":"contents_hitbox","kind":6,"detail":"pub const contents_hitbox int","insertText":"contents_hitbox","insertTextFormat":1},{"label":"contents_grate","kind":6,"detail":"pub const contents_grate int","insertText":"contents_grate","insertTextFormat":1},{"label":"contents_ignore_nodraw_opaque","kind":6,"detail":"pub const contents_ignore_nodraw_opaque int","insertText":"contents_ignore_nodraw_opaque","insertTextFormat":1},{"label":"contents_opaque","kind":6,"detail":"pub const contents_opaque int","insertText":"contents_opaque","insertTextFormat":1},{"label":"mask_shot","kind":6,"detail":"pub const mask_shot","insertText":"mask_shot","insertTextFormat":1},{"label":"mask_opaque","kind":6,"detail":"pub const mask_opaque","insertText":"mask_opaque","insertTextFormat":1},{"label":"mask_visible","kind":6,"detail":"pub const mask_visible","insertText":"mask_visible","insertTextFormat":1},{"label":"CTraceFilter","kind":22,"detail":"pub struct CTraceFilter","insertText":"CTraceFilter{v_table:$1, p_skip:$2}","insertTextFormat":2},{"label":"CSurface","kind":22,"detail":"pub struct CSurface","insertText":"CSurface{name:$1, surface_prop:$2, flags:$3}","insertTextFormat":2},{"label":"CGameTrace","kind":22,"detail":"pub struct CGameTrace","insertText":"CGameTrace{start_pos:$1, end_pos:$2, pad:$3, fraction:$4, contents:$5, disp_flags:$6, all_solid:$7, start_solid:$8, pod:$9, surface:$10, hit_group:$11, pud:$12, hit_entity:$13, hitbox:$14}","insertTextFormat":2},{"label":"Ray","kind":22,"detail":"pub struct Ray","insertText":"Ray{start:$1, pad:$2, delta:$3, pod:$4, is_ray:$5, is_swept:$6}","insertTextFormat":2},{"label":"IEngineTrace","kind":22,"detail":"struct IEngineTrace","insertText":"IEngineTrace{}","insertTextFormat":1},{"label":"CGlobalVarsBase","kind":22,"detail":"struct CGlobalVarsBase","insertText":"CGlobalVarsBase{realtime:$1, framecount:$2, absoluteframetime:$3, absoluteframestarttimestddev:$4, curtime:$5, frametime:$6, max_clients:$7, tickcount:$8, interval_per_tick:$9, interpolation_amount:$10, sim_ticks_this_frame:$11, network_protocol:$12, p_save_data:$13, bclient:$14, bremoteclient:$15, timestamp_networking_base:$16, timestamp_randomize_window:$17}","insertTextFormat":2},{"label":"msg_c","kind":3,"detail":"fn msg_c(with_color Color, and_text string)","insertText":"msg_c($0, $1)","insertTextFormat":2},{"label":"msg","kind":3,"detail":"fn msg(with_text string)","insertText":"msg($0)","insertTextFormat":2},{"label":"ISurface","kind":22,"detail":"struct ISurface","insertText":"ISurface{}","insertTextFormat":1},{"label":"IVModelInfo","kind":22,"detail":"struct IVModelInfo","insertText":"IVModelInfo{}","insertTextFormat":1},{"label":"IEntityList","kind":22,"detail":"struct IEntityList","insertText":"IEntityList{}","insertTextFormat":1},{"label":"IMaterial","kind":22,"detail":"pub struct IMaterial","insertText":"IMaterial{}","insertTextFormat":1},{"label":"IMaterialSystem","kind":22,"detail":"struct IMaterialSystem","insertText":"IMaterialSystem{}","insertTextFormat":1},{"label":"ICvar","kind":22,"detail":"struct ICvar","insertText":"ICvar{}","insertTextFormat":1},{"label":"CDrawModelInfo","kind":22,"detail":"pub struct CDrawModelInfo","insertText":"CDrawModelInfo{studio_hdr:$1, hardware_data:$2, decals:$3, skin:$4, body:$5, hitbox_set:$6, renderable:$7}","insertTextFormat":2},{"label":"IStudioRender","kind":22,"detail":"struct IStudioRender","insertText":"IStudioRender{}","insertTextFormat":1},{"label":"WeaponData","kind":22,"detail":"struct WeaponData","insertText":"WeaponData{pad:$1, clean_name:$2, pud:$3, max_clip:$4, pid:$5, name:$6, pod:$7, w_type:$8, pzd:$9, full_auto:$10, phd:$11, damage:$12, armor_ratio:$13, bullets:$14, penetration:$15, pkd:$16, range:$17, range_modifier:$18, pnd:$19, has_silencer:$20}","insertTextFormat":2},{"label":"IWeaponSystem","kind":22,"detail":"struct IWeaponSystem","insertText":"IWeaponSystem{}","insertTextFormat":1},{"label":"PlayerInfo","kind":22,"detail":"pub struct PlayerInfo","insertText":"PlayerInfo{pad:$1, pod:$2, sz_name:$3, user_id:$4, sz_steam_id:$5, pud:$6, steam_id:$7, friends_sz_name:$8, fake_player:$9, hltv:$10, custom_files:$11, files_downloaded:$12}","insertTextFormat":2},{"label":"IVEngineClient","kind":22,"detail":"struct IVEngineClient","insertText":"IVEngineClient{}","insertTextFormat":1},{"label":"IBaseClientDLL","kind":22,"detail":"struct IBaseClientDLL","insertText":"IBaseClientDLL{}","insertTextFormat":1},{"label":"IInputSystem","kind":22,"detail":"struct IInputSystem","insertText":"IInputSystem{}","insertTextFormat":1},{"label":"IVDebugOverlay","kind":22,"detail":"struct IVDebugOverlay","insertText":"IVDebugOverlay{}","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664319496}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/entities.v","diagnostics":[]}},"timestamp":1664319496}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/entities.v","diagnostics":[]}},"timestamp":1664319496}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":31,"method":"textDocument/completion","params":{"position":{"line":396,"character":4},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/entities.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664319496}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":31,"result":[]},"timestamp":1664319496}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/entities.v","diagnostics":[]}},"timestamp":1664319496}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":32,"method":"textDocument/completion","params":{"position":{"line":185,"character":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/entities.v"},"context":{"triggerKind":1}}},"timestamp":1664319507}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":32,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"CCLientClass","kind":22,"detail":"struct CCLientClass","insertText":"CCLientClass{create_fn:$1, create_event_fn:$2, network_name:$3, recvtable_ptr:$4, next_ptr:$5, class_id:$6}","insertTextFormat":2},{"label":"Entity_t","kind":22,"detail":"struct Entity_t","insertText":"Entity_t{}","insertTextFormat":1},{"label":"IClientUnknown","kind":22,"detail":"struct IClientUnknown","insertText":"IClientUnknown{}","insertTextFormat":1},{"label":"IClientRenderable","kind":22,"detail":"struct IClientRenderable","insertText":"IClientRenderable{}","insertTextFormat":1},{"label":"Weapon_t","kind":22,"detail":"struct Weapon_t","insertText":"Weapon_t{}","insertTextFormat":1},{"label":"Player","kind":22,"detail":"pub struct Player","insertText":"Player{}","insertTextFormat":1},{"label":"Item","kind":22,"detail":"struct Item","insertText":"Item{}","insertTextFormat":1},{"label":"Viewmodel","kind":22,"detail":"pub struct Viewmodel","insertText":"Viewmodel{}","insertTextFormat":1},{"label":"contents_solid","kind":6,"detail":"pub const contents_solid int","insertText":"contents_solid","insertTextFormat":1},{"label":"contents_moveable","kind":6,"detail":"pub const contents_moveable int","insertText":"contents_moveable","insertTextFormat":1},{"label":"contents_monsterclip","kind":6,"detail":"pub const contents_monsterclip int","insertText":"contents_monsterclip","insertTextFormat":1},{"label":"contents_window","kind":6,"detail":"pub const contents_window int","insertText":"contents_window","insertTextFormat":1},{"label":"contents_debris","kind":6,"detail":"pub const contents_debris int","insertText":"contents_debris","insertTextFormat":1},{"label":"contents_hitbox","kind":6,"detail":"pub const contents_hitbox int","insertText":"contents_hitbox","insertTextFormat":1},{"label":"contents_grate","kind":6,"detail":"pub const contents_grate int","insertText":"contents_grate","insertTextFormat":1},{"label":"contents_ignore_nodraw_opaque","kind":6,"detail":"pub const contents_ignore_nodraw_opaque int","insertText":"contents_ignore_nodraw_opaque","insertTextFormat":1},{"label":"contents_opaque","kind":6,"detail":"pub const contents_opaque int","insertText":"contents_opaque","insertTextFormat":1},{"label":"mask_shot","kind":6,"detail":"pub const mask_shot","insertText":"mask_shot","insertTextFormat":1},{"label":"mask_opaque","kind":6,"detail":"pub const mask_opaque","insertText":"mask_opaque","insertTextFormat":1},{"label":"mask_visible","kind":6,"detail":"pub const mask_visible","insertText":"mask_visible","insertTextFormat":1},{"label":"CTraceFilter","kind":22,"detail":"pub struct CTraceFilter","insertText":"CTraceFilter{v_table:$1, p_skip:$2}","insertTextFormat":2},{"label":"CSurface","kind":22,"detail":"pub struct CSurface","insertText":"CSurface{name:$1, surface_prop:$2, flags:$3}","insertTextFormat":2},{"label":"CGameTrace","kind":22,"detail":"pub struct CGameTrace","insertText":"CGameTrace{start_pos:$1, end_pos:$2, pad:$3, fraction:$4, contents:$5, disp_flags:$6, all_solid:$7, start_solid:$8, pod:$9, surface:$10, hit_group:$11, pud:$12, hit_entity:$13, hitbox:$14}","insertTextFormat":2},{"label":"Ray","kind":22,"detail":"pub struct Ray","insertText":"Ray{start:$1, pad:$2, delta:$3, pod:$4, is_ray:$5, is_swept:$6}","insertTextFormat":2},{"label":"IEngineTrace","kind":22,"detail":"struct IEngineTrace","insertText":"IEngineTrace{}","insertTextFormat":1},{"label":"CGlobalVarsBase","kind":22,"detail":"struct CGlobalVarsBase","insertText":"CGlobalVarsBase{realtime:$1, framecount:$2, absoluteframetime:$3, absoluteframestarttimestddev:$4, curtime:$5, frametime:$6, max_clients:$7, tickcount:$8, interval_per_tick:$9, interpolation_amount:$10, sim_ticks_this_frame:$11, network_protocol:$12, p_save_data:$13, bclient:$14, bremoteclient:$15, timestamp_networking_base:$16, timestamp_randomize_window:$17}","insertTextFormat":2},{"label":"msg_c","kind":3,"detail":"fn msg_c(with_color Color, and_text string)","insertText":"msg_c($0, $1)","insertTextFormat":2},{"label":"msg","kind":3,"detail":"fn msg(with_text string)","insertText":"msg($0)","insertTextFormat":2},{"label":"ISurface","kind":22,"detail":"struct ISurface","insertText":"ISurface{}","insertTextFormat":1},{"label":"IVModelInfo","kind":22,"detail":"struct IVModelInfo","insertText":"IVModelInfo{}","insertTextFormat":1},{"label":"IEntityList","kind":22,"detail":"struct IEntityList","insertText":"IEntityList{}","insertTextFormat":1},{"label":"IMaterial","kind":22,"detail":"pub struct IMaterial","insertText":"IMaterial{}","insertTextFormat":1},{"label":"IMaterialSystem","kind":22,"detail":"struct IMaterialSystem","insertText":"IMaterialSystem{}","insertTextFormat":1},{"label":"ICvar","kind":22,"detail":"struct ICvar","insertText":"ICvar{}","insertTextFormat":1},{"label":"CDrawModelInfo","kind":22,"detail":"pub struct CDrawModelInfo","insertText":"CDrawModelInfo{studio_hdr:$1, hardware_data:$2, decals:$3, skin:$4, body:$5, hitbox_set:$6, renderable:$7}","insertTextFormat":2},{"label":"IStudioRender","kind":22,"detail":"struct IStudioRender","insertText":"IStudioRender{}","insertTextFormat":1},{"label":"WeaponData","kind":22,"detail":"struct WeaponData","insertText":"WeaponData{pad:$1, clean_name:$2, pud:$3, max_clip:$4, pid:$5, name:$6, pod:$7, w_type:$8, pzd:$9, full_auto:$10, phd:$11, damage:$12, armor_ratio:$13, bullets:$14, penetration:$15, pkd:$16, range:$17, range_modifier:$18, pnd:$19, has_silencer:$20}","insertTextFormat":2},{"label":"IWeaponSystem","kind":22,"detail":"struct IWeaponSystem","insertText":"IWeaponSystem{}","insertTextFormat":1},{"label":"PlayerInfo","kind":22,"detail":"pub struct PlayerInfo","insertText":"PlayerInfo{pad:$1, pod:$2, sz_name:$3, user_id:$4, sz_steam_id:$5, pud:$6, steam_id:$7, friends_sz_name:$8, fake_player:$9, hltv:$10, custom_files:$11, files_downloaded:$12}","insertTextFormat":2},{"label":"IVEngineClient","kind":22,"detail":"struct IVEngineClient","insertText":"IVEngineClient{}","insertTextFormat":1},{"label":"IBaseClientDLL","kind":22,"detail":"struct IBaseClientDLL","insertText":"IBaseClientDLL{}","insertTextFormat":1},{"label":"IInputSystem","kind":22,"detail":"struct IInputSystem","insertText":"IInputSystem{}","insertTextFormat":1},{"label":"IVDebugOverlay","kind":22,"detail":"struct IVDebugOverlay","insertText":"IVDebugOverlay{}","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664319507}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/entities.v","diagnostics":[]}},"timestamp":1664319507}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/entities.v","diagnostics":[]}},"timestamp":1664319508}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/entities.v","diagnostics":[]}},"timestamp":1664319508}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":33,"method":"textDocument/completion","params":{"position":{"line":185,"character":4},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/entities.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664319509}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":33,"result":[]},"timestamp":1664319509}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/entities.v","diagnostics":[]}},"timestamp":1664319509}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/entities.v","diagnostics":[]}},"timestamp":1664319511}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":34,"method":"textDocument/completion","params":{"position":{"line":49,"character":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/nuklear/wrapper.v"},"context":{"triggerKind":1}}},"timestamp":1664319557}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":34,"result":[{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"C.nk_context","kind":22,"detail":"struct C.nk_context","insertText":"C.nk_context{}","insertTextFormat":1},{"label":"C.nk_rect","kind":22,"detail":"struct C.nk_rect","insertText":"C.nk_rect{x:$1, y:$2, w:$3, h:$4}","insertTextFormat":2},{"label":"C.nk_vec2","kind":22,"detail":"struct C.nk_vec2","insertText":"C.nk_vec2{x:$1, y:$2}","insertTextFormat":2},{"label":"C.nk_color","kind":22,"detail":"struct C.nk_color","insertText":"C.nk_color{r:$1, g:$2, b:$3, a:$4}","insertTextFormat":2},{"label":"C.nk_colorf","kind":22,"detail":"pub struct C.nk_colorf","insertText":"C.nk_colorf{r:$1, g:$2, b:$3, a:$4}","insertTextFormat":2},{"label":"Nuklear","kind":22,"detail":"pub struct Nuklear","insertText":"Nuklear{nk_ctx:$1}","insertTextFormat":2},{"label":"handle_event","kind":3,"detail":"pub fn handle_event(with_hwnd C.HWND, with_msg u32, with_param u32, and_lparam int) bool","insertText":"handle_event($0, $1, $2, $3)","insertTextFormat":2},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664319557}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/nuklear/wrapper.v","diagnostics":[]}},"timestamp":1664319557}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/nuklear/wrapper.v","diagnostics":[]}},"timestamp":1664319558}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":35,"method":"textDocument/completion","params":{"position":{"line":49,"character":4},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/nuklear/wrapper.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664319558}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":35,"result":[]},"timestamp":1664319558}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/nuklear/wrapper.v","diagnostics":[]}},"timestamp":1664319558}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/nuklear/wrapper.v","diagnostics":[]}},"timestamp":1664319560}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664319661}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664319661}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":36,"method":"textDocument/completion","params":{"position":{"line":31,"character":44},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v"},"context":{"triggerKind":1}}},"timestamp":1664319671}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":36,"result":[{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664319671}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664319671}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664319672}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":37,"method":"textDocument/completion","params":{"position":{"line":31,"character":42},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v"},"context":{"triggerKind":2,"triggerCharacter":"."}}},"timestamp":1664319672}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":37,"result":[]},"timestamp":1664319672}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664319672}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":38,"method":"textDocument/completion","params":{"position":{"line":31,"character":41},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v"},"context":{"triggerKind":1}}},"timestamp":1664319672}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":38,"result":[{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664319672}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664319672}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664319672}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":39,"method":"textDocument/completion","params":{"position":{"line":31,"character":39},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664319673}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":39,"result":[]},"timestamp":1664319673}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664319673}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":40,"method":"textDocument/completion","params":{"position":{"line":31,"character":40},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v"},"context":{"triggerKind":1}}},"timestamp":1664319674}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":40,"result":[{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664319674}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664319674}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664319674}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664319674}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664319674}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664319675}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664319675}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664319675}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664319677}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664319684}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":41,"method":"textDocument/completion","params":{"position":{"line":57,"character":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/entities.v"},"context":{"triggerKind":1}}},"timestamp":1664319699}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":41,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"CCLientClass","kind":22,"detail":"struct CCLientClass","insertText":"CCLientClass{create_fn:$1, create_event_fn:$2, network_name:$3, recvtable_ptr:$4, next_ptr:$5, class_id:$6}","insertTextFormat":2},{"label":"Entity_t","kind":22,"detail":"struct Entity_t","insertText":"Entity_t{}","insertTextFormat":1},{"label":"IClientUnknown","kind":22,"detail":"struct IClientUnknown","insertText":"IClientUnknown{}","insertTextFormat":1},{"label":"IClientRenderable","kind":22,"detail":"struct IClientRenderable","insertText":"IClientRenderable{}","insertTextFormat":1},{"label":"Weapon_t","kind":22,"detail":"pub struct Weapon_t","insertText":"Weapon_t{}","insertTextFormat":1},{"label":"Player","kind":22,"detail":"pub struct Player","insertText":"Player{}","insertTextFormat":1},{"label":"Item","kind":22,"detail":"struct Item","insertText":"Item{}","insertTextFormat":1},{"label":"Viewmodel","kind":22,"detail":"pub struct Viewmodel","insertText":"Viewmodel{}","insertTextFormat":1},{"label":"contents_solid","kind":6,"detail":"pub const contents_solid int","insertText":"contents_solid","insertTextFormat":1},{"label":"contents_moveable","kind":6,"detail":"pub const contents_moveable int","insertText":"contents_moveable","insertTextFormat":1},{"label":"contents_monsterclip","kind":6,"detail":"pub const contents_monsterclip int","insertText":"contents_monsterclip","insertTextFormat":1},{"label":"contents_window","kind":6,"detail":"pub const contents_window int","insertText":"contents_window","insertTextFormat":1},{"label":"contents_debris","kind":6,"detail":"pub const contents_debris int","insertText":"contents_debris","insertTextFormat":1},{"label":"contents_hitbox","kind":6,"detail":"pub const contents_hitbox int","insertText":"contents_hitbox","insertTextFormat":1},{"label":"contents_grate","kind":6,"detail":"pub const contents_grate int","insertText":"contents_grate","insertTextFormat":1},{"label":"contents_ignore_nodraw_opaque","kind":6,"detail":"pub const contents_ignore_nodraw_opaque int","insertText":"contents_ignore_nodraw_opaque","insertTextFormat":1},{"label":"contents_opaque","kind":6,"detail":"pub const contents_opaque int","insertText":"contents_opaque","insertTextFormat":1},{"label":"mask_shot","kind":6,"detail":"pub const mask_shot","insertText":"mask_shot","insertTextFormat":1},{"label":"mask_opaque","kind":6,"detail":"pub const mask_opaque","insertText":"mask_opaque","insertTextFormat":1},{"label":"mask_visible","kind":6,"detail":"pub const mask_visible","insertText":"mask_visible","insertTextFormat":1},{"label":"CTraceFilter","kind":22,"detail":"pub struct CTraceFilter","insertText":"CTraceFilter{v_table:$1, p_skip:$2}","insertTextFormat":2},{"label":"CSurface","kind":22,"detail":"pub struct CSurface","insertText":"CSurface{name:$1, surface_prop:$2, flags:$3}","insertTextFormat":2},{"label":"CGameTrace","kind":22,"detail":"pub struct CGameTrace","insertText":"CGameTrace{start_pos:$1, end_pos:$2, pad:$3, fraction:$4, contents:$5, disp_flags:$6, all_solid:$7, start_solid:$8, pod:$9, surface:$10, hit_group:$11, pud:$12, hit_entity:$13, hitbox:$14}","insertTextFormat":2},{"label":"Ray","kind":22,"detail":"pub struct Ray","insertText":"Ray{start:$1, pad:$2, delta:$3, pod:$4, is_ray:$5, is_swept:$6}","insertTextFormat":2},{"label":"IEngineTrace","kind":22,"detail":"struct IEngineTrace","insertText":"IEngineTrace{}","insertTextFormat":1},{"label":"CGlobalVarsBase","kind":22,"detail":"struct CGlobalVarsBase","insertText":"CGlobalVarsBase{realtime:$1, framecount:$2, absoluteframetime:$3, absoluteframestarttimestddev:$4, curtime:$5, frametime:$6, max_clients:$7, tickcount:$8, interval_per_tick:$9, interpolation_amount:$10, sim_ticks_this_frame:$11, network_protocol:$12, p_save_data:$13, bclient:$14, bremoteclient:$15, timestamp_networking_base:$16, timestamp_randomize_window:$17}","insertTextFormat":2},{"label":"msg_c","kind":3,"detail":"fn msg_c(with_color Color, and_text string)","insertText":"msg_c($0, $1)","insertTextFormat":2},{"label":"msg","kind":3,"detail":"fn msg(with_text string)","insertText":"msg($0)","insertTextFormat":2},{"label":"ISurface","kind":22,"detail":"struct ISurface","insertText":"ISurface{}","insertTextFormat":1},{"label":"IVModelInfo","kind":22,"detail":"struct IVModelInfo","insertText":"IVModelInfo{}","insertTextFormat":1},{"label":"IEntityList","kind":22,"detail":"struct IEntityList","insertText":"IEntityList{}","insertTextFormat":1},{"label":"IMaterial","kind":22,"detail":"pub struct IMaterial","insertText":"IMaterial{}","insertTextFormat":1},{"label":"IMaterialSystem","kind":22,"detail":"struct IMaterialSystem","insertText":"IMaterialSystem{}","insertTextFormat":1},{"label":"ICvar","kind":22,"detail":"struct ICvar","insertText":"ICvar{}","insertTextFormat":1},{"label":"CDrawModelInfo","kind":22,"detail":"pub struct CDrawModelInfo","insertText":"CDrawModelInfo{studio_hdr:$1, hardware_data:$2, decals:$3, skin:$4, body:$5, hitbox_set:$6, renderable:$7}","insertTextFormat":2},{"label":"IStudioRender","kind":22,"detail":"struct IStudioRender","insertText":"IStudioRender{}","insertTextFormat":1},{"label":"WeaponData","kind":22,"detail":"struct WeaponData","insertText":"WeaponData{pad:$1, clean_name:$2, pud:$3, max_clip:$4, pid:$5, name:$6, pod:$7, w_type:$8, pzd:$9, full_auto:$10, phd:$11, damage:$12, armor_ratio:$13, bullets:$14, penetration:$15, pkd:$16, range:$17, range_modifier:$18, pnd:$19, has_silencer:$20}","insertTextFormat":2},{"label":"IWeaponSystem","kind":22,"detail":"struct IWeaponSystem","insertText":"IWeaponSystem{}","insertTextFormat":1},{"label":"PlayerInfo","kind":22,"detail":"pub struct PlayerInfo","insertText":"PlayerInfo{pad:$1, pod:$2, sz_name:$3, user_id:$4, sz_steam_id:$5, pud:$6, steam_id:$7, friends_sz_name:$8, fake_player:$9, hltv:$10, custom_files:$11, files_downloaded:$12}","insertTextFormat":2},{"label":"IVEngineClient","kind":22,"detail":"struct IVEngineClient","insertText":"IVEngineClient{}","insertTextFormat":1},{"label":"IBaseClientDLL","kind":22,"detail":"struct IBaseClientDLL","insertText":"IBaseClientDLL{}","insertTextFormat":1},{"label":"IInputSystem","kind":22,"detail":"struct IInputSystem","insertText":"IInputSystem{}","insertTextFormat":1},{"label":"IVDebugOverlay","kind":22,"detail":"struct IVDebugOverlay","insertText":"IVDebugOverlay{}","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664319699}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/entities.v","diagnostics":[]}},"timestamp":1664319700}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/entities.v","diagnostics":[]}},"timestamp":1664319700}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/entities.v","diagnostics":[]}},"timestamp":1664319700}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":42,"method":"textDocument/completion","params":{"position":{"line":57,"character":4},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/entities.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664319700}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":42,"result":[]},"timestamp":1664319700}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/entities.v","diagnostics":[]}},"timestamp":1664319700}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/entities.v","diagnostics":[]}},"timestamp":1664319701}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/valve_defs.v","diagnostics":[]}},"timestamp":1664319716}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/valve_defs.v","diagnostics":[]}},"timestamp":1664319717}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664319731}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664319731}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_surface.v","diagnostics":[]}},"timestamp":1664319746}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_surface.v","diagnostics":[]}},"timestamp":1664319747}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":43,"method":"textDocument/completion","params":{"position":{"line":4,"character":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_surface.v"},"context":{"triggerKind":1}}},"timestamp":1664319752}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":43,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"CCLientClass","kind":22,"detail":"struct CCLientClass","insertText":"CCLientClass{create_fn:$1, create_event_fn:$2, network_name:$3, recvtable_ptr:$4, next_ptr:$5, class_id:$6}","insertTextFormat":2},{"label":"Entity_t","kind":22,"detail":"pub struct Entity_t","insertText":"Entity_t{}","insertTextFormat":1},{"label":"IClientUnknown","kind":22,"detail":"struct IClientUnknown","insertText":"IClientUnknown{}","insertTextFormat":1},{"label":"IClientRenderable","kind":22,"detail":"struct IClientRenderable","insertText":"IClientRenderable{}","insertTextFormat":1},{"label":"Weapon_t","kind":22,"detail":"pub struct Weapon_t","insertText":"Weapon_t{}","insertTextFormat":1},{"label":"Player","kind":22,"detail":"pub struct Player","insertText":"Player{}","insertTextFormat":1},{"label":"Item","kind":22,"detail":"struct Item","insertText":"Item{}","insertTextFormat":1},{"label":"Viewmodel","kind":22,"detail":"pub struct Viewmodel","insertText":"Viewmodel{}","insertTextFormat":1},{"label":"contents_solid","kind":6,"detail":"pub const contents_solid int","insertText":"contents_solid","insertTextFormat":1},{"label":"contents_moveable","kind":6,"detail":"pub const contents_moveable int","insertText":"contents_moveable","insertTextFormat":1},{"label":"contents_monsterclip","kind":6,"detail":"pub const contents_monsterclip int","insertText":"contents_monsterclip","insertTextFormat":1},{"label":"contents_window","kind":6,"detail":"pub const contents_window int","insertText":"contents_window","insertTextFormat":1},{"label":"contents_debris","kind":6,"detail":"pub const contents_debris int","insertText":"contents_debris","insertTextFormat":1},{"label":"contents_hitbox","kind":6,"detail":"pub const contents_hitbox int","insertText":"contents_hitbox","insertTextFormat":1},{"label":"contents_grate","kind":6,"detail":"pub const contents_grate int","insertText":"contents_grate","insertTextFormat":1},{"label":"contents_ignore_nodraw_opaque","kind":6,"detail":"pub const contents_ignore_nodraw_opaque int","insertText":"contents_ignore_nodraw_opaque","insertTextFormat":1},{"label":"contents_opaque","kind":6,"detail":"pub const contents_opaque int","insertText":"contents_opaque","insertTextFormat":1},{"label":"mask_shot","kind":6,"detail":"pub const mask_shot","insertText":"mask_shot","insertTextFormat":1},{"label":"mask_opaque","kind":6,"detail":"pub const mask_opaque","insertText":"mask_opaque","insertTextFormat":1},{"label":"mask_visible","kind":6,"detail":"pub const mask_visible","insertText":"mask_visible","insertTextFormat":1},{"label":"CTraceFilter","kind":22,"detail":"pub struct CTraceFilter","insertText":"CTraceFilter{v_table:$1, p_skip:$2}","insertTextFormat":2},{"label":"CSurface","kind":22,"detail":"pub struct CSurface","insertText":"CSurface{name:$1, surface_prop:$2, flags:$3}","insertTextFormat":2},{"label":"CGameTrace","kind":22,"detail":"pub struct CGameTrace","insertText":"CGameTrace{start_pos:$1, end_pos:$2, pad:$3, fraction:$4, contents:$5, disp_flags:$6, all_solid:$7, start_solid:$8, pod:$9, surface:$10, hit_group:$11, pud:$12, hit_entity:$13, hitbox:$14}","insertTextFormat":2},{"label":"Ray","kind":22,"detail":"pub struct Ray","insertText":"Ray{start:$1, pad:$2, delta:$3, pod:$4, is_ray:$5, is_swept:$6}","insertTextFormat":2},{"label":"IEngineTrace","kind":22,"detail":"struct IEngineTrace","insertText":"IEngineTrace{}","insertTextFormat":1},{"label":"CGlobalVarsBase","kind":22,"detail":"struct CGlobalVarsBase","insertText":"CGlobalVarsBase{realtime:$1, framecount:$2, absoluteframetime:$3, absoluteframestarttimestddev:$4, curtime:$5, frametime:$6, max_clients:$7, tickcount:$8, interval_per_tick:$9, interpolation_amount:$10, sim_ticks_this_frame:$11, network_protocol:$12, p_save_data:$13, bclient:$14, bremoteclient:$15, timestamp_networking_base:$16, timestamp_randomize_window:$17}","insertTextFormat":2},{"label":"msg_c","kind":3,"detail":"fn msg_c(with_color Color, and_text string)","insertText":"msg_c($0, $1)","insertTextFormat":2},{"label":"msg","kind":3,"detail":"fn msg(with_text string)","insertText":"msg($0)","insertTextFormat":2},{"label":"ISurface","kind":22,"detail":"struct ISurface","insertText":"ISurface{}","insertTextFormat":1},{"label":"IVModelInfo","kind":22,"detail":"struct IVModelInfo","insertText":"IVModelInfo{}","insertTextFormat":1},{"label":"IEntityList","kind":22,"detail":"struct IEntityList","insertText":"IEntityList{}","insertTextFormat":1},{"label":"IMaterial","kind":22,"detail":"pub struct IMaterial","insertText":"IMaterial{}","insertTextFormat":1},{"label":"IMaterialSystem","kind":22,"detail":"struct IMaterialSystem","insertText":"IMaterialSystem{}","insertTextFormat":1},{"label":"ICvar","kind":22,"detail":"struct ICvar","insertText":"ICvar{}","insertTextFormat":1},{"label":"CDrawModelInfo","kind":22,"detail":"pub struct CDrawModelInfo","insertText":"CDrawModelInfo{studio_hdr:$1, hardware_data:$2, decals:$3, skin:$4, body:$5, hitbox_set:$6, renderable:$7}","insertTextFormat":2},{"label":"IStudioRender","kind":22,"detail":"struct IStudioRender","insertText":"IStudioRender{}","insertTextFormat":1},{"label":"WeaponData","kind":22,"detail":"struct WeaponData","insertText":"WeaponData{pad:$1, clean_name:$2, pud:$3, max_clip:$4, pid:$5, name:$6, pod:$7, w_type:$8, pzd:$9, full_auto:$10, phd:$11, damage:$12, armor_ratio:$13, bullets:$14, penetration:$15, pkd:$16, range:$17, range_modifier:$18, pnd:$19, has_silencer:$20}","insertTextFormat":2},{"label":"IWeaponSystem","kind":22,"detail":"struct IWeaponSystem","insertText":"IWeaponSystem{}","insertTextFormat":1},{"label":"PlayerInfo","kind":22,"detail":"pub struct PlayerInfo","insertText":"PlayerInfo{pad:$1, pod:$2, sz_name:$3, user_id:$4, sz_steam_id:$5, pud:$6, steam_id:$7, friends_sz_name:$8, fake_player:$9, hltv:$10, custom_files:$11, files_downloaded:$12}","insertTextFormat":2},{"label":"IVEngineClient","kind":22,"detail":"struct IVEngineClient","insertText":"IVEngineClient{}","insertTextFormat":1},{"label":"IBaseClientDLL","kind":22,"detail":"struct IBaseClientDLL","insertText":"IBaseClientDLL{}","insertTextFormat":1},{"label":"IInputSystem","kind":22,"detail":"struct IInputSystem","insertText":"IInputSystem{}","insertTextFormat":1},{"label":"IVDebugOverlay","kind":22,"detail":"struct IVDebugOverlay","insertText":"IVDebugOverlay{}","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664319752}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_surface.v","diagnostics":[]}},"timestamp":1664319752}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_surface.v","diagnostics":[]}},"timestamp":1664319753}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_surface.v","diagnostics":[]}},"timestamp":1664319753}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":44,"method":"textDocument/completion","params":{"position":{"line":4,"character":4},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_surface.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664319753}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":44,"result":[]},"timestamp":1664319753}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_surface.v","diagnostics":[]}},"timestamp":1664319753}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/c_input.v","diagnostics":[]}},"timestamp":1664319770}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/c_input.v","diagnostics":[]}},"timestamp":1664319770}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":45,"method":"textDocument/completion","params":{"position":{"line":4,"character":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/c_input.v"},"context":{"triggerKind":1}}},"timestamp":1664319780}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":45,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"CCLientClass","kind":22,"detail":"struct CCLientClass","insertText":"CCLientClass{create_fn:$1, create_event_fn:$2, network_name:$3, recvtable_ptr:$4, next_ptr:$5, class_id:$6}","insertTextFormat":2},{"label":"Entity_t","kind":22,"detail":"pub struct Entity_t","insertText":"Entity_t{}","insertTextFormat":1},{"label":"IClientUnknown","kind":22,"detail":"struct IClientUnknown","insertText":"IClientUnknown{}","insertTextFormat":1},{"label":"IClientRenderable","kind":22,"detail":"struct IClientRenderable","insertText":"IClientRenderable{}","insertTextFormat":1},{"label":"Weapon_t","kind":22,"detail":"pub struct Weapon_t","insertText":"Weapon_t{}","insertTextFormat":1},{"label":"Player","kind":22,"detail":"pub struct Player","insertText":"Player{}","insertTextFormat":1},{"label":"Item","kind":22,"detail":"struct Item","insertText":"Item{}","insertTextFormat":1},{"label":"Viewmodel","kind":22,"detail":"pub struct Viewmodel","insertText":"Viewmodel{}","insertTextFormat":1},{"label":"contents_solid","kind":6,"detail":"pub const contents_solid int","insertText":"contents_solid","insertTextFormat":1},{"label":"contents_moveable","kind":6,"detail":"pub const contents_moveable int","insertText":"contents_moveable","insertTextFormat":1},{"label":"contents_monsterclip","kind":6,"detail":"pub const contents_monsterclip int","insertText":"contents_monsterclip","insertTextFormat":1},{"label":"contents_window","kind":6,"detail":"pub const contents_window int","insertText":"contents_window","insertTextFormat":1},{"label":"contents_debris","kind":6,"detail":"pub const contents_debris int","insertText":"contents_debris","insertTextFormat":1},{"label":"contents_hitbox","kind":6,"detail":"pub const contents_hitbox int","insertText":"contents_hitbox","insertTextFormat":1},{"label":"contents_grate","kind":6,"detail":"pub const contents_grate int","insertText":"contents_grate","insertTextFormat":1},{"label":"contents_ignore_nodraw_opaque","kind":6,"detail":"pub const contents_ignore_nodraw_opaque int","insertText":"contents_ignore_nodraw_opaque","insertTextFormat":1},{"label":"contents_opaque","kind":6,"detail":"pub const contents_opaque int","insertText":"contents_opaque","insertTextFormat":1},{"label":"mask_shot","kind":6,"detail":"pub const mask_shot","insertText":"mask_shot","insertTextFormat":1},{"label":"mask_opaque","kind":6,"detail":"pub const mask_opaque","insertText":"mask_opaque","insertTextFormat":1},{"label":"mask_visible","kind":6,"detail":"pub const mask_visible","insertText":"mask_visible","insertTextFormat":1},{"label":"CTraceFilter","kind":22,"detail":"pub struct CTraceFilter","insertText":"CTraceFilter{v_table:$1, p_skip:$2}","insertTextFormat":2},{"label":"CSurface","kind":22,"detail":"pub struct CSurface","insertText":"CSurface{name:$1, surface_prop:$2, flags:$3}","insertTextFormat":2},{"label":"CGameTrace","kind":22,"detail":"pub struct CGameTrace","insertText":"CGameTrace{start_pos:$1, end_pos:$2, pad:$3, fraction:$4, contents:$5, disp_flags:$6, all_solid:$7, start_solid:$8, pod:$9, surface:$10, hit_group:$11, pud:$12, hit_entity:$13, hitbox:$14}","insertTextFormat":2},{"label":"Ray","kind":22,"detail":"pub struct Ray","insertText":"Ray{start:$1, pad:$2, delta:$3, pod:$4, is_ray:$5, is_swept:$6}","insertTextFormat":2},{"label":"IEngineTrace","kind":22,"detail":"struct IEngineTrace","insertText":"IEngineTrace{}","insertTextFormat":1},{"label":"CGlobalVarsBase","kind":22,"detail":"struct CGlobalVarsBase","insertText":"CGlobalVarsBase{realtime:$1, framecount:$2, absoluteframetime:$3, absoluteframestarttimestddev:$4, curtime:$5, frametime:$6, max_clients:$7, tickcount:$8, interval_per_tick:$9, interpolation_amount:$10, sim_ticks_this_frame:$11, network_protocol:$12, p_save_data:$13, bclient:$14, bremoteclient:$15, timestamp_networking_base:$16, timestamp_randomize_window:$17}","insertTextFormat":2},{"label":"msg_c","kind":3,"detail":"fn msg_c(with_color Color, and_text string)","insertText":"msg_c($0, $1)","insertTextFormat":2},{"label":"msg","kind":3,"detail":"fn msg(with_text string)","insertText":"msg($0)","insertTextFormat":2},{"label":"ISurface","kind":22,"detail":"pub struct ISurface","insertText":"ISurface{}","insertTextFormat":1},{"label":"IVModelInfo","kind":22,"detail":"struct IVModelInfo","insertText":"IVModelInfo{}","insertTextFormat":1},{"label":"IEntityList","kind":22,"detail":"struct IEntityList","insertText":"IEntityList{}","insertTextFormat":1},{"label":"IMaterial","kind":22,"detail":"pub struct IMaterial","insertText":"IMaterial{}","insertTextFormat":1},{"label":"IMaterialSystem","kind":22,"detail":"struct IMaterialSystem","insertText":"IMaterialSystem{}","insertTextFormat":1},{"label":"ICvar","kind":22,"detail":"struct ICvar","insertText":"ICvar{}","insertTextFormat":1},{"label":"CDrawModelInfo","kind":22,"detail":"pub struct CDrawModelInfo","insertText":"CDrawModelInfo{studio_hdr:$1, hardware_data:$2, decals:$3, skin:$4, body:$5, hitbox_set:$6, renderable:$7}","insertTextFormat":2},{"label":"IStudioRender","kind":22,"detail":"struct IStudioRender","insertText":"IStudioRender{}","insertTextFormat":1},{"label":"WeaponData","kind":22,"detail":"struct WeaponData","insertText":"WeaponData{pad:$1, clean_name:$2, pud:$3, max_clip:$4, pid:$5, name:$6, pod:$7, w_type:$8, pzd:$9, full_auto:$10, phd:$11, damage:$12, armor_ratio:$13, bullets:$14, penetration:$15, pkd:$16, range:$17, range_modifier:$18, pnd:$19, has_silencer:$20}","insertTextFormat":2},{"label":"IWeaponSystem","kind":22,"detail":"struct IWeaponSystem","insertText":"IWeaponSystem{}","insertTextFormat":1},{"label":"PlayerInfo","kind":22,"detail":"pub struct PlayerInfo","insertText":"PlayerInfo{pad:$1, pod:$2, sz_name:$3, user_id:$4, sz_steam_id:$5, pud:$6, steam_id:$7, friends_sz_name:$8, fake_player:$9, hltv:$10, custom_files:$11, files_downloaded:$12}","insertTextFormat":2},{"label":"IVEngineClient","kind":22,"detail":"struct IVEngineClient","insertText":"IVEngineClient{}","insertTextFormat":1},{"label":"IBaseClientDLL","kind":22,"detail":"struct IBaseClientDLL","insertText":"IBaseClientDLL{}","insertTextFormat":1},{"label":"IInputSystem","kind":22,"detail":"struct IInputSystem","insertText":"IInputSystem{}","insertTextFormat":1},{"label":"IVDebugOverlay","kind":22,"detail":"struct IVDebugOverlay","insertText":"IVDebugOverlay{}","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664319780}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/c_input.v","diagnostics":[]}},"timestamp":1664319781}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/c_input.v","diagnostics":[]}},"timestamp":1664319781}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/c_input.v","diagnostics":[]}},"timestamp":1664319781}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":46,"method":"textDocument/completion","params":{"position":{"line":4,"character":4},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/c_input.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664319782}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":46,"result":[]},"timestamp":1664319782}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/c_input.v","diagnostics":[]}},"timestamp":1664319782}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/fns.v","diagnostics":[]}},"timestamp":1664319792}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/fns.v","diagnostics":[]}},"timestamp":1664319792}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/global_vars.v","diagnostics":[]}},"timestamp":1664319801}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":47,"method":"textDocument/completion","params":{"position":{"line":2,"character":2},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/global_vars.v"},"context":{"triggerKind":1}}},"timestamp":1664319801}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":47,"result":[{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"CCLientClass","kind":22,"detail":"struct CCLientClass","insertText":"CCLientClass{create_fn:$1, create_event_fn:$2, network_name:$3, recvtable_ptr:$4, next_ptr:$5, class_id:$6}","insertTextFormat":2},{"label":"Entity_t","kind":22,"detail":"pub struct Entity_t","insertText":"Entity_t{}","insertTextFormat":1},{"label":"IClientUnknown","kind":22,"detail":"struct IClientUnknown","insertText":"IClientUnknown{}","insertTextFormat":1},{"label":"IClientRenderable","kind":22,"detail":"struct IClientRenderable","insertText":"IClientRenderable{}","insertTextFormat":1},{"label":"Weapon_t","kind":22,"detail":"pub struct Weapon_t","insertText":"Weapon_t{}","insertTextFormat":1},{"label":"Player","kind":22,"detail":"pub struct Player","insertText":"Player{}","insertTextFormat":1},{"label":"Item","kind":22,"detail":"struct Item","insertText":"Item{}","insertTextFormat":1},{"label":"Viewmodel","kind":22,"detail":"pub struct Viewmodel","insertText":"Viewmodel{}","insertTextFormat":1},{"label":"contents_solid","kind":6,"detail":"pub const contents_solid int","insertText":"contents_solid","insertTextFormat":1},{"label":"contents_moveable","kind":6,"detail":"pub const contents_moveable int","insertText":"contents_moveable","insertTextFormat":1},{"label":"contents_monsterclip","kind":6,"detail":"pub const contents_monsterclip int","insertText":"contents_monsterclip","insertTextFormat":1},{"label":"contents_window","kind":6,"detail":"pub const contents_window int","insertText":"contents_window","insertTextFormat":1},{"label":"contents_debris","kind":6,"detail":"pub const contents_debris int","insertText":"contents_debris","insertTextFormat":1},{"label":"contents_hitbox","kind":6,"detail":"pub const contents_hitbox int","insertText":"contents_hitbox","insertTextFormat":1},{"label":"contents_grate","kind":6,"detail":"pub const contents_grate int","insertText":"contents_grate","insertTextFormat":1},{"label":"contents_ignore_nodraw_opaque","kind":6,"detail":"pub const contents_ignore_nodraw_opaque int","insertText":"contents_ignore_nodraw_opaque","insertTextFormat":1},{"label":"contents_opaque","kind":6,"detail":"pub const contents_opaque int","insertText":"contents_opaque","insertTextFormat":1},{"label":"mask_shot","kind":6,"detail":"pub const mask_shot","insertText":"mask_shot","insertTextFormat":1},{"label":"mask_opaque","kind":6,"detail":"pub const mask_opaque","insertText":"mask_opaque","insertTextFormat":1},{"label":"mask_visible","kind":6,"detail":"pub const mask_visible","insertText":"mask_visible","insertTextFormat":1},{"label":"CTraceFilter","kind":22,"detail":"pub struct CTraceFilter","insertText":"CTraceFilter{v_table:$1, p_skip:$2}","insertTextFormat":2},{"label":"CSurface","kind":22,"detail":"pub struct CSurface","insertText":"CSurface{name:$1, surface_prop:$2, flags:$3}","insertTextFormat":2},{"label":"CGameTrace","kind":22,"detail":"pub struct CGameTrace","insertText":"CGameTrace{start_pos:$1, end_pos:$2, pad:$3, fraction:$4, contents:$5, disp_flags:$6, all_solid:$7, start_solid:$8, pod:$9, surface:$10, hit_group:$11, pud:$12, hit_entity:$13, hitbox:$14}","insertTextFormat":2},{"label":"Ray","kind":22,"detail":"pub struct Ray","insertText":"Ray{start:$1, pad:$2, delta:$3, pod:$4, is_ray:$5, is_swept:$6}","insertTextFormat":2},{"label":"IEngineTrace","kind":22,"detail":"struct IEngineTrace","insertText":"IEngineTrace{}","insertTextFormat":1},{"label":"CGlobalVarsBase","kind":22,"detail":"struct CGlobalVarsBase","insertText":"CGlobalVarsBase{realtime:$1, framecount:$2, absoluteframetime:$3, absoluteframestarttimestddev:$4, curtime:$5, frametime:$6, max_clients:$7, tickcount:$8, interval_per_tick:$9, interpolation_amount:$10, sim_ticks_this_frame:$11, network_protocol:$12, p_save_data:$13, bclient:$14, bremoteclient:$15, timestamp_networking_base:$16, timestamp_randomize_window:$17}","insertTextFormat":2},{"label":"msg_c","kind":3,"detail":"fn msg_c(with_color Color, and_text string)","insertText":"msg_c($0, $1)","insertTextFormat":2},{"label":"msg","kind":3,"detail":"fn msg(with_text string)","insertText":"msg($0)","insertTextFormat":2},{"label":"ISurface","kind":22,"detail":"pub struct ISurface","insertText":"ISurface{}","insertTextFormat":1},{"label":"IVModelInfo","kind":22,"detail":"struct IVModelInfo","insertText":"IVModelInfo{}","insertTextFormat":1},{"label":"IEntityList","kind":22,"detail":"struct IEntityList","insertText":"IEntityList{}","insertTextFormat":1},{"label":"IMaterial","kind":22,"detail":"pub struct IMaterial","insertText":"IMaterial{}","insertTextFormat":1},{"label":"IMaterialSystem","kind":22,"detail":"struct IMaterialSystem","insertText":"IMaterialSystem{}","insertTextFormat":1},{"label":"ICvar","kind":22,"detail":"struct ICvar","insertText":"ICvar{}","insertTextFormat":1},{"label":"CDrawModelInfo","kind":22,"detail":"pub struct CDrawModelInfo","insertText":"CDrawModelInfo{studio_hdr:$1, hardware_data:$2, decals:$3, skin:$4, body:$5, hitbox_set:$6, renderable:$7}","insertTextFormat":2},{"label":"IStudioRender","kind":22,"detail":"struct IStudioRender","insertText":"IStudioRender{}","insertTextFormat":1},{"label":"WeaponData","kind":22,"detail":"struct WeaponData","insertText":"WeaponData{pad:$1, clean_name:$2, pud:$3, max_clip:$4, pid:$5, name:$6, pod:$7, w_type:$8, pzd:$9, full_auto:$10, phd:$11, damage:$12, armor_ratio:$13, bullets:$14, penetration:$15, pkd:$16, range:$17, range_modifier:$18, pnd:$19, has_silencer:$20}","insertTextFormat":2},{"label":"IWeaponSystem","kind":22,"detail":"struct IWeaponSystem","insertText":"IWeaponSystem{}","insertTextFormat":1},{"label":"PlayerInfo","kind":22,"detail":"pub struct PlayerInfo","insertText":"PlayerInfo{pad:$1, pod:$2, sz_name:$3, user_id:$4, sz_steam_id:$5, pud:$6, steam_id:$7, friends_sz_name:$8, fake_player:$9, hltv:$10, custom_files:$11, files_downloaded:$12}","insertTextFormat":2},{"label":"IVEngineClient","kind":22,"detail":"struct IVEngineClient","insertText":"IVEngineClient{}","insertTextFormat":1},{"label":"IBaseClientDLL","kind":22,"detail":"struct IBaseClientDLL","insertText":"IBaseClientDLL{}","insertTextFormat":1},{"label":"IInputSystem","kind":22,"detail":"pub struct IInputSystem","insertText":"IInputSystem{}","insertTextFormat":1},{"label":"IVDebugOverlay","kind":22,"detail":"struct IVDebugOverlay","insertText":"IVDebugOverlay{}","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664319801}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/global_vars.v","diagnostics":[]}},"timestamp":1664319801}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/global_vars.v","diagnostics":[]}},"timestamp":1664319801}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":48,"method":"textDocument/completion","params":{"position":{"line":2,"character":4},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/global_vars.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664319801}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":48,"result":[]},"timestamp":1664319801}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/global_vars.v","diagnostics":[]}},"timestamp":1664319801}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/global_vars.v","diagnostics":[]}},"timestamp":1664319802}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":49,"method":"textDocument/completion","params":{"position":{"line":2,"character":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_cvar.v"},"context":{"triggerKind":1}}},"timestamp":1664319808}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":49,"result":[{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"CCLientClass","kind":22,"detail":"struct CCLientClass","insertText":"CCLientClass{create_fn:$1, create_event_fn:$2, network_name:$3, recvtable_ptr:$4, next_ptr:$5, class_id:$6}","insertTextFormat":2},{"label":"Entity_t","kind":22,"detail":"pub struct Entity_t","insertText":"Entity_t{}","insertTextFormat":1},{"label":"IClientUnknown","kind":22,"detail":"struct IClientUnknown","insertText":"IClientUnknown{}","insertTextFormat":1},{"label":"IClientRenderable","kind":22,"detail":"struct IClientRenderable","insertText":"IClientRenderable{}","insertTextFormat":1},{"label":"Weapon_t","kind":22,"detail":"pub struct Weapon_t","insertText":"Weapon_t{}","insertTextFormat":1},{"label":"Player","kind":22,"detail":"pub struct Player","insertText":"Player{}","insertTextFormat":1},{"label":"Item","kind":22,"detail":"struct Item","insertText":"Item{}","insertTextFormat":1},{"label":"Viewmodel","kind":22,"detail":"pub struct Viewmodel","insertText":"Viewmodel{}","insertTextFormat":1},{"label":"contents_solid","kind":6,"detail":"pub const contents_solid int","insertText":"contents_solid","insertTextFormat":1},{"label":"contents_moveable","kind":6,"detail":"pub const contents_moveable int","insertText":"contents_moveable","insertTextFormat":1},{"label":"contents_monsterclip","kind":6,"detail":"pub const contents_monsterclip int","insertText":"contents_monsterclip","insertTextFormat":1},{"label":"contents_window","kind":6,"detail":"pub const contents_window int","insertText":"contents_window","insertTextFormat":1},{"label":"contents_debris","kind":6,"detail":"pub const contents_debris int","insertText":"contents_debris","insertTextFormat":1},{"label":"contents_hitbox","kind":6,"detail":"pub const contents_hitbox int","insertText":"contents_hitbox","insertTextFormat":1},{"label":"contents_grate","kind":6,"detail":"pub const contents_grate int","insertText":"contents_grate","insertTextFormat":1},{"label":"contents_ignore_nodraw_opaque","kind":6,"detail":"pub const contents_ignore_nodraw_opaque int","insertText":"contents_ignore_nodraw_opaque","insertTextFormat":1},{"label":"contents_opaque","kind":6,"detail":"pub const contents_opaque int","insertText":"contents_opaque","insertTextFormat":1},{"label":"mask_shot","kind":6,"detail":"pub const mask_shot","insertText":"mask_shot","insertTextFormat":1},{"label":"mask_opaque","kind":6,"detail":"pub const mask_opaque","insertText":"mask_opaque","insertTextFormat":1},{"label":"mask_visible","kind":6,"detail":"pub const mask_visible","insertText":"mask_visible","insertTextFormat":1},{"label":"CTraceFilter","kind":22,"detail":"pub struct CTraceFilter","insertText":"CTraceFilter{v_table:$1, p_skip:$2}","insertTextFormat":2},{"label":"CSurface","kind":22,"detail":"pub struct CSurface","insertText":"CSurface{name:$1, surface_prop:$2, flags:$3}","insertTextFormat":2},{"label":"CGameTrace","kind":22,"detail":"pub struct CGameTrace","insertText":"CGameTrace{start_pos:$1, end_pos:$2, pad:$3, fraction:$4, contents:$5, disp_flags:$6, all_solid:$7, start_solid:$8, pod:$9, surface:$10, hit_group:$11, pud:$12, hit_entity:$13, hitbox:$14}","insertTextFormat":2},{"label":"Ray","kind":22,"detail":"pub struct Ray","insertText":"Ray{start:$1, pad:$2, delta:$3, pod:$4, is_ray:$5, is_swept:$6}","insertTextFormat":2},{"label":"IEngineTrace","kind":22,"detail":"struct IEngineTrace","insertText":"IEngineTrace{}","insertTextFormat":1},{"label":"CGlobalVarsBase","kind":22,"detail":"pub struct CGlobalVarsBase","insertText":"CGlobalVarsBase{realtime:$1, framecount:$2, absoluteframetime:$3, absoluteframestarttimestddev:$4, curtime:$5, frametime:$6, max_clients:$7, tickcount:$8, interval_per_tick:$9, interpolation_amount:$10, sim_ticks_this_frame:$11, network_protocol:$12, p_save_data:$13, bclient:$14, bremoteclient:$15, timestamp_networking_base:$16, timestamp_randomize_window:$17}","insertTextFormat":2},{"label":"msg_c","kind":3,"detail":"fn msg_c(with_color Color, and_text string)","insertText":"msg_c($0, $1)","insertTextFormat":2},{"label":"msg","kind":3,"detail":"fn msg(with_text string)","insertText":"msg($0)","insertTextFormat":2},{"label":"ISurface","kind":22,"detail":"pub struct ISurface","insertText":"ISurface{}","insertTextFormat":1},{"label":"IVModelInfo","kind":22,"detail":"struct IVModelInfo","insertText":"IVModelInfo{}","insertTextFormat":1},{"label":"IEntityList","kind":22,"detail":"struct IEntityList","insertText":"IEntityList{}","insertTextFormat":1},{"label":"IMaterial","kind":22,"detail":"pub struct IMaterial","insertText":"IMaterial{}","insertTextFormat":1},{"label":"IMaterialSystem","kind":22,"detail":"struct IMaterialSystem","insertText":"IMaterialSystem{}","insertTextFormat":1},{"label":"ICvar","kind":22,"detail":"struct ICvar","insertText":"ICvar{}","insertTextFormat":1},{"label":"CDrawModelInfo","kind":22,"detail":"pub struct CDrawModelInfo","insertText":"CDrawModelInfo{studio_hdr:$1, hardware_data:$2, decals:$3, skin:$4, body:$5, hitbox_set:$6, renderable:$7}","insertTextFormat":2},{"label":"IStudioRender","kind":22,"detail":"struct IStudioRender","insertText":"IStudioRender{}","insertTextFormat":1},{"label":"WeaponData","kind":22,"detail":"struct WeaponData","insertText":"WeaponData{pad:$1, clean_name:$2, pud:$3, max_clip:$4, pid:$5, name:$6, pod:$7, w_type:$8, pzd:$9, full_auto:$10, phd:$11, damage:$12, armor_ratio:$13, bullets:$14, penetration:$15, pkd:$16, range:$17, range_modifier:$18, pnd:$19, has_silencer:$20}","insertTextFormat":2},{"label":"IWeaponSystem","kind":22,"detail":"struct IWeaponSystem","insertText":"IWeaponSystem{}","insertTextFormat":1},{"label":"PlayerInfo","kind":22,"detail":"pub struct PlayerInfo","insertText":"PlayerInfo{pad:$1, pod:$2, sz_name:$3, user_id:$4, sz_steam_id:$5, pud:$6, steam_id:$7, friends_sz_name:$8, fake_player:$9, hltv:$10, custom_files:$11, files_downloaded:$12}","insertTextFormat":2},{"label":"IVEngineClient","kind":22,"detail":"struct IVEngineClient","insertText":"IVEngineClient{}","insertTextFormat":1},{"label":"IBaseClientDLL","kind":22,"detail":"struct IBaseClientDLL","insertText":"IBaseClientDLL{}","insertTextFormat":1},{"label":"IInputSystem","kind":22,"detail":"pub struct IInputSystem","insertText":"IInputSystem{}","insertTextFormat":1},{"label":"IVDebugOverlay","kind":22,"detail":"struct IVDebugOverlay","insertText":"IVDebugOverlay{}","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664319808}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_cvar.v","diagnostics":[]}},"timestamp":1664319808}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_cvar.v","diagnostics":[]}},"timestamp":1664319808}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":50,"method":"textDocument/completion","params":{"position":{"line":2,"character":4},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_cvar.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664319808}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":50,"result":[]},"timestamp":1664319808}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_cvar.v","diagnostics":[]}},"timestamp":1664319808}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_cvar.v","diagnostics":[]}},"timestamp":1664319811}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/cdll_int.v","diagnostics":[]}},"timestamp":1664319816}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/cdll_int.v","diagnostics":[]}},"timestamp":1664319816}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":51,"method":"textDocument/completion","params":{"position":{"line":122,"character":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/cdll_int.v"},"context":{"triggerKind":1}}},"timestamp":1664319826}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":51,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"CCLientClass","kind":22,"detail":"struct CCLientClass","insertText":"CCLientClass{create_fn:$1, create_event_fn:$2, network_name:$3, recvtable_ptr:$4, next_ptr:$5, class_id:$6}","insertTextFormat":2},{"label":"Entity_t","kind":22,"detail":"pub struct Entity_t","insertText":"Entity_t{}","insertTextFormat":1},{"label":"IClientUnknown","kind":22,"detail":"struct IClientUnknown","insertText":"IClientUnknown{}","insertTextFormat":1},{"label":"IClientRenderable","kind":22,"detail":"struct IClientRenderable","insertText":"IClientRenderable{}","insertTextFormat":1},{"label":"Weapon_t","kind":22,"detail":"pub struct Weapon_t","insertText":"Weapon_t{}","insertTextFormat":1},{"label":"Player","kind":22,"detail":"pub struct Player","insertText":"Player{}","insertTextFormat":1},{"label":"Item","kind":22,"detail":"struct Item","insertText":"Item{}","insertTextFormat":1},{"label":"Viewmodel","kind":22,"detail":"pub struct Viewmodel","insertText":"Viewmodel{}","insertTextFormat":1},{"label":"contents_solid","kind":6,"detail":"pub const contents_solid int","insertText":"contents_solid","insertTextFormat":1},{"label":"contents_moveable","kind":6,"detail":"pub const contents_moveable int","insertText":"contents_moveable","insertTextFormat":1},{"label":"contents_monsterclip","kind":6,"detail":"pub const contents_monsterclip int","insertText":"contents_monsterclip","insertTextFormat":1},{"label":"contents_window","kind":6,"detail":"pub const contents_window int","insertText":"contents_window","insertTextFormat":1},{"label":"contents_debris","kind":6,"detail":"pub const contents_debris int","insertText":"contents_debris","insertTextFormat":1},{"label":"contents_hitbox","kind":6,"detail":"pub const contents_hitbox int","insertText":"contents_hitbox","insertTextFormat":1},{"label":"contents_grate","kind":6,"detail":"pub const contents_grate int","insertText":"contents_grate","insertTextFormat":1},{"label":"contents_ignore_nodraw_opaque","kind":6,"detail":"pub const contents_ignore_nodraw_opaque int","insertText":"contents_ignore_nodraw_opaque","insertTextFormat":1},{"label":"contents_opaque","kind":6,"detail":"pub const contents_opaque int","insertText":"contents_opaque","insertTextFormat":1},{"label":"mask_shot","kind":6,"detail":"pub const mask_shot","insertText":"mask_shot","insertTextFormat":1},{"label":"mask_opaque","kind":6,"detail":"pub const mask_opaque","insertText":"mask_opaque","insertTextFormat":1},{"label":"mask_visible","kind":6,"detail":"pub const mask_visible","insertText":"mask_visible","insertTextFormat":1},{"label":"CTraceFilter","kind":22,"detail":"pub struct CTraceFilter","insertText":"CTraceFilter{v_table:$1, p_skip:$2}","insertTextFormat":2},{"label":"CSurface","kind":22,"detail":"pub struct CSurface","insertText":"CSurface{name:$1, surface_prop:$2, flags:$3}","insertTextFormat":2},{"label":"CGameTrace","kind":22,"detail":"pub struct CGameTrace","insertText":"CGameTrace{start_pos:$1, end_pos:$2, pad:$3, fraction:$4, contents:$5, disp_flags:$6, all_solid:$7, start_solid:$8, pod:$9, surface:$10, hit_group:$11, pud:$12, hit_entity:$13, hitbox:$14}","insertTextFormat":2},{"label":"Ray","kind":22,"detail":"pub struct Ray","insertText":"Ray{start:$1, pad:$2, delta:$3, pod:$4, is_ray:$5, is_swept:$6}","insertTextFormat":2},{"label":"IEngineTrace","kind":22,"detail":"struct IEngineTrace","insertText":"IEngineTrace{}","insertTextFormat":1},{"label":"CGlobalVarsBase","kind":22,"detail":"pub struct CGlobalVarsBase","insertText":"CGlobalVarsBase{realtime:$1, framecount:$2, absoluteframetime:$3, absoluteframestarttimestddev:$4, curtime:$5, frametime:$6, max_clients:$7, tickcount:$8, interval_per_tick:$9, interpolation_amount:$10, sim_ticks_this_frame:$11, network_protocol:$12, p_save_data:$13, bclient:$14, bremoteclient:$15, timestamp_networking_base:$16, timestamp_randomize_window:$17}","insertTextFormat":2},{"label":"msg_c","kind":3,"detail":"fn msg_c(with_color Color, and_text string)","insertText":"msg_c($0, $1)","insertTextFormat":2},{"label":"msg","kind":3,"detail":"fn msg(with_text string)","insertText":"msg($0)","insertTextFormat":2},{"label":"ISurface","kind":22,"detail":"pub struct ISurface","insertText":"ISurface{}","insertTextFormat":1},{"label":"IVModelInfo","kind":22,"detail":"struct IVModelInfo","insertText":"IVModelInfo{}","insertTextFormat":1},{"label":"IEntityList","kind":22,"detail":"struct IEntityList","insertText":"IEntityList{}","insertTextFormat":1},{"label":"IMaterial","kind":22,"detail":"pub struct IMaterial","insertText":"IMaterial{}","insertTextFormat":1},{"label":"IMaterialSystem","kind":22,"detail":"struct IMaterialSystem","insertText":"IMaterialSystem{}","insertTextFormat":1},{"label":"ICvar","kind":22,"detail":"pub struct ICvar","insertText":"ICvar{}","insertTextFormat":1},{"label":"CDrawModelInfo","kind":22,"detail":"pub struct CDrawModelInfo","insertText":"CDrawModelInfo{studio_hdr:$1, hardware_data:$2, decals:$3, skin:$4, body:$5, hitbox_set:$6, renderable:$7}","insertTextFormat":2},{"label":"IStudioRender","kind":22,"detail":"struct IStudioRender","insertText":"IStudioRender{}","insertTextFormat":1},{"label":"WeaponData","kind":22,"detail":"struct WeaponData","insertText":"WeaponData{pad:$1, clean_name:$2, pud:$3, max_clip:$4, pid:$5, name:$6, pod:$7, w_type:$8, pzd:$9, full_auto:$10, phd:$11, damage:$12, armor_ratio:$13, bullets:$14, penetration:$15, pkd:$16, range:$17, range_modifier:$18, pnd:$19, has_silencer:$20}","insertTextFormat":2},{"label":"IWeaponSystem","kind":22,"detail":"struct IWeaponSystem","insertText":"IWeaponSystem{}","insertTextFormat":1},{"label":"PlayerInfo","kind":22,"detail":"pub struct PlayerInfo","insertText":"PlayerInfo{pad:$1, pod:$2, sz_name:$3, user_id:$4, sz_steam_id:$5, pud:$6, steam_id:$7, friends_sz_name:$8, fake_player:$9, hltv:$10, custom_files:$11, files_downloaded:$12}","insertTextFormat":2},{"label":"IVEngineClient","kind":22,"detail":"struct IVEngineClient","insertText":"IVEngineClient{}","insertTextFormat":1},{"label":"IBaseClientDLL","kind":22,"detail":"struct IBaseClientDLL","insertText":"IBaseClientDLL{}","insertTextFormat":1},{"label":"IInputSystem","kind":22,"detail":"pub struct IInputSystem","insertText":"IInputSystem{}","insertTextFormat":1},{"label":"IVDebugOverlay","kind":22,"detail":"struct IVDebugOverlay","insertText":"IVDebugOverlay{}","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664319826}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/cdll_int.v","diagnostics":[]}},"timestamp":1664319826}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/cdll_int.v","diagnostics":[]}},"timestamp":1664319826}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/cdll_int.v","diagnostics":[]}},"timestamp":1664319826}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/cdll_int.v","diagnostics":[]}},"timestamp":1664319826}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/cdll_int.v","diagnostics":[]}},"timestamp":1664319827}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/cdll_int.v","diagnostics":[]}},"timestamp":1664319827}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":52,"method":"textDocument/completion","params":{"position":{"line":122,"character":4},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/cdll_int.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664319827}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":52,"result":[]},"timestamp":1664319827}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/cdll_int.v","diagnostics":[]}},"timestamp":1664319827}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/cdll_int.v","diagnostics":[]}},"timestamp":1664319827}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/cdll_int.v","diagnostics":[]}},"timestamp":1664319829}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/cdll_int.v","diagnostics":[]}},"timestamp":1664319829}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/cdll_int.v","diagnostics":[]}},"timestamp":1664319829}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/cdll_int.v","diagnostics":[]}},"timestamp":1664319829}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":53,"method":"textDocument/completion","params":{"position":{"line":122,"character":5},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/cdll_int.v"},"context":{"triggerKind":1}}},"timestamp":1664319832}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":53,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"CCLientClass","kind":22,"detail":"struct CCLientClass","insertText":"CCLientClass{create_fn:$1, create_event_fn:$2, network_name:$3, recvtable_ptr:$4, next_ptr:$5, class_id:$6}","insertTextFormat":2},{"label":"Entity_t","kind":22,"detail":"pub struct Entity_t","insertText":"Entity_t{}","insertTextFormat":1},{"label":"IClientUnknown","kind":22,"detail":"struct IClientUnknown","insertText":"IClientUnknown{}","insertTextFormat":1},{"label":"IClientRenderable","kind":22,"detail":"struct IClientRenderable","insertText":"IClientRenderable{}","insertTextFormat":1},{"label":"Weapon_t","kind":22,"detail":"pub struct Weapon_t","insertText":"Weapon_t{}","insertTextFormat":1},{"label":"Player","kind":22,"detail":"pub struct Player","insertText":"Player{}","insertTextFormat":1},{"label":"Item","kind":22,"detail":"struct Item","insertText":"Item{}","insertTextFormat":1},{"label":"Viewmodel","kind":22,"detail":"pub struct Viewmodel","insertText":"Viewmodel{}","insertTextFormat":1},{"label":"contents_solid","kind":6,"detail":"pub const contents_solid int","insertText":"contents_solid","insertTextFormat":1},{"label":"contents_moveable","kind":6,"detail":"pub const contents_moveable int","insertText":"contents_moveable","insertTextFormat":1},{"label":"contents_monsterclip","kind":6,"detail":"pub const contents_monsterclip int","insertText":"contents_monsterclip","insertTextFormat":1},{"label":"contents_window","kind":6,"detail":"pub const contents_window int","insertText":"contents_window","insertTextFormat":1},{"label":"contents_debris","kind":6,"detail":"pub const contents_debris int","insertText":"contents_debris","insertTextFormat":1},{"label":"contents_hitbox","kind":6,"detail":"pub const contents_hitbox int","insertText":"contents_hitbox","insertTextFormat":1},{"label":"contents_grate","kind":6,"detail":"pub const contents_grate int","insertText":"contents_grate","insertTextFormat":1},{"label":"contents_ignore_nodraw_opaque","kind":6,"detail":"pub const contents_ignore_nodraw_opaque int","insertText":"contents_ignore_nodraw_opaque","insertTextFormat":1},{"label":"contents_opaque","kind":6,"detail":"pub const contents_opaque int","insertText":"contents_opaque","insertTextFormat":1},{"label":"mask_shot","kind":6,"detail":"pub const mask_shot","insertText":"mask_shot","insertTextFormat":1},{"label":"mask_opaque","kind":6,"detail":"pub const mask_opaque","insertText":"mask_opaque","insertTextFormat":1},{"label":"mask_visible","kind":6,"detail":"pub const mask_visible","insertText":"mask_visible","insertTextFormat":1},{"label":"CTraceFilter","kind":22,"detail":"pub struct CTraceFilter","insertText":"CTraceFilter{v_table:$1, p_skip:$2}","insertTextFormat":2},{"label":"CSurface","kind":22,"detail":"pub struct CSurface","insertText":"CSurface{name:$1, surface_prop:$2, flags:$3}","insertTextFormat":2},{"label":"CGameTrace","kind":22,"detail":"pub struct CGameTrace","insertText":"CGameTrace{start_pos:$1, end_pos:$2, pad:$3, fraction:$4, contents:$5, disp_flags:$6, all_solid:$7, start_solid:$8, pod:$9, surface:$10, hit_group:$11, pud:$12, hit_entity:$13, hitbox:$14}","insertTextFormat":2},{"label":"Ray","kind":22,"detail":"pub struct Ray","insertText":"Ray{start:$1, pad:$2, delta:$3, pod:$4, is_ray:$5, is_swept:$6}","insertTextFormat":2},{"label":"IEngineTrace","kind":22,"detail":"struct IEngineTrace","insertText":"IEngineTrace{}","insertTextFormat":1},{"label":"CGlobalVarsBase","kind":22,"detail":"pub struct CGlobalVarsBase","insertText":"CGlobalVarsBase{realtime:$1, framecount:$2, absoluteframetime:$3, absoluteframestarttimestddev:$4, curtime:$5, frametime:$6, max_clients:$7, tickcount:$8, interval_per_tick:$9, interpolation_amount:$10, sim_ticks_this_frame:$11, network_protocol:$12, p_save_data:$13, bclient:$14, bremoteclient:$15, timestamp_networking_base:$16, timestamp_randomize_window:$17}","insertTextFormat":2},{"label":"msg_c","kind":3,"detail":"fn msg_c(with_color Color, and_text string)","insertText":"msg_c($0, $1)","insertTextFormat":2},{"label":"msg","kind":3,"detail":"fn msg(with_text string)","insertText":"msg($0)","insertTextFormat":2},{"label":"ISurface","kind":22,"detail":"pub struct ISurface","insertText":"ISurface{}","insertTextFormat":1},{"label":"IVModelInfo","kind":22,"detail":"struct IVModelInfo","insertText":"IVModelInfo{}","insertTextFormat":1},{"label":"IEntityList","kind":22,"detail":"struct IEntityList","insertText":"IEntityList{}","insertTextFormat":1},{"label":"IMaterial","kind":22,"detail":"pub struct IMaterial","insertText":"IMaterial{}","insertTextFormat":1},{"label":"IMaterialSystem","kind":22,"detail":"struct IMaterialSystem","insertText":"IMaterialSystem{}","insertTextFormat":1},{"label":"ICvar","kind":22,"detail":"pub struct ICvar","insertText":"ICvar{}","insertTextFormat":1},{"label":"CDrawModelInfo","kind":22,"detail":"pub struct CDrawModelInfo","insertText":"CDrawModelInfo{studio_hdr:$1, hardware_data:$2, decals:$3, skin:$4, body:$5, hitbox_set:$6, renderable:$7}","insertTextFormat":2},{"label":"IStudioRender","kind":22,"detail":"struct IStudioRender","insertText":"IStudioRender{}","insertTextFormat":1},{"label":"WeaponData","kind":22,"detail":"struct WeaponData","insertText":"WeaponData{pad:$1, clean_name:$2, pud:$3, max_clip:$4, pid:$5, name:$6, pod:$7, w_type:$8, pzd:$9, full_auto:$10, phd:$11, damage:$12, armor_ratio:$13, bullets:$14, penetration:$15, pkd:$16, range:$17, range_modifier:$18, pnd:$19, has_silencer:$20}","insertTextFormat":2},{"label":"IWeaponSystem","kind":22,"detail":"struct IWeaponSystem","insertText":"IWeaponSystem{}","insertTextFormat":1},{"label":"PlayerInfo","kind":22,"detail":"pub struct PlayerInfo","insertText":"PlayerInfo{pad:$1, pod:$2, sz_name:$3, user_id:$4, sz_steam_id:$5, pud:$6, steam_id:$7, friends_sz_name:$8, fake_player:$9, hltv:$10, custom_files:$11, files_downloaded:$12}","insertTextFormat":2},{"label":"IVEngineClient","kind":22,"detail":"struct IVEngineClient","insertText":"IVEngineClient{}","insertTextFormat":1},{"label":"IBaseClientDLL","kind":22,"detail":"struct IBaseClientDLL","insertText":"IBaseClientDLL{}","insertTextFormat":1},{"label":"IInputSystem","kind":22,"detail":"pub struct IInputSystem","insertText":"IInputSystem{}","insertTextFormat":1},{"label":"IVDebugOverlay","kind":22,"detail":"struct IVDebugOverlay","insertText":"IVDebugOverlay{}","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664319832}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/cdll_int.v","diagnostics":[]}},"timestamp":1664319832}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/cdll_int.v","diagnostics":[]}},"timestamp":1664319832}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/cdll_int.v","diagnostics":[]}},"timestamp":1664319832}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/cdll_int.v","diagnostics":[]}},"timestamp":1664319832}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/cdll_int.v","diagnostics":[]}},"timestamp":1664319833}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/cdll_int.v","diagnostics":[]}},"timestamp":1664319833}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":54,"method":"textDocument/completion","params":{"position":{"line":24,"character":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/cdll_int.v"},"context":{"triggerKind":1}}},"timestamp":1664319841}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":54,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"CCLientClass","kind":22,"detail":"struct CCLientClass","insertText":"CCLientClass{create_fn:$1, create_event_fn:$2, network_name:$3, recvtable_ptr:$4, next_ptr:$5, class_id:$6}","insertTextFormat":2},{"label":"Entity_t","kind":22,"detail":"pub struct Entity_t","insertText":"Entity_t{}","insertTextFormat":1},{"label":"IClientUnknown","kind":22,"detail":"struct IClientUnknown","insertText":"IClientUnknown{}","insertTextFormat":1},{"label":"IClientRenderable","kind":22,"detail":"struct IClientRenderable","insertText":"IClientRenderable{}","insertTextFormat":1},{"label":"Weapon_t","kind":22,"detail":"pub struct Weapon_t","insertText":"Weapon_t{}","insertTextFormat":1},{"label":"Player","kind":22,"detail":"pub struct Player","insertText":"Player{}","insertTextFormat":1},{"label":"Item","kind":22,"detail":"struct Item","insertText":"Item{}","insertTextFormat":1},{"label":"Viewmodel","kind":22,"detail":"pub struct Viewmodel","insertText":"Viewmodel{}","insertTextFormat":1},{"label":"contents_solid","kind":6,"detail":"pub const contents_solid int","insertText":"contents_solid","insertTextFormat":1},{"label":"contents_moveable","kind":6,"detail":"pub const contents_moveable int","insertText":"contents_moveable","insertTextFormat":1},{"label":"contents_monsterclip","kind":6,"detail":"pub const contents_monsterclip int","insertText":"contents_monsterclip","insertTextFormat":1},{"label":"contents_window","kind":6,"detail":"pub const contents_window int","insertText":"contents_window","insertTextFormat":1},{"label":"contents_debris","kind":6,"detail":"pub const contents_debris int","insertText":"contents_debris","insertTextFormat":1},{"label":"contents_hitbox","kind":6,"detail":"pub const contents_hitbox int","insertText":"contents_hitbox","insertTextFormat":1},{"label":"contents_grate","kind":6,"detail":"pub const contents_grate int","insertText":"contents_grate","insertTextFormat":1},{"label":"contents_ignore_nodraw_opaque","kind":6,"detail":"pub const contents_ignore_nodraw_opaque int","insertText":"contents_ignore_nodraw_opaque","insertTextFormat":1},{"label":"contents_opaque","kind":6,"detail":"pub const contents_opaque int","insertText":"contents_opaque","insertTextFormat":1},{"label":"mask_shot","kind":6,"detail":"pub const mask_shot","insertText":"mask_shot","insertTextFormat":1},{"label":"mask_opaque","kind":6,"detail":"pub const mask_opaque","insertText":"mask_opaque","insertTextFormat":1},{"label":"mask_visible","kind":6,"detail":"pub const mask_visible","insertText":"mask_visible","insertTextFormat":1},{"label":"CTraceFilter","kind":22,"detail":"pub struct CTraceFilter","insertText":"CTraceFilter{v_table:$1, p_skip:$2}","insertTextFormat":2},{"label":"CSurface","kind":22,"detail":"pub struct CSurface","insertText":"CSurface{name:$1, surface_prop:$2, flags:$3}","insertTextFormat":2},{"label":"CGameTrace","kind":22,"detail":"pub struct CGameTrace","insertText":"CGameTrace{start_pos:$1, end_pos:$2, pad:$3, fraction:$4, contents:$5, disp_flags:$6, all_solid:$7, start_solid:$8, pod:$9, surface:$10, hit_group:$11, pud:$12, hit_entity:$13, hitbox:$14}","insertTextFormat":2},{"label":"Ray","kind":22,"detail":"pub struct Ray","insertText":"Ray{start:$1, pad:$2, delta:$3, pod:$4, is_ray:$5, is_swept:$6}","insertTextFormat":2},{"label":"IEngineTrace","kind":22,"detail":"struct IEngineTrace","insertText":"IEngineTrace{}","insertTextFormat":1},{"label":"CGlobalVarsBase","kind":22,"detail":"pub struct CGlobalVarsBase","insertText":"CGlobalVarsBase{realtime:$1, framecount:$2, absoluteframetime:$3, absoluteframestarttimestddev:$4, curtime:$5, frametime:$6, max_clients:$7, tickcount:$8, interval_per_tick:$9, interpolation_amount:$10, sim_ticks_this_frame:$11, network_protocol:$12, p_save_data:$13, bclient:$14, bremoteclient:$15, timestamp_networking_base:$16, timestamp_randomize_window:$17}","insertTextFormat":2},{"label":"msg_c","kind":3,"detail":"fn msg_c(with_color Color, and_text string)","insertText":"msg_c($0, $1)","insertTextFormat":2},{"label":"msg","kind":3,"detail":"fn msg(with_text string)","insertText":"msg($0)","insertTextFormat":2},{"label":"ISurface","kind":22,"detail":"pub struct ISurface","insertText":"ISurface{}","insertTextFormat":1},{"label":"IVModelInfo","kind":22,"detail":"struct IVModelInfo","insertText":"IVModelInfo{}","insertTextFormat":1},{"label":"IEntityList","kind":22,"detail":"struct IEntityList","insertText":"IEntityList{}","insertTextFormat":1},{"label":"IMaterial","kind":22,"detail":"pub struct IMaterial","insertText":"IMaterial{}","insertTextFormat":1},{"label":"IMaterialSystem","kind":22,"detail":"struct IMaterialSystem","insertText":"IMaterialSystem{}","insertTextFormat":1},{"label":"ICvar","kind":22,"detail":"pub struct ICvar","insertText":"ICvar{}","insertTextFormat":1},{"label":"CDrawModelInfo","kind":22,"detail":"pub struct CDrawModelInfo","insertText":"CDrawModelInfo{studio_hdr:$1, hardware_data:$2, decals:$3, skin:$4, body:$5, hitbox_set:$6, renderable:$7}","insertTextFormat":2},{"label":"IStudioRender","kind":22,"detail":"struct IStudioRender","insertText":"IStudioRender{}","insertTextFormat":1},{"label":"WeaponData","kind":22,"detail":"struct WeaponData","insertText":"WeaponData{pad:$1, clean_name:$2, pud:$3, max_clip:$4, pid:$5, name:$6, pod:$7, w_type:$8, pzd:$9, full_auto:$10, phd:$11, damage:$12, armor_ratio:$13, bullets:$14, penetration:$15, pkd:$16, range:$17, range_modifier:$18, pnd:$19, has_silencer:$20}","insertTextFormat":2},{"label":"IWeaponSystem","kind":22,"detail":"struct IWeaponSystem","insertText":"IWeaponSystem{}","insertTextFormat":1},{"label":"PlayerInfo","kind":22,"detail":"pub struct PlayerInfo","insertText":"PlayerInfo{pad:$1, pod:$2, sz_name:$3, user_id:$4, sz_steam_id:$5, pud:$6, steam_id:$7, friends_sz_name:$8, fake_player:$9, hltv:$10, custom_files:$11, files_downloaded:$12}","insertTextFormat":2},{"label":"IVEngineClient","kind":22,"detail":"struct IVEngineClient","insertText":"IVEngineClient{}","insertTextFormat":1},{"label":"IBaseClientDLL","kind":22,"detail":"pub struct IBaseClientDLL","insertText":"IBaseClientDLL{}","insertTextFormat":1},{"label":"IInputSystem","kind":22,"detail":"pub struct IInputSystem","insertText":"IInputSystem{}","insertTextFormat":1},{"label":"IVDebugOverlay","kind":22,"detail":"struct IVDebugOverlay","insertText":"IVDebugOverlay{}","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664319841}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/cdll_int.v","diagnostics":[]}},"timestamp":1664319841}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/cdll_int.v","diagnostics":[]}},"timestamp":1664319841}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/cdll_int.v","diagnostics":[]}},"timestamp":1664319842}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/cdll_int.v","diagnostics":[]}},"timestamp":1664319842}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":55,"method":"textDocument/completion","params":{"position":{"line":24,"character":4},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/cdll_int.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664319842}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":55,"result":[]},"timestamp":1664319842}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/cdll_int.v","diagnostics":[]}},"timestamp":1664319842}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/cdll_int.v","diagnostics":[]}},"timestamp":1664319842}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/cdll_int.v","diagnostics":[]}},"timestamp":1664319843}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/cdll_int.v","diagnostics":[]}},"timestamp":1664319843}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/c_input.v","diagnostics":[]}},"timestamp":1664319851}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":56,"method":"textDocument/completion","params":{"position":{"line":4,"character":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_debug_overlay.v"},"context":{"triggerKind":1}}},"timestamp":1664319858}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":56,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"CCLientClass","kind":22,"detail":"struct CCLientClass","insertText":"CCLientClass{create_fn:$1, create_event_fn:$2, network_name:$3, recvtable_ptr:$4, next_ptr:$5, class_id:$6}","insertTextFormat":2},{"label":"Entity_t","kind":22,"detail":"pub struct Entity_t","insertText":"Entity_t{}","insertTextFormat":1},{"label":"IClientUnknown","kind":22,"detail":"struct IClientUnknown","insertText":"IClientUnknown{}","insertTextFormat":1},{"label":"IClientRenderable","kind":22,"detail":"struct IClientRenderable","insertText":"IClientRenderable{}","insertTextFormat":1},{"label":"Weapon_t","kind":22,"detail":"pub struct Weapon_t","insertText":"Weapon_t{}","insertTextFormat":1},{"label":"Player","kind":22,"detail":"pub struct Player","insertText":"Player{}","insertTextFormat":1},{"label":"Item","kind":22,"detail":"struct Item","insertText":"Item{}","insertTextFormat":1},{"label":"Viewmodel","kind":22,"detail":"pub struct Viewmodel","insertText":"Viewmodel{}","insertTextFormat":1},{"label":"contents_solid","kind":6,"detail":"pub const contents_solid int","insertText":"contents_solid","insertTextFormat":1},{"label":"contents_moveable","kind":6,"detail":"pub const contents_moveable int","insertText":"contents_moveable","insertTextFormat":1},{"label":"contents_monsterclip","kind":6,"detail":"pub const contents_monsterclip int","insertText":"contents_monsterclip","insertTextFormat":1},{"label":"contents_window","kind":6,"detail":"pub const contents_window int","insertText":"contents_window","insertTextFormat":1},{"label":"contents_debris","kind":6,"detail":"pub const contents_debris int","insertText":"contents_debris","insertTextFormat":1},{"label":"contents_hitbox","kind":6,"detail":"pub const contents_hitbox int","insertText":"contents_hitbox","insertTextFormat":1},{"label":"contents_grate","kind":6,"detail":"pub const contents_grate int","insertText":"contents_grate","insertTextFormat":1},{"label":"contents_ignore_nodraw_opaque","kind":6,"detail":"pub const contents_ignore_nodraw_opaque int","insertText":"contents_ignore_nodraw_opaque","insertTextFormat":1},{"label":"contents_opaque","kind":6,"detail":"pub const contents_opaque int","insertText":"contents_opaque","insertTextFormat":1},{"label":"mask_shot","kind":6,"detail":"pub const mask_shot","insertText":"mask_shot","insertTextFormat":1},{"label":"mask_opaque","kind":6,"detail":"pub const mask_opaque","insertText":"mask_opaque","insertTextFormat":1},{"label":"mask_visible","kind":6,"detail":"pub const mask_visible","insertText":"mask_visible","insertTextFormat":1},{"label":"CTraceFilter","kind":22,"detail":"pub struct CTraceFilter","insertText":"CTraceFilter{v_table:$1, p_skip:$2}","insertTextFormat":2},{"label":"CSurface","kind":22,"detail":"pub struct CSurface","insertText":"CSurface{name:$1, surface_prop:$2, flags:$3}","insertTextFormat":2},{"label":"CGameTrace","kind":22,"detail":"pub struct CGameTrace","insertText":"CGameTrace{start_pos:$1, end_pos:$2, pad:$3, fraction:$4, contents:$5, disp_flags:$6, all_solid:$7, start_solid:$8, pod:$9, surface:$10, hit_group:$11, pud:$12, hit_entity:$13, hitbox:$14}","insertTextFormat":2},{"label":"Ray","kind":22,"detail":"pub struct Ray","insertText":"Ray{start:$1, pad:$2, delta:$3, pod:$4, is_ray:$5, is_swept:$6}","insertTextFormat":2},{"label":"IEngineTrace","kind":22,"detail":"struct IEngineTrace","insertText":"IEngineTrace{}","insertTextFormat":1},{"label":"CGlobalVarsBase","kind":22,"detail":"pub struct CGlobalVarsBase","insertText":"CGlobalVarsBase{realtime:$1, framecount:$2, absoluteframetime:$3, absoluteframestarttimestddev:$4, curtime:$5, frametime:$6, max_clients:$7, tickcount:$8, interval_per_tick:$9, interpolation_amount:$10, sim_ticks_this_frame:$11, network_protocol:$12, p_save_data:$13, bclient:$14, bremoteclient:$15, timestamp_networking_base:$16, timestamp_randomize_window:$17}","insertTextFormat":2},{"label":"msg_c","kind":3,"detail":"fn msg_c(with_color Color, and_text string)","insertText":"msg_c($0, $1)","insertTextFormat":2},{"label":"msg","kind":3,"detail":"fn msg(with_text string)","insertText":"msg($0)","insertTextFormat":2},{"label":"ISurface","kind":22,"detail":"pub struct ISurface","insertText":"ISurface{}","insertTextFormat":1},{"label":"IVModelInfo","kind":22,"detail":"struct IVModelInfo","insertText":"IVModelInfo{}","insertTextFormat":1},{"label":"IEntityList","kind":22,"detail":"struct IEntityList","insertText":"IEntityList{}","insertTextFormat":1},{"label":"IMaterial","kind":22,"detail":"pub struct IMaterial","insertText":"IMaterial{}","insertTextFormat":1},{"label":"IMaterialSystem","kind":22,"detail":"struct IMaterialSystem","insertText":"IMaterialSystem{}","insertTextFormat":1},{"label":"ICvar","kind":22,"detail":"pub struct ICvar","insertText":"ICvar{}","insertTextFormat":1},{"label":"CDrawModelInfo","kind":22,"detail":"pub struct CDrawModelInfo","insertText":"CDrawModelInfo{studio_hdr:$1, hardware_data:$2, decals:$3, skin:$4, body:$5, hitbox_set:$6, renderable:$7}","insertTextFormat":2},{"label":"IStudioRender","kind":22,"detail":"struct IStudioRender","insertText":"IStudioRender{}","insertTextFormat":1},{"label":"WeaponData","kind":22,"detail":"struct WeaponData","insertText":"WeaponData{pad:$1, clean_name:$2, pud:$3, max_clip:$4, pid:$5, name:$6, pod:$7, w_type:$8, pzd:$9, full_auto:$10, phd:$11, damage:$12, armor_ratio:$13, bullets:$14, penetration:$15, pkd:$16, range:$17, range_modifier:$18, pnd:$19, has_silencer:$20}","insertTextFormat":2},{"label":"IWeaponSystem","kind":22,"detail":"struct IWeaponSystem","insertText":"IWeaponSystem{}","insertTextFormat":1},{"label":"PlayerInfo","kind":22,"detail":"pub struct PlayerInfo","insertText":"PlayerInfo{pad:$1, pod:$2, sz_name:$3, user_id:$4, sz_steam_id:$5, pud:$6, steam_id:$7, friends_sz_name:$8, fake_player:$9, hltv:$10, custom_files:$11, files_downloaded:$12}","insertTextFormat":2},{"label":"IVEngineClient","kind":22,"detail":"pub struct IVEngineClient","insertText":"IVEngineClient{}","insertTextFormat":1},{"label":"IBaseClientDLL","kind":22,"detail":"pub struct IBaseClientDLL","insertText":"IBaseClientDLL{}","insertTextFormat":1},{"label":"IInputSystem","kind":22,"detail":"pub struct IInputSystem","insertText":"IInputSystem{}","insertTextFormat":1},{"label":"IVDebugOverlay","kind":22,"detail":"struct IVDebugOverlay","insertText":"IVDebugOverlay{}","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664319858}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_debug_overlay.v","diagnostics":[]}},"timestamp":1664319858}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_debug_overlay.v","diagnostics":[]}},"timestamp":1664319858}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_debug_overlay.v","diagnostics":[]}},"timestamp":1664319859}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":57,"method":"textDocument/completion","params":{"position":{"line":4,"character":4},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_debug_overlay.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664319859}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":57,"result":[]},"timestamp":1664319859}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_debug_overlay.v","diagnostics":[]}},"timestamp":1664319859}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_debug_overlay.v","diagnostics":[]}},"timestamp":1664319861}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":58,"method":"textDocument/completion","params":{"position":{"line":4,"character":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_entity_list.v"},"context":{"triggerKind":1}}},"timestamp":1664319866}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":58,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"CCLientClass","kind":22,"detail":"struct CCLientClass","insertText":"CCLientClass{create_fn:$1, create_event_fn:$2, network_name:$3, recvtable_ptr:$4, next_ptr:$5, class_id:$6}","insertTextFormat":2},{"label":"Entity_t","kind":22,"detail":"pub struct Entity_t","insertText":"Entity_t{}","insertTextFormat":1},{"label":"IClientUnknown","kind":22,"detail":"struct IClientUnknown","insertText":"IClientUnknown{}","insertTextFormat":1},{"label":"IClientRenderable","kind":22,"detail":"struct IClientRenderable","insertText":"IClientRenderable{}","insertTextFormat":1},{"label":"Weapon_t","kind":22,"detail":"pub struct Weapon_t","insertText":"Weapon_t{}","insertTextFormat":1},{"label":"Player","kind":22,"detail":"pub struct Player","insertText":"Player{}","insertTextFormat":1},{"label":"Item","kind":22,"detail":"struct Item","insertText":"Item{}","insertTextFormat":1},{"label":"Viewmodel","kind":22,"detail":"pub struct Viewmodel","insertText":"Viewmodel{}","insertTextFormat":1},{"label":"contents_solid","kind":6,"detail":"pub const contents_solid int","insertText":"contents_solid","insertTextFormat":1},{"label":"contents_moveable","kind":6,"detail":"pub const contents_moveable int","insertText":"contents_moveable","insertTextFormat":1},{"label":"contents_monsterclip","kind":6,"detail":"pub const contents_monsterclip int","insertText":"contents_monsterclip","insertTextFormat":1},{"label":"contents_window","kind":6,"detail":"pub const contents_window int","insertText":"contents_window","insertTextFormat":1},{"label":"contents_debris","kind":6,"detail":"pub const contents_debris int","insertText":"contents_debris","insertTextFormat":1},{"label":"contents_hitbox","kind":6,"detail":"pub const contents_hitbox int","insertText":"contents_hitbox","insertTextFormat":1},{"label":"contents_grate","kind":6,"detail":"pub const contents_grate int","insertText":"contents_grate","insertTextFormat":1},{"label":"contents_ignore_nodraw_opaque","kind":6,"detail":"pub const contents_ignore_nodraw_opaque int","insertText":"contents_ignore_nodraw_opaque","insertTextFormat":1},{"label":"contents_opaque","kind":6,"detail":"pub const contents_opaque int","insertText":"contents_opaque","insertTextFormat":1},{"label":"mask_shot","kind":6,"detail":"pub const mask_shot","insertText":"mask_shot","insertTextFormat":1},{"label":"mask_opaque","kind":6,"detail":"pub const mask_opaque","insertText":"mask_opaque","insertTextFormat":1},{"label":"mask_visible","kind":6,"detail":"pub const mask_visible","insertText":"mask_visible","insertTextFormat":1},{"label":"CTraceFilter","kind":22,"detail":"pub struct CTraceFilter","insertText":"CTraceFilter{v_table:$1, p_skip:$2}","insertTextFormat":2},{"label":"CSurface","kind":22,"detail":"pub struct CSurface","insertText":"CSurface{name:$1, surface_prop:$2, flags:$3}","insertTextFormat":2},{"label":"CGameTrace","kind":22,"detail":"pub struct CGameTrace","insertText":"CGameTrace{start_pos:$1, end_pos:$2, pad:$3, fraction:$4, contents:$5, disp_flags:$6, all_solid:$7, start_solid:$8, pod:$9, surface:$10, hit_group:$11, pud:$12, hit_entity:$13, hitbox:$14}","insertTextFormat":2},{"label":"Ray","kind":22,"detail":"pub struct Ray","insertText":"Ray{start:$1, pad:$2, delta:$3, pod:$4, is_ray:$5, is_swept:$6}","insertTextFormat":2},{"label":"IEngineTrace","kind":22,"detail":"struct IEngineTrace","insertText":"IEngineTrace{}","insertTextFormat":1},{"label":"CGlobalVarsBase","kind":22,"detail":"pub struct CGlobalVarsBase","insertText":"CGlobalVarsBase{realtime:$1, framecount:$2, absoluteframetime:$3, absoluteframestarttimestddev:$4, curtime:$5, frametime:$6, max_clients:$7, tickcount:$8, interval_per_tick:$9, interpolation_amount:$10, sim_ticks_this_frame:$11, network_protocol:$12, p_save_data:$13, bclient:$14, bremoteclient:$15, timestamp_networking_base:$16, timestamp_randomize_window:$17}","insertTextFormat":2},{"label":"msg_c","kind":3,"detail":"fn msg_c(with_color Color, and_text string)","insertText":"msg_c($0, $1)","insertTextFormat":2},{"label":"msg","kind":3,"detail":"fn msg(with_text string)","insertText":"msg($0)","insertTextFormat":2},{"label":"ISurface","kind":22,"detail":"pub struct ISurface","insertText":"ISurface{}","insertTextFormat":1},{"label":"IVModelInfo","kind":22,"detail":"struct IVModelInfo","insertText":"IVModelInfo{}","insertTextFormat":1},{"label":"IEntityList","kind":22,"detail":"struct IEntityList","insertText":"IEntityList{}","insertTextFormat":1},{"label":"IMaterial","kind":22,"detail":"pub struct IMaterial","insertText":"IMaterial{}","insertTextFormat":1},{"label":"IMaterialSystem","kind":22,"detail":"struct IMaterialSystem","insertText":"IMaterialSystem{}","insertTextFormat":1},{"label":"ICvar","kind":22,"detail":"pub struct ICvar","insertText":"ICvar{}","insertTextFormat":1},{"label":"CDrawModelInfo","kind":22,"detail":"pub struct CDrawModelInfo","insertText":"CDrawModelInfo{studio_hdr:$1, hardware_data:$2, decals:$3, skin:$4, body:$5, hitbox_set:$6, renderable:$7}","insertTextFormat":2},{"label":"IStudioRender","kind":22,"detail":"struct IStudioRender","insertText":"IStudioRender{}","insertTextFormat":1},{"label":"WeaponData","kind":22,"detail":"struct WeaponData","insertText":"WeaponData{pad:$1, clean_name:$2, pud:$3, max_clip:$4, pid:$5, name:$6, pod:$7, w_type:$8, pzd:$9, full_auto:$10, phd:$11, damage:$12, armor_ratio:$13, bullets:$14, penetration:$15, pkd:$16, range:$17, range_modifier:$18, pnd:$19, has_silencer:$20}","insertTextFormat":2},{"label":"IWeaponSystem","kind":22,"detail":"struct IWeaponSystem","insertText":"IWeaponSystem{}","insertTextFormat":1},{"label":"PlayerInfo","kind":22,"detail":"pub struct PlayerInfo","insertText":"PlayerInfo{pad:$1, pod:$2, sz_name:$3, user_id:$4, sz_steam_id:$5, pud:$6, steam_id:$7, friends_sz_name:$8, fake_player:$9, hltv:$10, custom_files:$11, files_downloaded:$12}","insertTextFormat":2},{"label":"IVEngineClient","kind":22,"detail":"pub struct IVEngineClient","insertText":"IVEngineClient{}","insertTextFormat":1},{"label":"IBaseClientDLL","kind":22,"detail":"pub struct IBaseClientDLL","insertText":"IBaseClientDLL{}","insertTextFormat":1},{"label":"IInputSystem","kind":22,"detail":"pub struct IInputSystem","insertText":"IInputSystem{}","insertTextFormat":1},{"label":"IVDebugOverlay","kind":22,"detail":"pub struct IVDebugOverlay","insertText":"IVDebugOverlay{}","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664319866}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_entity_list.v","diagnostics":[]}},"timestamp":1664319866}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_entity_list.v","diagnostics":[]}},"timestamp":1664319866}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_entity_list.v","diagnostics":[]}},"timestamp":1664319867}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":59,"method":"textDocument/completion","params":{"position":{"line":4,"character":4},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_entity_list.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664319867}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":59,"result":[]},"timestamp":1664319867}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_entity_list.v","diagnostics":[]}},"timestamp":1664319867}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_entity_list.v","diagnostics":[]}},"timestamp":1664319868}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":60,"method":"textDocument/completion","params":{"position":{"line":4,"character":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_model_info.v"},"context":{"triggerKind":1}}},"timestamp":1664319876}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":60,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"CCLientClass","kind":22,"detail":"struct CCLientClass","insertText":"CCLientClass{create_fn:$1, create_event_fn:$2, network_name:$3, recvtable_ptr:$4, next_ptr:$5, class_id:$6}","insertTextFormat":2},{"label":"Entity_t","kind":22,"detail":"pub struct Entity_t","insertText":"Entity_t{}","insertTextFormat":1},{"label":"IClientUnknown","kind":22,"detail":"struct IClientUnknown","insertText":"IClientUnknown{}","insertTextFormat":1},{"label":"IClientRenderable","kind":22,"detail":"struct IClientRenderable","insertText":"IClientRenderable{}","insertTextFormat":1},{"label":"Weapon_t","kind":22,"detail":"pub struct Weapon_t","insertText":"Weapon_t{}","insertTextFormat":1},{"label":"Player","kind":22,"detail":"pub struct Player","insertText":"Player{}","insertTextFormat":1},{"label":"Item","kind":22,"detail":"struct Item","insertText":"Item{}","insertTextFormat":1},{"label":"Viewmodel","kind":22,"detail":"pub struct Viewmodel","insertText":"Viewmodel{}","insertTextFormat":1},{"label":"contents_solid","kind":6,"detail":"pub const contents_solid int","insertText":"contents_solid","insertTextFormat":1},{"label":"contents_moveable","kind":6,"detail":"pub const contents_moveable int","insertText":"contents_moveable","insertTextFormat":1},{"label":"contents_monsterclip","kind":6,"detail":"pub const contents_monsterclip int","insertText":"contents_monsterclip","insertTextFormat":1},{"label":"contents_window","kind":6,"detail":"pub const contents_window int","insertText":"contents_window","insertTextFormat":1},{"label":"contents_debris","kind":6,"detail":"pub const contents_debris int","insertText":"contents_debris","insertTextFormat":1},{"label":"contents_hitbox","kind":6,"detail":"pub const contents_hitbox int","insertText":"contents_hitbox","insertTextFormat":1},{"label":"contents_grate","kind":6,"detail":"pub const contents_grate int","insertText":"contents_grate","insertTextFormat":1},{"label":"contents_ignore_nodraw_opaque","kind":6,"detail":"pub const contents_ignore_nodraw_opaque int","insertText":"contents_ignore_nodraw_opaque","insertTextFormat":1},{"label":"contents_opaque","kind":6,"detail":"pub const contents_opaque int","insertText":"contents_opaque","insertTextFormat":1},{"label":"mask_shot","kind":6,"detail":"pub const mask_shot","insertText":"mask_shot","insertTextFormat":1},{"label":"mask_opaque","kind":6,"detail":"pub const mask_opaque","insertText":"mask_opaque","insertTextFormat":1},{"label":"mask_visible","kind":6,"detail":"pub const mask_visible","insertText":"mask_visible","insertTextFormat":1},{"label":"CTraceFilter","kind":22,"detail":"pub struct CTraceFilter","insertText":"CTraceFilter{v_table:$1, p_skip:$2}","insertTextFormat":2},{"label":"CSurface","kind":22,"detail":"pub struct CSurface","insertText":"CSurface{name:$1, surface_prop:$2, flags:$3}","insertTextFormat":2},{"label":"CGameTrace","kind":22,"detail":"pub struct CGameTrace","insertText":"CGameTrace{start_pos:$1, end_pos:$2, pad:$3, fraction:$4, contents:$5, disp_flags:$6, all_solid:$7, start_solid:$8, pod:$9, surface:$10, hit_group:$11, pud:$12, hit_entity:$13, hitbox:$14}","insertTextFormat":2},{"label":"Ray","kind":22,"detail":"pub struct Ray","insertText":"Ray{start:$1, pad:$2, delta:$3, pod:$4, is_ray:$5, is_swept:$6}","insertTextFormat":2},{"label":"IEngineTrace","kind":22,"detail":"struct IEngineTrace","insertText":"IEngineTrace{}","insertTextFormat":1},{"label":"CGlobalVarsBase","kind":22,"detail":"pub struct CGlobalVarsBase","insertText":"CGlobalVarsBase{realtime:$1, framecount:$2, absoluteframetime:$3, absoluteframestarttimestddev:$4, curtime:$5, frametime:$6, max_clients:$7, tickcount:$8, interval_per_tick:$9, interpolation_amount:$10, sim_ticks_this_frame:$11, network_protocol:$12, p_save_data:$13, bclient:$14, bremoteclient:$15, timestamp_networking_base:$16, timestamp_randomize_window:$17}","insertTextFormat":2},{"label":"msg_c","kind":3,"detail":"fn msg_c(with_color Color, and_text string)","insertText":"msg_c($0, $1)","insertTextFormat":2},{"label":"msg","kind":3,"detail":"fn msg(with_text string)","insertText":"msg($0)","insertTextFormat":2},{"label":"ISurface","kind":22,"detail":"pub struct ISurface","insertText":"ISurface{}","insertTextFormat":1},{"label":"IVModelInfo","kind":22,"detail":"struct IVModelInfo","insertText":"IVModelInfo{}","insertTextFormat":1},{"label":"IEntityList","kind":22,"detail":"pub struct IEntityList","insertText":"IEntityList{}","insertTextFormat":1},{"label":"IMaterial","kind":22,"detail":"pub struct IMaterial","insertText":"IMaterial{}","insertTextFormat":1},{"label":"IMaterialSystem","kind":22,"detail":"struct IMaterialSystem","insertText":"IMaterialSystem{}","insertTextFormat":1},{"label":"ICvar","kind":22,"detail":"pub struct ICvar","insertText":"ICvar{}","insertTextFormat":1},{"label":"CDrawModelInfo","kind":22,"detail":"pub struct CDrawModelInfo","insertText":"CDrawModelInfo{studio_hdr:$1, hardware_data:$2, decals:$3, skin:$4, body:$5, hitbox_set:$6, renderable:$7}","insertTextFormat":2},{"label":"IStudioRender","kind":22,"detail":"struct IStudioRender","insertText":"IStudioRender{}","insertTextFormat":1},{"label":"WeaponData","kind":22,"detail":"struct WeaponData","insertText":"WeaponData{pad:$1, clean_name:$2, pud:$3, max_clip:$4, pid:$5, name:$6, pod:$7, w_type:$8, pzd:$9, full_auto:$10, phd:$11, damage:$12, armor_ratio:$13, bullets:$14, penetration:$15, pkd:$16, range:$17, range_modifier:$18, pnd:$19, has_silencer:$20}","insertTextFormat":2},{"label":"IWeaponSystem","kind":22,"detail":"struct IWeaponSystem","insertText":"IWeaponSystem{}","insertTextFormat":1},{"label":"PlayerInfo","kind":22,"detail":"pub struct PlayerInfo","insertText":"PlayerInfo{pad:$1, pod:$2, sz_name:$3, user_id:$4, sz_steam_id:$5, pud:$6, steam_id:$7, friends_sz_name:$8, fake_player:$9, hltv:$10, custom_files:$11, files_downloaded:$12}","insertTextFormat":2},{"label":"IVEngineClient","kind":22,"detail":"pub struct IVEngineClient","insertText":"IVEngineClient{}","insertTextFormat":1},{"label":"IBaseClientDLL","kind":22,"detail":"pub struct IBaseClientDLL","insertText":"IBaseClientDLL{}","insertTextFormat":1},{"label":"IInputSystem","kind":22,"detail":"pub struct IInputSystem","insertText":"IInputSystem{}","insertTextFormat":1},{"label":"IVDebugOverlay","kind":22,"detail":"pub struct IVDebugOverlay","insertText":"IVDebugOverlay{}","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664319876}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_model_info.v","diagnostics":[]}},"timestamp":1664319876}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_model_info.v","diagnostics":[]}},"timestamp":1664319876}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_model_info.v","diagnostics":[]}},"timestamp":1664319876}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":61,"method":"textDocument/completion","params":{"position":{"line":4,"character":4},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_model_info.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664319876}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":61,"result":[]},"timestamp":1664319876}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_model_info.v","diagnostics":[]}},"timestamp":1664319877}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_model_info.v","diagnostics":[]}},"timestamp":1664319878}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_surface.v","diagnostics":[]}},"timestamp":1664319900}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_trace.v","diagnostics":[]}},"timestamp":1664319903}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_trace.v","diagnostics":[]}},"timestamp":1664319904}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_trace.v","diagnostics":[]}},"timestamp":1664319912}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":62,"method":"textDocument/completion","params":{"position":{"line":111,"character":2},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_trace.v"},"context":{"triggerKind":1}}},"timestamp":1664319912}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":62,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"CCLientClass","kind":22,"detail":"struct CCLientClass","insertText":"CCLientClass{create_fn:$1, create_event_fn:$2, network_name:$3, recvtable_ptr:$4, next_ptr:$5, class_id:$6}","insertTextFormat":2},{"label":"Entity_t","kind":22,"detail":"pub struct Entity_t","insertText":"Entity_t{}","insertTextFormat":1},{"label":"IClientUnknown","kind":22,"detail":"struct IClientUnknown","insertText":"IClientUnknown{}","insertTextFormat":1},{"label":"IClientRenderable","kind":22,"detail":"struct IClientRenderable","insertText":"IClientRenderable{}","insertTextFormat":1},{"label":"Weapon_t","kind":22,"detail":"pub struct Weapon_t","insertText":"Weapon_t{}","insertTextFormat":1},{"label":"Player","kind":22,"detail":"pub struct Player","insertText":"Player{}","insertTextFormat":1},{"label":"Item","kind":22,"detail":"struct Item","insertText":"Item{}","insertTextFormat":1},{"label":"Viewmodel","kind":22,"detail":"pub struct Viewmodel","insertText":"Viewmodel{}","insertTextFormat":1},{"label":"contents_solid","kind":6,"detail":"pub const contents_solid int","insertText":"contents_solid","insertTextFormat":1},{"label":"contents_moveable","kind":6,"detail":"pub const contents_moveable int","insertText":"contents_moveable","insertTextFormat":1},{"label":"contents_monsterclip","kind":6,"detail":"pub const contents_monsterclip int","insertText":"contents_monsterclip","insertTextFormat":1},{"label":"contents_window","kind":6,"detail":"pub const contents_window int","insertText":"contents_window","insertTextFormat":1},{"label":"contents_debris","kind":6,"detail":"pub const contents_debris int","insertText":"contents_debris","insertTextFormat":1},{"label":"contents_hitbox","kind":6,"detail":"pub const contents_hitbox int","insertText":"contents_hitbox","insertTextFormat":1},{"label":"contents_grate","kind":6,"detail":"pub const contents_grate int","insertText":"contents_grate","insertTextFormat":1},{"label":"contents_ignore_nodraw_opaque","kind":6,"detail":"pub const contents_ignore_nodraw_opaque int","insertText":"contents_ignore_nodraw_opaque","insertTextFormat":1},{"label":"contents_opaque","kind":6,"detail":"pub const contents_opaque int","insertText":"contents_opaque","insertTextFormat":1},{"label":"mask_shot","kind":6,"detail":"pub const mask_shot","insertText":"mask_shot","insertTextFormat":1},{"label":"mask_opaque","kind":6,"detail":"pub const mask_opaque","insertText":"mask_opaque","insertTextFormat":1},{"label":"mask_visible","kind":6,"detail":"pub const mask_visible","insertText":"mask_visible","insertTextFormat":1},{"label":"CTraceFilter","kind":22,"detail":"pub struct CTraceFilter","insertText":"CTraceFilter{v_table:$1, p_skip:$2}","insertTextFormat":2},{"label":"CSurface","kind":22,"detail":"pub struct CSurface","insertText":"CSurface{name:$1, surface_prop:$2, flags:$3}","insertTextFormat":2},{"label":"CGameTrace","kind":22,"detail":"pub struct CGameTrace","insertText":"CGameTrace{start_pos:$1, end_pos:$2, pad:$3, fraction:$4, contents:$5, disp_flags:$6, all_solid:$7, start_solid:$8, pod:$9, surface:$10, hit_group:$11, pud:$12, hit_entity:$13, hitbox:$14}","insertTextFormat":2},{"label":"Ray","kind":22,"detail":"pub struct Ray","insertText":"Ray{start:$1, pad:$2, delta:$3, pod:$4, is_ray:$5, is_swept:$6}","insertTextFormat":2},{"label":"IEngineTrace","kind":22,"detail":"struct IEngineTrace","insertText":"IEngineTrace{}","insertTextFormat":1},{"label":"CGlobalVarsBase","kind":22,"detail":"pub struct CGlobalVarsBase","insertText":"CGlobalVarsBase{realtime:$1, framecount:$2, absoluteframetime:$3, absoluteframestarttimestddev:$4, curtime:$5, frametime:$6, max_clients:$7, tickcount:$8, interval_per_tick:$9, interpolation_amount:$10, sim_ticks_this_frame:$11, network_protocol:$12, p_save_data:$13, bclient:$14, bremoteclient:$15, timestamp_networking_base:$16, timestamp_randomize_window:$17}","insertTextFormat":2},{"label":"msg_c","kind":3,"detail":"fn msg_c(with_color Color, and_text string)","insertText":"msg_c($0, $1)","insertTextFormat":2},{"label":"msg","kind":3,"detail":"fn msg(with_text string)","insertText":"msg($0)","insertTextFormat":2},{"label":"ISurface","kind":22,"detail":"pub struct ISurface","insertText":"ISurface{}","insertTextFormat":1},{"label":"IVModelInfo","kind":22,"detail":"pub struct IVModelInfo","insertText":"IVModelInfo{}","insertTextFormat":1},{"label":"IEntityList","kind":22,"detail":"pub struct IEntityList","insertText":"IEntityList{}","insertTextFormat":1},{"label":"IMaterial","kind":22,"detail":"pub struct IMaterial","insertText":"IMaterial{}","insertTextFormat":1},{"label":"IMaterialSystem","kind":22,"detail":"struct IMaterialSystem","insertText":"IMaterialSystem{}","insertTextFormat":1},{"label":"ICvar","kind":22,"detail":"pub struct ICvar","insertText":"ICvar{}","insertTextFormat":1},{"label":"CDrawModelInfo","kind":22,"detail":"pub struct CDrawModelInfo","insertText":"CDrawModelInfo{studio_hdr:$1, hardware_data:$2, decals:$3, skin:$4, body:$5, hitbox_set:$6, renderable:$7}","insertTextFormat":2},{"label":"IStudioRender","kind":22,"detail":"struct IStudioRender","insertText":"IStudioRender{}","insertTextFormat":1},{"label":"WeaponData","kind":22,"detail":"struct WeaponData","insertText":"WeaponData{pad:$1, clean_name:$2, pud:$3, max_clip:$4, pid:$5, name:$6, pod:$7, w_type:$8, pzd:$9, full_auto:$10, phd:$11, damage:$12, armor_ratio:$13, bullets:$14, penetration:$15, pkd:$16, range:$17, range_modifier:$18, pnd:$19, has_silencer:$20}","insertTextFormat":2},{"label":"IWeaponSystem","kind":22,"detail":"struct IWeaponSystem","insertText":"IWeaponSystem{}","insertTextFormat":1},{"label":"PlayerInfo","kind":22,"detail":"pub struct PlayerInfo","insertText":"PlayerInfo{pad:$1, pod:$2, sz_name:$3, user_id:$4, sz_steam_id:$5, pud:$6, steam_id:$7, friends_sz_name:$8, fake_player:$9, hltv:$10, custom_files:$11, files_downloaded:$12}","insertTextFormat":2},{"label":"IVEngineClient","kind":22,"detail":"pub struct IVEngineClient","insertText":"IVEngineClient{}","insertTextFormat":1},{"label":"IBaseClientDLL","kind":22,"detail":"pub struct IBaseClientDLL","insertText":"IBaseClientDLL{}","insertTextFormat":1},{"label":"IInputSystem","kind":22,"detail":"pub struct IInputSystem","insertText":"IInputSystem{}","insertTextFormat":1},{"label":"IVDebugOverlay","kind":22,"detail":"pub struct IVDebugOverlay","insertText":"IVDebugOverlay{}","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664319912}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_trace.v","diagnostics":[]}},"timestamp":1664319912}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_trace.v","diagnostics":[]}},"timestamp":1664319913}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":63,"method":"textDocument/completion","params":{"position":{"line":111,"character":4},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_trace.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664319914}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":63,"result":[]},"timestamp":1664319914}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_trace.v","diagnostics":[]}},"timestamp":1664319914}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_trace.v","diagnostics":[]}},"timestamp":1664319915}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/I_weapon_system.v","diagnostics":[]}},"timestamp":1664319916}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/I_weapon_system.v","diagnostics":[]}},"timestamp":1664319916}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":64,"method":"textDocument/completion","params":{"position":{"line":4,"character":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/I_weapon_system.v"},"context":{"triggerKind":1}}},"timestamp":1664319919}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":64,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"CCLientClass","kind":22,"detail":"struct CCLientClass","insertText":"CCLientClass{create_fn:$1, create_event_fn:$2, network_name:$3, recvtable_ptr:$4, next_ptr:$5, class_id:$6}","insertTextFormat":2},{"label":"Entity_t","kind":22,"detail":"pub struct Entity_t","insertText":"Entity_t{}","insertTextFormat":1},{"label":"IClientUnknown","kind":22,"detail":"struct IClientUnknown","insertText":"IClientUnknown{}","insertTextFormat":1},{"label":"IClientRenderable","kind":22,"detail":"struct IClientRenderable","insertText":"IClientRenderable{}","insertTextFormat":1},{"label":"Weapon_t","kind":22,"detail":"pub struct Weapon_t","insertText":"Weapon_t{}","insertTextFormat":1},{"label":"Player","kind":22,"detail":"pub struct Player","insertText":"Player{}","insertTextFormat":1},{"label":"Item","kind":22,"detail":"struct Item","insertText":"Item{}","insertTextFormat":1},{"label":"Viewmodel","kind":22,"detail":"pub struct Viewmodel","insertText":"Viewmodel{}","insertTextFormat":1},{"label":"contents_solid","kind":6,"detail":"pub const contents_solid int","insertText":"contents_solid","insertTextFormat":1},{"label":"contents_moveable","kind":6,"detail":"pub const contents_moveable int","insertText":"contents_moveable","insertTextFormat":1},{"label":"contents_monsterclip","kind":6,"detail":"pub const contents_monsterclip int","insertText":"contents_monsterclip","insertTextFormat":1},{"label":"contents_window","kind":6,"detail":"pub const contents_window int","insertText":"contents_window","insertTextFormat":1},{"label":"contents_debris","kind":6,"detail":"pub const contents_debris int","insertText":"contents_debris","insertTextFormat":1},{"label":"contents_hitbox","kind":6,"detail":"pub const contents_hitbox int","insertText":"contents_hitbox","insertTextFormat":1},{"label":"contents_grate","kind":6,"detail":"pub const contents_grate int","insertText":"contents_grate","insertTextFormat":1},{"label":"contents_ignore_nodraw_opaque","kind":6,"detail":"pub const contents_ignore_nodraw_opaque int","insertText":"contents_ignore_nodraw_opaque","insertTextFormat":1},{"label":"contents_opaque","kind":6,"detail":"pub const contents_opaque int","insertText":"contents_opaque","insertTextFormat":1},{"label":"mask_shot","kind":6,"detail":"pub const mask_shot","insertText":"mask_shot","insertTextFormat":1},{"label":"mask_opaque","kind":6,"detail":"pub const mask_opaque","insertText":"mask_opaque","insertTextFormat":1},{"label":"mask_visible","kind":6,"detail":"pub const mask_visible","insertText":"mask_visible","insertTextFormat":1},{"label":"CTraceFilter","kind":22,"detail":"pub struct CTraceFilter","insertText":"CTraceFilter{v_table:$1, p_skip:$2}","insertTextFormat":2},{"label":"CSurface","kind":22,"detail":"pub struct CSurface","insertText":"CSurface{name:$1, surface_prop:$2, flags:$3}","insertTextFormat":2},{"label":"CGameTrace","kind":22,"detail":"pub struct CGameTrace","insertText":"CGameTrace{start_pos:$1, end_pos:$2, pad:$3, fraction:$4, contents:$5, disp_flags:$6, all_solid:$7, start_solid:$8, pod:$9, surface:$10, hit_group:$11, pud:$12, hit_entity:$13, hitbox:$14}","insertTextFormat":2},{"label":"Ray","kind":22,"detail":"pub struct Ray","insertText":"Ray{start:$1, pad:$2, delta:$3, pod:$4, is_ray:$5, is_swept:$6}","insertTextFormat":2},{"label":"IEngineTrace","kind":22,"detail":"pub struct IEngineTrace","insertText":"IEngineTrace{}","insertTextFormat":1},{"label":"CGlobalVarsBase","kind":22,"detail":"pub struct CGlobalVarsBase","insertText":"CGlobalVarsBase{realtime:$1, framecount:$2, absoluteframetime:$3, absoluteframestarttimestddev:$4, curtime:$5, frametime:$6, max_clients:$7, tickcount:$8, interval_per_tick:$9, interpolation_amount:$10, sim_ticks_this_frame:$11, network_protocol:$12, p_save_data:$13, bclient:$14, bremoteclient:$15, timestamp_networking_base:$16, timestamp_randomize_window:$17}","insertTextFormat":2},{"label":"msg_c","kind":3,"detail":"fn msg_c(with_color Color, and_text string)","insertText":"msg_c($0, $1)","insertTextFormat":2},{"label":"msg","kind":3,"detail":"fn msg(with_text string)","insertText":"msg($0)","insertTextFormat":2},{"label":"ISurface","kind":22,"detail":"pub struct ISurface","insertText":"ISurface{}","insertTextFormat":1},{"label":"IVModelInfo","kind":22,"detail":"pub struct IVModelInfo","insertText":"IVModelInfo{}","insertTextFormat":1},{"label":"IEntityList","kind":22,"detail":"pub struct IEntityList","insertText":"IEntityList{}","insertTextFormat":1},{"label":"IMaterial","kind":22,"detail":"pub struct IMaterial","insertText":"IMaterial{}","insertTextFormat":1},{"label":"IMaterialSystem","kind":22,"detail":"struct IMaterialSystem","insertText":"IMaterialSystem{}","insertTextFormat":1},{"label":"ICvar","kind":22,"detail":"pub struct ICvar","insertText":"ICvar{}","insertTextFormat":1},{"label":"CDrawModelInfo","kind":22,"detail":"pub struct CDrawModelInfo","insertText":"CDrawModelInfo{studio_hdr:$1, hardware_data:$2, decals:$3, skin:$4, body:$5, hitbox_set:$6, renderable:$7}","insertTextFormat":2},{"label":"IStudioRender","kind":22,"detail":"struct IStudioRender","insertText":"IStudioRender{}","insertTextFormat":1},{"label":"WeaponData","kind":22,"detail":"struct WeaponData","insertText":"WeaponData{pad:$1, clean_name:$2, pud:$3, max_clip:$4, pid:$5, name:$6, pod:$7, w_type:$8, pzd:$9, full_auto:$10, phd:$11, damage:$12, armor_ratio:$13, bullets:$14, penetration:$15, pkd:$16, range:$17, range_modifier:$18, pnd:$19, has_silencer:$20}","insertTextFormat":2},{"label":"IWeaponSystem","kind":22,"detail":"struct IWeaponSystem","insertText":"IWeaponSystem{}","insertTextFormat":1},{"label":"PlayerInfo","kind":22,"detail":"pub struct PlayerInfo","insertText":"PlayerInfo{pad:$1, pod:$2, sz_name:$3, user_id:$4, sz_steam_id:$5, pud:$6, steam_id:$7, friends_sz_name:$8, fake_player:$9, hltv:$10, custom_files:$11, files_downloaded:$12}","insertTextFormat":2},{"label":"IVEngineClient","kind":22,"detail":"pub struct IVEngineClient","insertText":"IVEngineClient{}","insertTextFormat":1},{"label":"IBaseClientDLL","kind":22,"detail":"pub struct IBaseClientDLL","insertText":"IBaseClientDLL{}","insertTextFormat":1},{"label":"IInputSystem","kind":22,"detail":"pub struct IInputSystem","insertText":"IInputSystem{}","insertTextFormat":1},{"label":"IVDebugOverlay","kind":22,"detail":"pub struct IVDebugOverlay","insertText":"IVDebugOverlay{}","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664319919}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/I_weapon_system.v","diagnostics":[]}},"timestamp":1664319919}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/I_weapon_system.v","diagnostics":[]}},"timestamp":1664319919}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/I_weapon_system.v","diagnostics":[]}},"timestamp":1664319920}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":65,"method":"textDocument/completion","params":{"position":{"line":4,"character":4},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/I_weapon_system.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664319920}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":65,"result":[]},"timestamp":1664319920}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/I_weapon_system.v","diagnostics":[]}},"timestamp":1664319920}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":66,"method":"textDocument/completion","params":{"position":{"line":49,"character":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/I_weapon_system.v"},"context":{"triggerKind":1}}},"timestamp":1664319925}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":66,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"CCLientClass","kind":22,"detail":"struct CCLientClass","insertText":"CCLientClass{create_fn:$1, create_event_fn:$2, network_name:$3, recvtable_ptr:$4, next_ptr:$5, class_id:$6}","insertTextFormat":2},{"label":"Entity_t","kind":22,"detail":"pub struct Entity_t","insertText":"Entity_t{}","insertTextFormat":1},{"label":"IClientUnknown","kind":22,"detail":"struct IClientUnknown","insertText":"IClientUnknown{}","insertTextFormat":1},{"label":"IClientRenderable","kind":22,"detail":"struct IClientRenderable","insertText":"IClientRenderable{}","insertTextFormat":1},{"label":"Weapon_t","kind":22,"detail":"pub struct Weapon_t","insertText":"Weapon_t{}","insertTextFormat":1},{"label":"Player","kind":22,"detail":"pub struct Player","insertText":"Player{}","insertTextFormat":1},{"label":"Item","kind":22,"detail":"struct Item","insertText":"Item{}","insertTextFormat":1},{"label":"Viewmodel","kind":22,"detail":"pub struct Viewmodel","insertText":"Viewmodel{}","insertTextFormat":1},{"label":"contents_solid","kind":6,"detail":"pub const contents_solid int","insertText":"contents_solid","insertTextFormat":1},{"label":"contents_moveable","kind":6,"detail":"pub const contents_moveable int","insertText":"contents_moveable","insertTextFormat":1},{"label":"contents_monsterclip","kind":6,"detail":"pub const contents_monsterclip int","insertText":"contents_monsterclip","insertTextFormat":1},{"label":"contents_window","kind":6,"detail":"pub const contents_window int","insertText":"contents_window","insertTextFormat":1},{"label":"contents_debris","kind":6,"detail":"pub const contents_debris int","insertText":"contents_debris","insertTextFormat":1},{"label":"contents_hitbox","kind":6,"detail":"pub const contents_hitbox int","insertText":"contents_hitbox","insertTextFormat":1},{"label":"contents_grate","kind":6,"detail":"pub const contents_grate int","insertText":"contents_grate","insertTextFormat":1},{"label":"contents_ignore_nodraw_opaque","kind":6,"detail":"pub const contents_ignore_nodraw_opaque int","insertText":"contents_ignore_nodraw_opaque","insertTextFormat":1},{"label":"contents_opaque","kind":6,"detail":"pub const contents_opaque int","insertText":"contents_opaque","insertTextFormat":1},{"label":"mask_shot","kind":6,"detail":"pub const mask_shot","insertText":"mask_shot","insertTextFormat":1},{"label":"mask_opaque","kind":6,"detail":"pub const mask_opaque","insertText":"mask_opaque","insertTextFormat":1},{"label":"mask_visible","kind":6,"detail":"pub const mask_visible","insertText":"mask_visible","insertTextFormat":1},{"label":"CTraceFilter","kind":22,"detail":"pub struct CTraceFilter","insertText":"CTraceFilter{v_table:$1, p_skip:$2}","insertTextFormat":2},{"label":"CSurface","kind":22,"detail":"pub struct CSurface","insertText":"CSurface{name:$1, surface_prop:$2, flags:$3}","insertTextFormat":2},{"label":"CGameTrace","kind":22,"detail":"pub struct CGameTrace","insertText":"CGameTrace{start_pos:$1, end_pos:$2, pad:$3, fraction:$4, contents:$5, disp_flags:$6, all_solid:$7, start_solid:$8, pod:$9, surface:$10, hit_group:$11, pud:$12, hit_entity:$13, hitbox:$14}","insertTextFormat":2},{"label":"Ray","kind":22,"detail":"pub struct Ray","insertText":"Ray{start:$1, pad:$2, delta:$3, pod:$4, is_ray:$5, is_swept:$6}","insertTextFormat":2},{"label":"IEngineTrace","kind":22,"detail":"pub struct IEngineTrace","insertText":"IEngineTrace{}","insertTextFormat":1},{"label":"CGlobalVarsBase","kind":22,"detail":"pub struct CGlobalVarsBase","insertText":"CGlobalVarsBase{realtime:$1, framecount:$2, absoluteframetime:$3, absoluteframestarttimestddev:$4, curtime:$5, frametime:$6, max_clients:$7, tickcount:$8, interval_per_tick:$9, interpolation_amount:$10, sim_ticks_this_frame:$11, network_protocol:$12, p_save_data:$13, bclient:$14, bremoteclient:$15, timestamp_networking_base:$16, timestamp_randomize_window:$17}","insertTextFormat":2},{"label":"msg_c","kind":3,"detail":"fn msg_c(with_color Color, and_text string)","insertText":"msg_c($0, $1)","insertTextFormat":2},{"label":"msg","kind":3,"detail":"fn msg(with_text string)","insertText":"msg($0)","insertTextFormat":2},{"label":"ISurface","kind":22,"detail":"pub struct ISurface","insertText":"ISurface{}","insertTextFormat":1},{"label":"IVModelInfo","kind":22,"detail":"pub struct IVModelInfo","insertText":"IVModelInfo{}","insertTextFormat":1},{"label":"IEntityList","kind":22,"detail":"pub struct IEntityList","insertText":"IEntityList{}","insertTextFormat":1},{"label":"IMaterial","kind":22,"detail":"pub struct IMaterial","insertText":"IMaterial{}","insertTextFormat":1},{"label":"IMaterialSystem","kind":22,"detail":"struct IMaterialSystem","insertText":"IMaterialSystem{}","insertTextFormat":1},{"label":"ICvar","kind":22,"detail":"pub struct ICvar","insertText":"ICvar{}","insertTextFormat":1},{"label":"CDrawModelInfo","kind":22,"detail":"pub struct CDrawModelInfo","insertText":"CDrawModelInfo{studio_hdr:$1, hardware_data:$2, decals:$3, skin:$4, body:$5, hitbox_set:$6, renderable:$7}","insertTextFormat":2},{"label":"IStudioRender","kind":22,"detail":"struct IStudioRender","insertText":"IStudioRender{}","insertTextFormat":1},{"label":"WeaponData","kind":22,"detail":"pub struct WeaponData","insertText":"WeaponData{pad:$1, clean_name:$2, pud:$3, max_clip:$4, pid:$5, name:$6, pod:$7, w_type:$8, pzd:$9, full_auto:$10, phd:$11, damage:$12, armor_ratio:$13, bullets:$14, penetration:$15, pkd:$16, range:$17, range_modifier:$18, pnd:$19, has_silencer:$20}","insertTextFormat":2},{"label":"IWeaponSystem","kind":22,"detail":"struct IWeaponSystem","insertText":"IWeaponSystem{}","insertTextFormat":1},{"label":"PlayerInfo","kind":22,"detail":"pub struct PlayerInfo","insertText":"PlayerInfo{pad:$1, pod:$2, sz_name:$3, user_id:$4, sz_steam_id:$5, pud:$6, steam_id:$7, friends_sz_name:$8, fake_player:$9, hltv:$10, custom_files:$11, files_downloaded:$12}","insertTextFormat":2},{"label":"IVEngineClient","kind":22,"detail":"pub struct IVEngineClient","insertText":"IVEngineClient{}","insertTextFormat":1},{"label":"IBaseClientDLL","kind":22,"detail":"pub struct IBaseClientDLL","insertText":"IBaseClientDLL{}","insertTextFormat":1},{"label":"IInputSystem","kind":22,"detail":"pub struct IInputSystem","insertText":"IInputSystem{}","insertTextFormat":1},{"label":"IVDebugOverlay","kind":22,"detail":"pub struct IVDebugOverlay","insertText":"IVDebugOverlay{}","insertTextFormat":1},{"label":"raw_name","kind":6,"detail":"mut raw_name string","insertText":"raw_name","insertTextFormat":1},{"label":"cleaned_name","kind":6,"detail":"mut cleaned_name string","insertText":"cleaned_name","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664319925}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/I_weapon_system.v","diagnostics":[]}},"timestamp":1664319925}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/I_weapon_system.v","diagnostics":[]}},"timestamp":1664319925}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":67,"method":"textDocument/completion","params":{"position":{"line":49,"character":4},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/I_weapon_system.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664319925}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":67,"result":[]},"timestamp":1664319925}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/I_weapon_system.v","diagnostics":[]}},"timestamp":1664319925}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/I_weapon_system.v","diagnostics":[]}},"timestamp":1664319929}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":68,"method":"textDocument/completion","params":{"position":{"line":434,"character":11},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/valve_defs.v"},"context":{"triggerKind":1}}},"timestamp":1664319933}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":68,"result":[{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"CCLientClass","kind":22,"detail":"struct CCLientClass","insertText":"CCLientClass{create_fn:$1, create_event_fn:$2, network_name:$3, recvtable_ptr:$4, next_ptr:$5, class_id:$6}","insertTextFormat":2},{"label":"Entity_t","kind":22,"detail":"pub struct Entity_t","insertText":"Entity_t{}","insertTextFormat":1},{"label":"IClientUnknown","kind":22,"detail":"struct IClientUnknown","insertText":"IClientUnknown{}","insertTextFormat":1},{"label":"IClientRenderable","kind":22,"detail":"struct IClientRenderable","insertText":"IClientRenderable{}","insertTextFormat":1},{"label":"Weapon_t","kind":22,"detail":"pub struct Weapon_t","insertText":"Weapon_t{}","insertTextFormat":1},{"label":"Player","kind":22,"detail":"pub struct Player","insertText":"Player{}","insertTextFormat":1},{"label":"Item","kind":22,"detail":"struct Item","insertText":"Item{}","insertTextFormat":1},{"label":"Viewmodel","kind":22,"detail":"pub struct Viewmodel","insertText":"Viewmodel{}","insertTextFormat":1},{"label":"contents_solid","kind":6,"detail":"pub const contents_solid int","insertText":"contents_solid","insertTextFormat":1},{"label":"contents_moveable","kind":6,"detail":"pub const contents_moveable int","insertText":"contents_moveable","insertTextFormat":1},{"label":"contents_monsterclip","kind":6,"detail":"pub const contents_monsterclip int","insertText":"contents_monsterclip","insertTextFormat":1},{"label":"contents_window","kind":6,"detail":"pub const contents_window int","insertText":"contents_window","insertTextFormat":1},{"label":"contents_debris","kind":6,"detail":"pub const contents_debris int","insertText":"contents_debris","insertTextFormat":1},{"label":"contents_hitbox","kind":6,"detail":"pub const contents_hitbox int","insertText":"contents_hitbox","insertTextFormat":1},{"label":"contents_grate","kind":6,"detail":"pub const contents_grate int","insertText":"contents_grate","insertTextFormat":1},{"label":"contents_ignore_nodraw_opaque","kind":6,"detail":"pub const contents_ignore_nodraw_opaque int","insertText":"contents_ignore_nodraw_opaque","insertTextFormat":1},{"label":"contents_opaque","kind":6,"detail":"pub const contents_opaque int","insertText":"contents_opaque","insertTextFormat":1},{"label":"mask_shot","kind":6,"detail":"pub const mask_shot","insertText":"mask_shot","insertTextFormat":1},{"label":"mask_opaque","kind":6,"detail":"pub const mask_opaque","insertText":"mask_opaque","insertTextFormat":1},{"label":"mask_visible","kind":6,"detail":"pub const mask_visible","insertText":"mask_visible","insertTextFormat":1},{"label":"CTraceFilter","kind":22,"detail":"pub struct CTraceFilter","insertText":"CTraceFilter{v_table:$1, p_skip:$2}","insertTextFormat":2},{"label":"CSurface","kind":22,"detail":"pub struct CSurface","insertText":"CSurface{name:$1, surface_prop:$2, flags:$3}","insertTextFormat":2},{"label":"CGameTrace","kind":22,"detail":"pub struct CGameTrace","insertText":"CGameTrace{start_pos:$1, end_pos:$2, pad:$3, fraction:$4, contents:$5, disp_flags:$6, all_solid:$7, start_solid:$8, pod:$9, surface:$10, hit_group:$11, pud:$12, hit_entity:$13, hitbox:$14}","insertTextFormat":2},{"label":"Ray","kind":22,"detail":"pub struct Ray","insertText":"Ray{start:$1, pad:$2, delta:$3, pod:$4, is_ray:$5, is_swept:$6}","insertTextFormat":2},{"label":"IEngineTrace","kind":22,"detail":"pub struct IEngineTrace","insertText":"IEngineTrace{}","insertTextFormat":1},{"label":"CGlobalVarsBase","kind":22,"detail":"pub struct CGlobalVarsBase","insertText":"CGlobalVarsBase{realtime:$1, framecount:$2, absoluteframetime:$3, absoluteframestarttimestddev:$4, curtime:$5, frametime:$6, max_clients:$7, tickcount:$8, interval_per_tick:$9, interpolation_amount:$10, sim_ticks_this_frame:$11, network_protocol:$12, p_save_data:$13, bclient:$14, bremoteclient:$15, timestamp_networking_base:$16, timestamp_randomize_window:$17}","insertTextFormat":2},{"label":"msg_c","kind":3,"detail":"fn msg_c(with_color Color, and_text string)","insertText":"msg_c($0, $1)","insertTextFormat":2},{"label":"msg","kind":3,"detail":"fn msg(with_text string)","insertText":"msg($0)","insertTextFormat":2},{"label":"ISurface","kind":22,"detail":"pub struct ISurface","insertText":"ISurface{}","insertTextFormat":1},{"label":"IVModelInfo","kind":22,"detail":"pub struct IVModelInfo","insertText":"IVModelInfo{}","insertTextFormat":1},{"label":"IEntityList","kind":22,"detail":"pub struct IEntityList","insertText":"IEntityList{}","insertTextFormat":1},{"label":"IMaterial","kind":22,"detail":"pub struct IMaterial","insertText":"IMaterial{}","insertTextFormat":1},{"label":"IMaterialSystem","kind":22,"detail":"struct IMaterialSystem","insertText":"IMaterialSystem{}","insertTextFormat":1},{"label":"ICvar","kind":22,"detail":"pub struct ICvar","insertText":"ICvar{}","insertTextFormat":1},{"label":"CDrawModelInfo","kind":22,"detail":"pub struct CDrawModelInfo","insertText":"CDrawModelInfo{studio_hdr:$1, hardware_data:$2, decals:$3, skin:$4, body:$5, hitbox_set:$6, renderable:$7}","insertTextFormat":2},{"label":"IStudioRender","kind":22,"detail":"struct IStudioRender","insertText":"IStudioRender{}","insertTextFormat":1},{"label":"WeaponData","kind":22,"detail":"pub struct WeaponData","insertText":"WeaponData{pad:$1, clean_name:$2, pud:$3, max_clip:$4, pid:$5, name:$6, pod:$7, w_type:$8, pzd:$9, full_auto:$10, phd:$11, damage:$12, armor_ratio:$13, bullets:$14, penetration:$15, pkd:$16, range:$17, range_modifier:$18, pnd:$19, has_silencer:$20}","insertTextFormat":2},{"label":"IWeaponSystem","kind":22,"detail":"pub struct IWeaponSystem","insertText":"IWeaponSystem{}","insertTextFormat":1},{"label":"PlayerInfo","kind":22,"detail":"pub struct PlayerInfo","insertText":"PlayerInfo{pad:$1, pod:$2, sz_name:$3, user_id:$4, sz_steam_id:$5, pud:$6, steam_id:$7, friends_sz_name:$8, fake_player:$9, hltv:$10, custom_files:$11, files_downloaded:$12}","insertTextFormat":2},{"label":"IVEngineClient","kind":22,"detail":"pub struct IVEngineClient","insertText":"IVEngineClient{}","insertTextFormat":1},{"label":"IBaseClientDLL","kind":22,"detail":"pub struct IBaseClientDLL","insertText":"IBaseClientDLL{}","insertTextFormat":1},{"label":"IInputSystem","kind":22,"detail":"pub struct IInputSystem","insertText":"IInputSystem{}","insertTextFormat":1},{"label":"IVDebugOverlay","kind":22,"detail":"pub struct IVDebugOverlay","insertText":"IVDebugOverlay{}","insertTextFormat":1},{"label":"raw_name","kind":6,"detail":"mut raw_name string","insertText":"raw_name","insertTextFormat":1},{"label":"cleaned_name","kind":6,"detail":"mut cleaned_name string","insertText":"cleaned_name","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664319933}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/valve_defs.v","diagnostics":[]}},"timestamp":1664319933}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/valve_defs.v","diagnostics":[]}},"timestamp":1664319934}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":69,"method":"textDocument/completion","params":{"position":{"line":439,"character":13},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/valve_defs.v"},"context":{"triggerKind":1}}},"timestamp":1664319935}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":69,"result":[{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"CCLientClass","kind":22,"detail":"struct CCLientClass","insertText":"CCLientClass{create_fn:$1, create_event_fn:$2, network_name:$3, recvtable_ptr:$4, next_ptr:$5, class_id:$6}","insertTextFormat":2},{"label":"Entity_t","kind":22,"detail":"pub struct Entity_t","insertText":"Entity_t{}","insertTextFormat":1},{"label":"IClientUnknown","kind":22,"detail":"struct IClientUnknown","insertText":"IClientUnknown{}","insertTextFormat":1},{"label":"IClientRenderable","kind":22,"detail":"struct IClientRenderable","insertText":"IClientRenderable{}","insertTextFormat":1},{"label":"Weapon_t","kind":22,"detail":"pub struct Weapon_t","insertText":"Weapon_t{}","insertTextFormat":1},{"label":"Player","kind":22,"detail":"pub struct Player","insertText":"Player{}","insertTextFormat":1},{"label":"Item","kind":22,"detail":"struct Item","insertText":"Item{}","insertTextFormat":1},{"label":"Viewmodel","kind":22,"detail":"pub struct Viewmodel","insertText":"Viewmodel{}","insertTextFormat":1},{"label":"contents_solid","kind":6,"detail":"pub const contents_solid int","insertText":"contents_solid","insertTextFormat":1},{"label":"contents_moveable","kind":6,"detail":"pub const contents_moveable int","insertText":"contents_moveable","insertTextFormat":1},{"label":"contents_monsterclip","kind":6,"detail":"pub const contents_monsterclip int","insertText":"contents_monsterclip","insertTextFormat":1},{"label":"contents_window","kind":6,"detail":"pub const contents_window int","insertText":"contents_window","insertTextFormat":1},{"label":"contents_debris","kind":6,"detail":"pub const contents_debris int","insertText":"contents_debris","insertTextFormat":1},{"label":"contents_hitbox","kind":6,"detail":"pub const contents_hitbox int","insertText":"contents_hitbox","insertTextFormat":1},{"label":"contents_grate","kind":6,"detail":"pub const contents_grate int","insertText":"contents_grate","insertTextFormat":1},{"label":"contents_ignore_nodraw_opaque","kind":6,"detail":"pub const contents_ignore_nodraw_opaque int","insertText":"contents_ignore_nodraw_opaque","insertTextFormat":1},{"label":"contents_opaque","kind":6,"detail":"pub const contents_opaque int","insertText":"contents_opaque","insertTextFormat":1},{"label":"mask_shot","kind":6,"detail":"pub const mask_shot","insertText":"mask_shot","insertTextFormat":1},{"label":"mask_opaque","kind":6,"detail":"pub const mask_opaque","insertText":"mask_opaque","insertTextFormat":1},{"label":"mask_visible","kind":6,"detail":"pub const mask_visible","insertText":"mask_visible","insertTextFormat":1},{"label":"CTraceFilter","kind":22,"detail":"pub struct CTraceFilter","insertText":"CTraceFilter{v_table:$1, p_skip:$2}","insertTextFormat":2},{"label":"CSurface","kind":22,"detail":"pub struct CSurface","insertText":"CSurface{name:$1, surface_prop:$2, flags:$3}","insertTextFormat":2},{"label":"CGameTrace","kind":22,"detail":"pub struct CGameTrace","insertText":"CGameTrace{start_pos:$1, end_pos:$2, pad:$3, fraction:$4, contents:$5, disp_flags:$6, all_solid:$7, start_solid:$8, pod:$9, surface:$10, hit_group:$11, pud:$12, hit_entity:$13, hitbox:$14}","insertTextFormat":2},{"label":"Ray","kind":22,"detail":"pub struct Ray","insertText":"Ray{start:$1, pad:$2, delta:$3, pod:$4, is_ray:$5, is_swept:$6}","insertTextFormat":2},{"label":"IEngineTrace","kind":22,"detail":"pub struct IEngineTrace","insertText":"IEngineTrace{}","insertTextFormat":1},{"label":"CGlobalVarsBase","kind":22,"detail":"pub struct CGlobalVarsBase","insertText":"CGlobalVarsBase{realtime:$1, framecount:$2, absoluteframetime:$3, absoluteframestarttimestddev:$4, curtime:$5, frametime:$6, max_clients:$7, tickcount:$8, interval_per_tick:$9, interpolation_amount:$10, sim_ticks_this_frame:$11, network_protocol:$12, p_save_data:$13, bclient:$14, bremoteclient:$15, timestamp_networking_base:$16, timestamp_randomize_window:$17}","insertTextFormat":2},{"label":"msg_c","kind":3,"detail":"fn msg_c(with_color Color, and_text string)","insertText":"msg_c($0, $1)","insertTextFormat":2},{"label":"msg","kind":3,"detail":"fn msg(with_text string)","insertText":"msg($0)","insertTextFormat":2},{"label":"ISurface","kind":22,"detail":"pub struct ISurface","insertText":"ISurface{}","insertTextFormat":1},{"label":"IVModelInfo","kind":22,"detail":"pub struct IVModelInfo","insertText":"IVModelInfo{}","insertTextFormat":1},{"label":"IEntityList","kind":22,"detail":"pub struct IEntityList","insertText":"IEntityList{}","insertTextFormat":1},{"label":"IMaterial","kind":22,"detail":"pub struct IMaterial","insertText":"IMaterial{}","insertTextFormat":1},{"label":"IMaterialSystem","kind":22,"detail":"struct IMaterialSystem","insertText":"IMaterialSystem{}","insertTextFormat":1},{"label":"ICvar","kind":22,"detail":"pub struct ICvar","insertText":"ICvar{}","insertTextFormat":1},{"label":"CDrawModelInfo","kind":22,"detail":"pub struct CDrawModelInfo","insertText":"CDrawModelInfo{studio_hdr:$1, hardware_data:$2, decals:$3, skin:$4, body:$5, hitbox_set:$6, renderable:$7}","insertTextFormat":2},{"label":"IStudioRender","kind":22,"detail":"struct IStudioRender","insertText":"IStudioRender{}","insertTextFormat":1},{"label":"WeaponData","kind":22,"detail":"pub struct WeaponData","insertText":"WeaponData{pad:$1, clean_name:$2, pud:$3, max_clip:$4, pid:$5, name:$6, pod:$7, w_type:$8, pzd:$9, full_auto:$10, phd:$11, damage:$12, armor_ratio:$13, bullets:$14, penetration:$15, pkd:$16, range:$17, range_modifier:$18, pnd:$19, has_silencer:$20}","insertTextFormat":2},{"label":"IWeaponSystem","kind":22,"detail":"pub struct IWeaponSystem","insertText":"IWeaponSystem{}","insertTextFormat":1},{"label":"PlayerInfo","kind":22,"detail":"pub struct PlayerInfo","insertText":"PlayerInfo{pad:$1, pod:$2, sz_name:$3, user_id:$4, sz_steam_id:$5, pud:$6, steam_id:$7, friends_sz_name:$8, fake_player:$9, hltv:$10, custom_files:$11, files_downloaded:$12}","insertTextFormat":2},{"label":"IVEngineClient","kind":22,"detail":"pub struct IVEngineClient","insertText":"IVEngineClient{}","insertTextFormat":1},{"label":"IBaseClientDLL","kind":22,"detail":"pub struct IBaseClientDLL","insertText":"IBaseClientDLL{}","insertTextFormat":1},{"label":"IInputSystem","kind":22,"detail":"pub struct IInputSystem","insertText":"IInputSystem{}","insertTextFormat":1},{"label":"IVDebugOverlay","kind":22,"detail":"pub struct IVDebugOverlay","insertText":"IVDebugOverlay{}","insertTextFormat":1},{"label":"raw_name","kind":6,"detail":"mut raw_name string","insertText":"raw_name","insertTextFormat":1},{"label":"cleaned_name","kind":6,"detail":"mut cleaned_name string","insertText":"cleaned_name","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664319935}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/valve_defs.v","diagnostics":[]}},"timestamp":1664319935}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/valve_defs.v","diagnostics":[]}},"timestamp":1664319936}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/valve_defs.v","diagnostics":[]}},"timestamp":1664319939}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/valve_defs.v","diagnostics":[]}},"timestamp":1664319941}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":70,"method":"textDocument/completion","params":{"position":{"line":439,"character":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/valve_defs.v"},"context":{"triggerKind":1}}},"timestamp":1664319945}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":70,"result":[{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"CCLientClass","kind":22,"detail":"struct CCLientClass","insertText":"CCLientClass{create_fn:$1, create_event_fn:$2, network_name:$3, recvtable_ptr:$4, next_ptr:$5, class_id:$6}","insertTextFormat":2},{"label":"Entity_t","kind":22,"detail":"pub struct Entity_t","insertText":"Entity_t{}","insertTextFormat":1},{"label":"IClientUnknown","kind":22,"detail":"struct IClientUnknown","insertText":"IClientUnknown{}","insertTextFormat":1},{"label":"IClientRenderable","kind":22,"detail":"struct IClientRenderable","insertText":"IClientRenderable{}","insertTextFormat":1},{"label":"Weapon_t","kind":22,"detail":"pub struct Weapon_t","insertText":"Weapon_t{}","insertTextFormat":1},{"label":"Player","kind":22,"detail":"pub struct Player","insertText":"Player{}","insertTextFormat":1},{"label":"Item","kind":22,"detail":"struct Item","insertText":"Item{}","insertTextFormat":1},{"label":"Viewmodel","kind":22,"detail":"pub struct Viewmodel","insertText":"Viewmodel{}","insertTextFormat":1},{"label":"contents_solid","kind":6,"detail":"pub const contents_solid int","insertText":"contents_solid","insertTextFormat":1},{"label":"contents_moveable","kind":6,"detail":"pub const contents_moveable int","insertText":"contents_moveable","insertTextFormat":1},{"label":"contents_monsterclip","kind":6,"detail":"pub const contents_monsterclip int","insertText":"contents_monsterclip","insertTextFormat":1},{"label":"contents_window","kind":6,"detail":"pub const contents_window int","insertText":"contents_window","insertTextFormat":1},{"label":"contents_debris","kind":6,"detail":"pub const contents_debris int","insertText":"contents_debris","insertTextFormat":1},{"label":"contents_hitbox","kind":6,"detail":"pub const contents_hitbox int","insertText":"contents_hitbox","insertTextFormat":1},{"label":"contents_grate","kind":6,"detail":"pub const contents_grate int","insertText":"contents_grate","insertTextFormat":1},{"label":"contents_ignore_nodraw_opaque","kind":6,"detail":"pub const contents_ignore_nodraw_opaque int","insertText":"contents_ignore_nodraw_opaque","insertTextFormat":1},{"label":"contents_opaque","kind":6,"detail":"pub const contents_opaque int","insertText":"contents_opaque","insertTextFormat":1},{"label":"mask_shot","kind":6,"detail":"pub const mask_shot","insertText":"mask_shot","insertTextFormat":1},{"label":"mask_opaque","kind":6,"detail":"pub const mask_opaque","insertText":"mask_opaque","insertTextFormat":1},{"label":"mask_visible","kind":6,"detail":"pub const mask_visible","insertText":"mask_visible","insertTextFormat":1},{"label":"CTraceFilter","kind":22,"detail":"pub struct CTraceFilter","insertText":"CTraceFilter{v_table:$1, p_skip:$2}","insertTextFormat":2},{"label":"CSurface","kind":22,"detail":"pub struct CSurface","insertText":"CSurface{name:$1, surface_prop:$2, flags:$3}","insertTextFormat":2},{"label":"CGameTrace","kind":22,"detail":"pub struct CGameTrace","insertText":"CGameTrace{start_pos:$1, end_pos:$2, pad:$3, fraction:$4, contents:$5, disp_flags:$6, all_solid:$7, start_solid:$8, pod:$9, surface:$10, hit_group:$11, pud:$12, hit_entity:$13, hitbox:$14}","insertTextFormat":2},{"label":"Ray","kind":22,"detail":"pub struct Ray","insertText":"Ray{start:$1, pad:$2, delta:$3, pod:$4, is_ray:$5, is_swept:$6}","insertTextFormat":2},{"label":"IEngineTrace","kind":22,"detail":"pub struct IEngineTrace","insertText":"IEngineTrace{}","insertTextFormat":1},{"label":"CGlobalVarsBase","kind":22,"detail":"pub struct CGlobalVarsBase","insertText":"CGlobalVarsBase{realtime:$1, framecount:$2, absoluteframetime:$3, absoluteframestarttimestddev:$4, curtime:$5, frametime:$6, max_clients:$7, tickcount:$8, interval_per_tick:$9, interpolation_amount:$10, sim_ticks_this_frame:$11, network_protocol:$12, p_save_data:$13, bclient:$14, bremoteclient:$15, timestamp_networking_base:$16, timestamp_randomize_window:$17}","insertTextFormat":2},{"label":"msg_c","kind":3,"detail":"fn msg_c(with_color Color, and_text string)","insertText":"msg_c($0, $1)","insertTextFormat":2},{"label":"msg","kind":3,"detail":"fn msg(with_text string)","insertText":"msg($0)","insertTextFormat":2},{"label":"ISurface","kind":22,"detail":"pub struct ISurface","insertText":"ISurface{}","insertTextFormat":1},{"label":"IVModelInfo","kind":22,"detail":"pub struct IVModelInfo","insertText":"IVModelInfo{}","insertTextFormat":1},{"label":"IEntityList","kind":22,"detail":"pub struct IEntityList","insertText":"IEntityList{}","insertTextFormat":1},{"label":"IMaterial","kind":22,"detail":"pub struct IMaterial","insertText":"IMaterial{}","insertTextFormat":1},{"label":"IMaterialSystem","kind":22,"detail":"struct IMaterialSystem","insertText":"IMaterialSystem{}","insertTextFormat":1},{"label":"ICvar","kind":22,"detail":"pub struct ICvar","insertText":"ICvar{}","insertTextFormat":1},{"label":"CDrawModelInfo","kind":22,"detail":"pub struct CDrawModelInfo","insertText":"CDrawModelInfo{studio_hdr:$1, hardware_data:$2, decals:$3, skin:$4, body:$5, hitbox_set:$6, renderable:$7}","insertTextFormat":2},{"label":"IStudioRender","kind":22,"detail":"struct IStudioRender","insertText":"IStudioRender{}","insertTextFormat":1},{"label":"WeaponData","kind":22,"detail":"pub struct WeaponData","insertText":"WeaponData{pad:$1, clean_name:$2, pud:$3, max_clip:$4, pid:$5, name:$6, pod:$7, w_type:$8, pzd:$9, full_auto:$10, phd:$11, damage:$12, armor_ratio:$13, bullets:$14, penetration:$15, pkd:$16, range:$17, range_modifier:$18, pnd:$19, has_silencer:$20}","insertTextFormat":2},{"label":"IWeaponSystem","kind":22,"detail":"pub struct IWeaponSystem","insertText":"IWeaponSystem{}","insertTextFormat":1},{"label":"PlayerInfo","kind":22,"detail":"pub struct PlayerInfo","insertText":"PlayerInfo{pad:$1, pod:$2, sz_name:$3, user_id:$4, sz_steam_id:$5, pud:$6, steam_id:$7, friends_sz_name:$8, fake_player:$9, hltv:$10, custom_files:$11, files_downloaded:$12}","insertTextFormat":2},{"label":"IVEngineClient","kind":22,"detail":"pub struct IVEngineClient","insertText":"IVEngineClient{}","insertTextFormat":1},{"label":"IBaseClientDLL","kind":22,"detail":"pub struct IBaseClientDLL","insertText":"IBaseClientDLL{}","insertTextFormat":1},{"label":"IInputSystem","kind":22,"detail":"pub struct IInputSystem","insertText":"IInputSystem{}","insertTextFormat":1},{"label":"IVDebugOverlay","kind":22,"detail":"pub struct IVDebugOverlay","insertText":"IVDebugOverlay{}","insertTextFormat":1},{"label":"raw_name","kind":6,"detail":"mut raw_name string","insertText":"raw_name","insertTextFormat":1},{"label":"cleaned_name","kind":6,"detail":"mut cleaned_name string","insertText":"cleaned_name","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664319945}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/valve_defs.v","diagnostics":[]}},"timestamp":1664319945}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/valve_defs.v","diagnostics":[]}},"timestamp":1664319945}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":71,"method":"textDocument/completion","params":{"position":{"line":439,"character":4},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/valve_defs.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664319945}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":71,"result":[]},"timestamp":1664319945}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/valve_defs.v","diagnostics":[]}},"timestamp":1664319945}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/valve_defs.v","diagnostics":[]}},"timestamp":1664319947}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/valve_defs.v","diagnostics":[]}},"timestamp":1664319948}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/valve_defs.v","diagnostics":[]}},"timestamp":1664319951}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/valve_defs.v","diagnostics":[]}},"timestamp":1664319953}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":72,"method":"textDocument/completion","params":{"position":{"line":449,"character":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/valve_defs.v"},"context":{"triggerKind":1}}},"timestamp":1664319964}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":72,"result":[{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"Entity_t","kind":22,"detail":"pub struct Entity_t","insertText":"Entity_t{}","insertTextFormat":1},{"label":"IClientUnknown","kind":22,"detail":"struct IClientUnknown","insertText":"IClientUnknown{}","insertTextFormat":1},{"label":"IClientRenderable","kind":22,"detail":"struct IClientRenderable","insertText":"IClientRenderable{}","insertTextFormat":1},{"label":"Weapon_t","kind":22,"detail":"pub struct Weapon_t","insertText":"Weapon_t{}","insertTextFormat":1},{"label":"Player","kind":22,"detail":"pub struct Player","insertText":"Player{}","insertTextFormat":1},{"label":"Item","kind":22,"detail":"struct Item","insertText":"Item{}","insertTextFormat":1},{"label":"Viewmodel","kind":22,"detail":"pub struct Viewmodel","insertText":"Viewmodel{}","insertTextFormat":1},{"label":"contents_solid","kind":6,"detail":"pub const contents_solid int","insertText":"contents_solid","insertTextFormat":1},{"label":"contents_moveable","kind":6,"detail":"pub const contents_moveable int","insertText":"contents_moveable","insertTextFormat":1},{"label":"contents_monsterclip","kind":6,"detail":"pub const contents_monsterclip int","insertText":"contents_monsterclip","insertTextFormat":1},{"label":"contents_window","kind":6,"detail":"pub const contents_window int","insertText":"contents_window","insertTextFormat":1},{"label":"contents_debris","kind":6,"detail":"pub const contents_debris int","insertText":"contents_debris","insertTextFormat":1},{"label":"contents_hitbox","kind":6,"detail":"pub const contents_hitbox int","insertText":"contents_hitbox","insertTextFormat":1},{"label":"contents_grate","kind":6,"detail":"pub const contents_grate int","insertText":"contents_grate","insertTextFormat":1},{"label":"contents_ignore_nodraw_opaque","kind":6,"detail":"pub const contents_ignore_nodraw_opaque int","insertText":"contents_ignore_nodraw_opaque","insertTextFormat":1},{"label":"contents_opaque","kind":6,"detail":"pub const contents_opaque int","insertText":"contents_opaque","insertTextFormat":1},{"label":"mask_shot","kind":6,"detail":"pub const mask_shot","insertText":"mask_shot","insertTextFormat":1},{"label":"mask_opaque","kind":6,"detail":"pub const mask_opaque","insertText":"mask_opaque","insertTextFormat":1},{"label":"mask_visible","kind":6,"detail":"pub const mask_visible","insertText":"mask_visible","insertTextFormat":1},{"label":"CTraceFilter","kind":22,"detail":"pub struct CTraceFilter","insertText":"CTraceFilter{v_table:$1, p_skip:$2}","insertTextFormat":2},{"label":"CSurface","kind":22,"detail":"pub struct CSurface","insertText":"CSurface{name:$1, surface_prop:$2, flags:$3}","insertTextFormat":2},{"label":"CGameTrace","kind":22,"detail":"pub struct CGameTrace","insertText":"CGameTrace{start_pos:$1, end_pos:$2, pad:$3, fraction:$4, contents:$5, disp_flags:$6, all_solid:$7, start_solid:$8, pod:$9, surface:$10, hit_group:$11, pud:$12, hit_entity:$13, hitbox:$14}","insertTextFormat":2},{"label":"Ray","kind":22,"detail":"pub struct Ray","insertText":"Ray{start:$1, pad:$2, delta:$3, pod:$4, is_ray:$5, is_swept:$6}","insertTextFormat":2},{"label":"IEngineTrace","kind":22,"detail":"pub struct IEngineTrace","insertText":"IEngineTrace{}","insertTextFormat":1},{"label":"CGlobalVarsBase","kind":22,"detail":"pub struct CGlobalVarsBase","insertText":"CGlobalVarsBase{realtime:$1, framecount:$2, absoluteframetime:$3, absoluteframestarttimestddev:$4, curtime:$5, frametime:$6, max_clients:$7, tickcount:$8, interval_per_tick:$9, interpolation_amount:$10, sim_ticks_this_frame:$11, network_protocol:$12, p_save_data:$13, bclient:$14, bremoteclient:$15, timestamp_networking_base:$16, timestamp_randomize_window:$17}","insertTextFormat":2},{"label":"msg_c","kind":3,"detail":"fn msg_c(with_color Color, and_text string)","insertText":"msg_c($0, $1)","insertTextFormat":2},{"label":"msg","kind":3,"detail":"fn msg(with_text string)","insertText":"msg($0)","insertTextFormat":2},{"label":"ISurface","kind":22,"detail":"pub struct ISurface","insertText":"ISurface{}","insertTextFormat":1},{"label":"IVModelInfo","kind":22,"detail":"pub struct IVModelInfo","insertText":"IVModelInfo{}","insertTextFormat":1},{"label":"IEntityList","kind":22,"detail":"pub struct IEntityList","insertText":"IEntityList{}","insertTextFormat":1},{"label":"IMaterial","kind":22,"detail":"pub struct IMaterial","insertText":"IMaterial{}","insertTextFormat":1},{"label":"IMaterialSystem","kind":22,"detail":"struct IMaterialSystem","insertText":"IMaterialSystem{}","insertTextFormat":1},{"label":"ICvar","kind":22,"detail":"pub struct ICvar","insertText":"ICvar{}","insertTextFormat":1},{"label":"CDrawModelInfo","kind":22,"detail":"pub struct CDrawModelInfo","insertText":"CDrawModelInfo{studio_hdr:$1, hardware_data:$2, decals:$3, skin:$4, body:$5, hitbox_set:$6, renderable:$7}","insertTextFormat":2},{"label":"IStudioRender","kind":22,"detail":"struct IStudioRender","insertText":"IStudioRender{}","insertTextFormat":1},{"label":"WeaponData","kind":22,"detail":"pub struct WeaponData","insertText":"WeaponData{pad:$1, clean_name:$2, pud:$3, max_clip:$4, pid:$5, name:$6, pod:$7, w_type:$8, pzd:$9, full_auto:$10, phd:$11, damage:$12, armor_ratio:$13, bullets:$14, penetration:$15, pkd:$16, range:$17, range_modifier:$18, pnd:$19, has_silencer:$20}","insertTextFormat":2},{"label":"IWeaponSystem","kind":22,"detail":"pub struct IWeaponSystem","insertText":"IWeaponSystem{}","insertTextFormat":1},{"label":"PlayerInfo","kind":22,"detail":"pub struct PlayerInfo","insertText":"PlayerInfo{pad:$1, pod:$2, sz_name:$3, user_id:$4, sz_steam_id:$5, pud:$6, steam_id:$7, friends_sz_name:$8, fake_player:$9, hltv:$10, custom_files:$11, files_downloaded:$12}","insertTextFormat":2},{"label":"IVEngineClient","kind":22,"detail":"pub struct IVEngineClient","insertText":"IVEngineClient{}","insertTextFormat":1},{"label":"IBaseClientDLL","kind":22,"detail":"pub struct IBaseClientDLL","insertText":"IBaseClientDLL{}","insertTextFormat":1},{"label":"IInputSystem","kind":22,"detail":"pub struct IInputSystem","insertText":"IInputSystem{}","insertTextFormat":1},{"label":"IVDebugOverlay","kind":22,"detail":"pub struct IVDebugOverlay","insertText":"IVDebugOverlay{}","insertTextFormat":1},{"label":"raw_name","kind":6,"detail":"mut raw_name string","insertText":"raw_name","insertTextFormat":1},{"label":"cleaned_name","kind":6,"detail":"mut cleaned_name string","insertText":"cleaned_name","insertTextFormat":1},{"label":"CCLientClass","kind":22,"detail":"pub struct CCLientClass","insertText":"CCLientClass{create_fn:$1, create_event_fn:$2, network_name:$3, recvtable_ptr:$4, next_ptr:$5, class_id:$6}","insertTextFormat":2},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664319964}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/valve_defs.v","diagnostics":[]}},"timestamp":1664319964}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/valve_defs.v","diagnostics":[]}},"timestamp":1664319964}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":73,"method":"textDocument/completion","params":{"position":{"line":449,"character":4},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/valve_defs.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664319965}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":73,"result":[]},"timestamp":1664319965}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/valve_defs.v","diagnostics":[]}},"timestamp":1664319965}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/valve_defs.v","diagnostics":[]}},"timestamp":1664319966}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/valve_defs.v","diagnostics":[{"range":{"start":{"line":449,"character":0},"end":{"line":449,"character":0}},"severity":1,"code":"","source":"","message":"wrong pub keyword usage","relatedInformation":[]}]}},"timestamp":1664319966}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/valve_defs.v","diagnostics":[]}},"timestamp":1664319970}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/valve_defs.v","diagnostics":[]}},"timestamp":1664319970}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":74,"method":"textDocument/completion","params":{"position":{"line":449,"character":2},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/valve_defs.v"},"context":{"triggerKind":1}}},"timestamp":1664319970}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":74,"result":[{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"Entity_t","kind":22,"detail":"pub struct Entity_t","insertText":"Entity_t{}","insertTextFormat":1},{"label":"IClientUnknown","kind":22,"detail":"struct IClientUnknown","insertText":"IClientUnknown{}","insertTextFormat":1},{"label":"IClientRenderable","kind":22,"detail":"struct IClientRenderable","insertText":"IClientRenderable{}","insertTextFormat":1},{"label":"Weapon_t","kind":22,"detail":"pub struct Weapon_t","insertText":"Weapon_t{}","insertTextFormat":1},{"label":"Player","kind":22,"detail":"pub struct Player","insertText":"Player{}","insertTextFormat":1},{"label":"Item","kind":22,"detail":"struct Item","insertText":"Item{}","insertTextFormat":1},{"label":"Viewmodel","kind":22,"detail":"pub struct Viewmodel","insertText":"Viewmodel{}","insertTextFormat":1},{"label":"contents_solid","kind":6,"detail":"pub const contents_solid int","insertText":"contents_solid","insertTextFormat":1},{"label":"contents_moveable","kind":6,"detail":"pub const contents_moveable int","insertText":"contents_moveable","insertTextFormat":1},{"label":"contents_monsterclip","kind":6,"detail":"pub const contents_monsterclip int","insertText":"contents_monsterclip","insertTextFormat":1},{"label":"contents_window","kind":6,"detail":"pub const contents_window int","insertText":"contents_window","insertTextFormat":1},{"label":"contents_debris","kind":6,"detail":"pub const contents_debris int","insertText":"contents_debris","insertTextFormat":1},{"label":"contents_hitbox","kind":6,"detail":"pub const contents_hitbox int","insertText":"contents_hitbox","insertTextFormat":1},{"label":"contents_grate","kind":6,"detail":"pub const contents_grate int","insertText":"contents_grate","insertTextFormat":1},{"label":"contents_ignore_nodraw_opaque","kind":6,"detail":"pub const contents_ignore_nodraw_opaque int","insertText":"contents_ignore_nodraw_opaque","insertTextFormat":1},{"label":"contents_opaque","kind":6,"detail":"pub const contents_opaque int","insertText":"contents_opaque","insertTextFormat":1},{"label":"mask_shot","kind":6,"detail":"pub const mask_shot","insertText":"mask_shot","insertTextFormat":1},{"label":"mask_opaque","kind":6,"detail":"pub const mask_opaque","insertText":"mask_opaque","insertTextFormat":1},{"label":"mask_visible","kind":6,"detail":"pub const mask_visible","insertText":"mask_visible","insertTextFormat":1},{"label":"CTraceFilter","kind":22,"detail":"pub struct CTraceFilter","insertText":"CTraceFilter{v_table:$1, p_skip:$2}","insertTextFormat":2},{"label":"CSurface","kind":22,"detail":"pub struct CSurface","insertText":"CSurface{name:$1, surface_prop:$2, flags:$3}","insertTextFormat":2},{"label":"CGameTrace","kind":22,"detail":"pub struct CGameTrace","insertText":"CGameTrace{start_pos:$1, end_pos:$2, pad:$3, fraction:$4, contents:$5, disp_flags:$6, all_solid:$7, start_solid:$8, pod:$9, surface:$10, hit_group:$11, pud:$12, hit_entity:$13, hitbox:$14}","insertTextFormat":2},{"label":"Ray","kind":22,"detail":"pub struct Ray","insertText":"Ray{start:$1, pad:$2, delta:$3, pod:$4, is_ray:$5, is_swept:$6}","insertTextFormat":2},{"label":"IEngineTrace","kind":22,"detail":"pub struct IEngineTrace","insertText":"IEngineTrace{}","insertTextFormat":1},{"label":"CGlobalVarsBase","kind":22,"detail":"pub struct CGlobalVarsBase","insertText":"CGlobalVarsBase{realtime:$1, framecount:$2, absoluteframetime:$3, absoluteframestarttimestddev:$4, curtime:$5, frametime:$6, max_clients:$7, tickcount:$8, interval_per_tick:$9, interpolation_amount:$10, sim_ticks_this_frame:$11, network_protocol:$12, p_save_data:$13, bclient:$14, bremoteclient:$15, timestamp_networking_base:$16, timestamp_randomize_window:$17}","insertTextFormat":2},{"label":"msg_c","kind":3,"detail":"fn msg_c(with_color Color, and_text string)","insertText":"msg_c($0, $1)","insertTextFormat":2},{"label":"msg","kind":3,"detail":"fn msg(with_text string)","insertText":"msg($0)","insertTextFormat":2},{"label":"ISurface","kind":22,"detail":"pub struct ISurface","insertText":"ISurface{}","insertTextFormat":1},{"label":"IVModelInfo","kind":22,"detail":"pub struct IVModelInfo","insertText":"IVModelInfo{}","insertTextFormat":1},{"label":"IEntityList","kind":22,"detail":"pub struct IEntityList","insertText":"IEntityList{}","insertTextFormat":1},{"label":"IMaterial","kind":22,"detail":"pub struct IMaterial","insertText":"IMaterial{}","insertTextFormat":1},{"label":"IMaterialSystem","kind":22,"detail":"struct IMaterialSystem","insertText":"IMaterialSystem{}","insertTextFormat":1},{"label":"ICvar","kind":22,"detail":"pub struct ICvar","insertText":"ICvar{}","insertTextFormat":1},{"label":"CDrawModelInfo","kind":22,"detail":"pub struct CDrawModelInfo","insertText":"CDrawModelInfo{studio_hdr:$1, hardware_data:$2, decals:$3, skin:$4, body:$5, hitbox_set:$6, renderable:$7}","insertTextFormat":2},{"label":"IStudioRender","kind":22,"detail":"struct IStudioRender","insertText":"IStudioRender{}","insertTextFormat":1},{"label":"WeaponData","kind":22,"detail":"pub struct WeaponData","insertText":"WeaponData{pad:$1, clean_name:$2, pud:$3, max_clip:$4, pid:$5, name:$6, pod:$7, w_type:$8, pzd:$9, full_auto:$10, phd:$11, damage:$12, armor_ratio:$13, bullets:$14, penetration:$15, pkd:$16, range:$17, range_modifier:$18, pnd:$19, has_silencer:$20}","insertTextFormat":2},{"label":"IWeaponSystem","kind":22,"detail":"pub struct IWeaponSystem","insertText":"IWeaponSystem{}","insertTextFormat":1},{"label":"PlayerInfo","kind":22,"detail":"pub struct PlayerInfo","insertText":"PlayerInfo{pad:$1, pod:$2, sz_name:$3, user_id:$4, sz_steam_id:$5, pud:$6, steam_id:$7, friends_sz_name:$8, fake_player:$9, hltv:$10, custom_files:$11, files_downloaded:$12}","insertTextFormat":2},{"label":"IVEngineClient","kind":22,"detail":"pub struct IVEngineClient","insertText":"IVEngineClient{}","insertTextFormat":1},{"label":"IBaseClientDLL","kind":22,"detail":"pub struct IBaseClientDLL","insertText":"IBaseClientDLL{}","insertTextFormat":1},{"label":"IInputSystem","kind":22,"detail":"pub struct IInputSystem","insertText":"IInputSystem{}","insertTextFormat":1},{"label":"IVDebugOverlay","kind":22,"detail":"pub struct IVDebugOverlay","insertText":"IVDebugOverlay{}","insertTextFormat":1},{"label":"raw_name","kind":6,"detail":"mut raw_name string","insertText":"raw_name","insertTextFormat":1},{"label":"cleaned_name","kind":6,"detail":"mut cleaned_name string","insertText":"cleaned_name","insertTextFormat":1},{"label":"CCLientClass","kind":22,"detail":"pub struct CCLientClass","insertText":"CCLientClass{create_fn:$1, create_event_fn:$2, network_name:$3, recvtable_ptr:$4, next_ptr:$5, class_id:$6}","insertTextFormat":2},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664319970}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/valve_defs.v","diagnostics":[]}},"timestamp":1664319970}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/valve_defs.v","diagnostics":[]}},"timestamp":1664319970}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/valve_defs.v","diagnostics":[]}},"timestamp":1664319971}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/valve_defs.v","diagnostics":[]}},"timestamp":1664319971}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/valve_defs.v","diagnostics":[]}},"timestamp":1664319971}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/valve_defs.v","diagnostics":[]}},"timestamp":1664319971}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/valve_defs.v","diagnostics":[]}},"timestamp":1664319972}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/valve_defs.v","diagnostics":[]}},"timestamp":1664319972}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":75,"method":"textDocument/completion","params":{"position":{"line":111,"character":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/valve_defs.v"},"context":{"triggerKind":1}}},"timestamp":1664319979}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":75,"result":[{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"Entity_t","kind":22,"detail":"pub struct Entity_t","insertText":"Entity_t{}","insertTextFormat":1},{"label":"IClientUnknown","kind":22,"detail":"struct IClientUnknown","insertText":"IClientUnknown{}","insertTextFormat":1},{"label":"IClientRenderable","kind":22,"detail":"struct IClientRenderable","insertText":"IClientRenderable{}","insertTextFormat":1},{"label":"Weapon_t","kind":22,"detail":"pub struct Weapon_t","insertText":"Weapon_t{}","insertTextFormat":1},{"label":"Player","kind":22,"detail":"pub struct Player","insertText":"Player{}","insertTextFormat":1},{"label":"Item","kind":22,"detail":"struct Item","insertText":"Item{}","insertTextFormat":1},{"label":"Viewmodel","kind":22,"detail":"pub struct Viewmodel","insertText":"Viewmodel{}","insertTextFormat":1},{"label":"contents_solid","kind":6,"detail":"pub const contents_solid int","insertText":"contents_solid","insertTextFormat":1},{"label":"contents_moveable","kind":6,"detail":"pub const contents_moveable int","insertText":"contents_moveable","insertTextFormat":1},{"label":"contents_monsterclip","kind":6,"detail":"pub const contents_monsterclip int","insertText":"contents_monsterclip","insertTextFormat":1},{"label":"contents_window","kind":6,"detail":"pub const contents_window int","insertText":"contents_window","insertTextFormat":1},{"label":"contents_debris","kind":6,"detail":"pub const contents_debris int","insertText":"contents_debris","insertTextFormat":1},{"label":"contents_hitbox","kind":6,"detail":"pub const contents_hitbox int","insertText":"contents_hitbox","insertTextFormat":1},{"label":"contents_grate","kind":6,"detail":"pub const contents_grate int","insertText":"contents_grate","insertTextFormat":1},{"label":"contents_ignore_nodraw_opaque","kind":6,"detail":"pub const contents_ignore_nodraw_opaque int","insertText":"contents_ignore_nodraw_opaque","insertTextFormat":1},{"label":"contents_opaque","kind":6,"detail":"pub const contents_opaque int","insertText":"contents_opaque","insertTextFormat":1},{"label":"mask_shot","kind":6,"detail":"pub const mask_shot","insertText":"mask_shot","insertTextFormat":1},{"label":"mask_opaque","kind":6,"detail":"pub const mask_opaque","insertText":"mask_opaque","insertTextFormat":1},{"label":"mask_visible","kind":6,"detail":"pub const mask_visible","insertText":"mask_visible","insertTextFormat":1},{"label":"CTraceFilter","kind":22,"detail":"pub struct CTraceFilter","insertText":"CTraceFilter{v_table:$1, p_skip:$2}","insertTextFormat":2},{"label":"CSurface","kind":22,"detail":"pub struct CSurface","insertText":"CSurface{name:$1, surface_prop:$2, flags:$3}","insertTextFormat":2},{"label":"CGameTrace","kind":22,"detail":"pub struct CGameTrace","insertText":"CGameTrace{start_pos:$1, end_pos:$2, pad:$3, fraction:$4, contents:$5, disp_flags:$6, all_solid:$7, start_solid:$8, pod:$9, surface:$10, hit_group:$11, pud:$12, hit_entity:$13, hitbox:$14}","insertTextFormat":2},{"label":"Ray","kind":22,"detail":"pub struct Ray","insertText":"Ray{start:$1, pad:$2, delta:$3, pod:$4, is_ray:$5, is_swept:$6}","insertTextFormat":2},{"label":"IEngineTrace","kind":22,"detail":"pub struct IEngineTrace","insertText":"IEngineTrace{}","insertTextFormat":1},{"label":"CGlobalVarsBase","kind":22,"detail":"pub struct CGlobalVarsBase","insertText":"CGlobalVarsBase{realtime:$1, framecount:$2, absoluteframetime:$3, absoluteframestarttimestddev:$4, curtime:$5, frametime:$6, max_clients:$7, tickcount:$8, interval_per_tick:$9, interpolation_amount:$10, sim_ticks_this_frame:$11, network_protocol:$12, p_save_data:$13, bclient:$14, bremoteclient:$15, timestamp_networking_base:$16, timestamp_randomize_window:$17}","insertTextFormat":2},{"label":"msg_c","kind":3,"detail":"fn msg_c(with_color Color, and_text string)","insertText":"msg_c($0, $1)","insertTextFormat":2},{"label":"msg","kind":3,"detail":"fn msg(with_text string)","insertText":"msg($0)","insertTextFormat":2},{"label":"ISurface","kind":22,"detail":"pub struct ISurface","insertText":"ISurface{}","insertTextFormat":1},{"label":"IVModelInfo","kind":22,"detail":"pub struct IVModelInfo","insertText":"IVModelInfo{}","insertTextFormat":1},{"label":"IEntityList","kind":22,"detail":"pub struct IEntityList","insertText":"IEntityList{}","insertTextFormat":1},{"label":"IMaterial","kind":22,"detail":"pub struct IMaterial","insertText":"IMaterial{}","insertTextFormat":1},{"label":"IMaterialSystem","kind":22,"detail":"struct IMaterialSystem","insertText":"IMaterialSystem{}","insertTextFormat":1},{"label":"ICvar","kind":22,"detail":"pub struct ICvar","insertText":"ICvar{}","insertTextFormat":1},{"label":"CDrawModelInfo","kind":22,"detail":"pub struct CDrawModelInfo","insertText":"CDrawModelInfo{studio_hdr:$1, hardware_data:$2, decals:$3, skin:$4, body:$5, hitbox_set:$6, renderable:$7}","insertTextFormat":2},{"label":"IStudioRender","kind":22,"detail":"struct IStudioRender","insertText":"IStudioRender{}","insertTextFormat":1},{"label":"WeaponData","kind":22,"detail":"pub struct WeaponData","insertText":"WeaponData{pad:$1, clean_name:$2, pud:$3, max_clip:$4, pid:$5, name:$6, pod:$7, w_type:$8, pzd:$9, full_auto:$10, phd:$11, damage:$12, armor_ratio:$13, bullets:$14, penetration:$15, pkd:$16, range:$17, range_modifier:$18, pnd:$19, has_silencer:$20}","insertTextFormat":2},{"label":"IWeaponSystem","kind":22,"detail":"pub struct IWeaponSystem","insertText":"IWeaponSystem{}","insertTextFormat":1},{"label":"PlayerInfo","kind":22,"detail":"pub struct PlayerInfo","insertText":"PlayerInfo{pad:$1, pod:$2, sz_name:$3, user_id:$4, sz_steam_id:$5, pud:$6, steam_id:$7, friends_sz_name:$8, fake_player:$9, hltv:$10, custom_files:$11, files_downloaded:$12}","insertTextFormat":2},{"label":"IVEngineClient","kind":22,"detail":"pub struct IVEngineClient","insertText":"IVEngineClient{}","insertTextFormat":1},{"label":"IBaseClientDLL","kind":22,"detail":"pub struct IBaseClientDLL","insertText":"IBaseClientDLL{}","insertTextFormat":1},{"label":"IInputSystem","kind":22,"detail":"pub struct IInputSystem","insertText":"IInputSystem{}","insertTextFormat":1},{"label":"IVDebugOverlay","kind":22,"detail":"pub struct IVDebugOverlay","insertText":"IVDebugOverlay{}","insertTextFormat":1},{"label":"raw_name","kind":6,"detail":"mut raw_name string","insertText":"raw_name","insertTextFormat":1},{"label":"cleaned_name","kind":6,"detail":"mut cleaned_name string","insertText":"cleaned_name","insertTextFormat":1},{"label":"CCLientClass","kind":22,"detail":"pub struct CCLientClass","insertText":"CCLientClass{create_fn:$1, create_event_fn:$2, network_name:$3, recvtable_ptr:$4, next_ptr:$5, class_id:$6}","insertTextFormat":2},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664319979}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/valve_defs.v","diagnostics":[]}},"timestamp":1664319979}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/valve_defs.v","diagnostics":[]}},"timestamp":1664319979}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/valve_defs.v","diagnostics":[]}},"timestamp":1664319979}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/valve_defs.v","diagnostics":[]}},"timestamp":1664319979}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/valve_defs.v","diagnostics":[]}},"timestamp":1664319979}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/valve_defs.v","diagnostics":[]}},"timestamp":1664319979}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":76,"method":"textDocument/completion","params":{"position":{"line":111,"character":4},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/valve_defs.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664319980}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":76,"result":[]},"timestamp":1664319980}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/valve_defs.v","diagnostics":[]}},"timestamp":1664319980}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/valve_defs.v","diagnostics":[]}},"timestamp":1664319980}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/valve_defs.v","diagnostics":[]}},"timestamp":1664319987}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/valve_defs.v","diagnostics":[]}},"timestamp":1664319987}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664320067}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":77,"method":"textDocument/completion","params":{"position":{"line":31,"character":45},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v"},"context":{"triggerKind":1}}},"timestamp":1664320190}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":77,"result":[{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664320190}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664320190}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664320190}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664320191}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":78,"method":"textDocument/completion","params":{"position":{"line":31,"character":42},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v"},"context":{"triggerKind":2,"triggerCharacter":"."}}},"timestamp":1664320191}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":78,"result":[]},"timestamp":1664320191}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664320191}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":79,"method":"textDocument/completion","params":{"position":{"line":31,"character":41},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v"},"context":{"triggerKind":1}}},"timestamp":1664320191}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":79,"result":[{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664320191}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664320192}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664320192}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":80,"method":"textDocument/completion","params":{"position":{"line":31,"character":41},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v"},"context":{"triggerKind":1}}},"timestamp":1664320192}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":80,"result":[{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664320192}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664320192}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664320192}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664320193}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664320193}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664320193}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664320194}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664320194}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":81,"method":"textDocument/completion","params":{"position":{"line":31,"character":22},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v"},"context":{"triggerKind":1}}},"timestamp":1664320196}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":81,"result":[{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664320196}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664320196}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664320196}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664320196}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":82,"method":"textDocument/completion","params":{"position":{"line":31,"character":19},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v"},"context":{"triggerKind":2,"triggerCharacter":"."}}},"timestamp":1664320196}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":82,"result":[]},"timestamp":1664320196}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664320196}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":83,"method":"textDocument/completion","params":{"position":{"line":31,"character":18},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v"},"context":{"triggerKind":1}}},"timestamp":1664320196}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":83,"result":[{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664320196}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664320196}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664320196}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":84,"method":"textDocument/completion","params":{"position":{"line":31,"character":18},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v"},"context":{"triggerKind":1}}},"timestamp":1664320196}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":84,"result":[{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664320196}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664320197}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664320197}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664320197}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664320197}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664320198}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664320198}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664320198}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664320198}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664320198}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664320199}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664320199}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664320199}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664320199}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664320199}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664320200}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664320200}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664320200}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664320200}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664320200}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":85,"method":"textDocument/completion","params":{"position":{"line":32,"character":18},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v"},"context":{"triggerKind":1}}},"timestamp":1664320202}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":85,"result":[{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664320202}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664320202}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664320203}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664320203}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":86,"method":"textDocument/completion","params":{"position":{"line":32,"character":15},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v"},"context":{"triggerKind":2,"triggerCharacter":"."}}},"timestamp":1664320203}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":86,"result":[]},"timestamp":1664320203}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664320203}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":87,"method":"textDocument/completion","params":{"position":{"line":32,"character":14},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v"},"context":{"triggerKind":1}}},"timestamp":1664320203}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":87,"result":[{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664320203}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664320203}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664320203}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":88,"method":"textDocument/completion","params":{"position":{"line":32,"character":14},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v"},"context":{"triggerKind":1}}},"timestamp":1664320203}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":88,"result":[{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664320203}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664320203}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664320204}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664320204}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664320205}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664320205}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664320205}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664320205}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664320206}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664320212}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664320212}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664320212}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":89,"method":"textDocument/completion","params":{"position":{"line":17,"character":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v"},"context":{"triggerKind":1}}},"timestamp":1664320219}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":89,"result":[{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664320219}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664320219}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664320219}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":90,"method":"textDocument/completion","params":{"position":{"line":17,"character":4},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664320219}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":90,"result":[]},"timestamp":1664320219}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664320219}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664320221}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":91,"method":"textDocument/completion","params":{"position":{"line":7,"character":60},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v"},"context":{"triggerKind":1}}},"timestamp":1664320231}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":91,"result":[{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"with_switch","kind":6,"detail":"with_switch bool","insertText":"with_switch","insertTextFormat":1},{"label":"and_file","kind":6,"detail":"and_file ?","insertText":"and_file","insertTextFormat":1},{"label":"with_switch","kind":6,"detail":"with_switch bool","insertText":"with_switch","insertTextFormat":1},{"label":"and_file","kind":6,"detail":"and_file","insertText":"and_file","insertTextFormat":1},{"label":"with_switch","kind":6,"detail":"with_switch bool","insertText":"with_switch","insertTextFormat":1},{"label":"with_switch","kind":6,"detail":"with_switch bool","insertText":"with_switch","insertTextFormat":1},{"label":"and_file","kind":6,"detail":"and_file &C.","insertText":"and_file","insertTextFormat":1},{"label":"with_switch","kind":6,"detail":"with_switch bool","insertText":"with_switch","insertTextFormat":1},{"label":"and_file","kind":6,"detail":"and_file &C.F","insertText":"and_file","insertTextFormat":1},{"label":"with_switch","kind":6,"detail":"with_switch bool","insertText":"with_switch","insertTextFormat":1},{"label":"and_file","kind":6,"detail":"and_file &C.FI","insertText":"and_file","insertTextFormat":1},{"label":"with_switch","kind":6,"detail":"with_switch bool","insertText":"with_switch","insertTextFormat":1},{"label":"and_file","kind":6,"detail":"and_file &C.FIL","insertText":"and_file","insertTextFormat":1},{"label":"with_switch","kind":6,"detail":"with_switch bool","insertText":"with_switch","insertTextFormat":1},{"label":"and_file","kind":6,"detail":"and_file voidptr","insertText":"and_file","insertTextFormat":1},{"label":"radian","kind":6,"detail":"pub const radian f32","insertText":"radian","insertTextFormat":1},{"label":"Vec3","kind":22,"detail":"pub struct Vec3","insertText":"Vec3{x:$1, y:$2, z:$3}","insertTextFormat":2},{"label":"distance_from","kind":3,"detail":"pub fn distance_from(from_ent Vec3, to_ent Vec3) f32","insertText":"distance_from($0, $1)","insertTextFormat":2},{"label":"sin_cos","kind":3,"detail":"pub fn sin_cos(with_radion f32) (f32, f32)","insertText":"sin_cos($0)","insertTextFormat":2},{"label":"Angle","kind":22,"detail":"pub struct Angle","insertText":"Angle{pitch:$1, yaw:$2, roll:$3}","insertTextFormat":2},{"label":"angle_to_vectors","kind":3,"detail":"pub fn angle_to_vectors(with_angle Angle) (Vec3, Vec3, Vec3)","insertText":"angle_to_vectors($0)","insertTextFormat":2},{"label":"get_virtual","kind":3,"detail":"fn get_virtual(in_this_obj voidptr, at_index int) voidptr","insertText":"get_virtual($0, $1)","insertTextFormat":2},{"label":"call_vfunc","kind":3,"detail":"fn call_vfunc(from_class voidptr, at_idx int) T","insertText":"call_vfunc($0, $1)","insertTextFormat":2},{"label":"get_val_offset","kind":3,"detail":"pub fn get_val_offset(in_this_obj voidptr, at_offset usize) &T","insertText":"get_val_offset($0, $1)","insertTextFormat":2},{"label":"Value","kind":22,"detail":"struct Value","insertText":"Value{ptr:$1}","insertTextFormat":2},{"label":"C.IMAGE_DOS_HEADER","kind":22,"detail":"struct C.IMAGE_DOS_HEADER","insertText":"C.IMAGE_DOS_HEADER{pad:$1, pud:$2, ped:$3, pyd:$4, e_lfanew:$5}","insertTextFormat":2},{"label":"C.IMAGE_OPTIONAL_HEADER","kind":22,"detail":"struct C.IMAGE_OPTIONAL_HEADER","insertText":"C.IMAGE_OPTIONAL_HEADER{Magic:$1, pad:$2, SizeOfImage:$3}","insertTextFormat":2},{"label":"C.IMAGE_NT_HEADERS","kind":22,"detail":"struct C.IMAGE_NT_HEADERS","insertText":"C.IMAGE_NT_HEADERS{pad:$1, OptionalHeader:$2}","insertTextFormat":2},{"label":"pattern_scan","kind":3,"detail":"pub fn pattern_scan(in_module string, with_sig string) ?voidptr","insertText":"pattern_scan($0, $1)","insertTextFormat":2},{"label":"wait_for_module","kind":3,"detail":"pub fn wait_for_module(mut with_modules []string, and_max_timeout int)","insertText":"wait_for_module($0, $1)","insertTextFormat":2},{"label":"Matrix","kind":22,"detail":"pub struct Matrix","insertText":"Matrix{m:$1}","insertTextFormat":2},{"label":"Vec2","kind":22,"detail":"pub struct Vec2","insertText":"Vec2{x:$1, y:$2}","insertTextFormat":2},{"label":"op_vec","kind":3,"detail":"pub fn op_vec(with_op_val f32) Vec3","insertText":"op_vec($0)","insertTextFormat":2},{"label":"new_angle","kind":3,"detail":"pub fn new_angle(x T, y T, z T) Angle","insertText":"new_angle($0, $1, $2)","insertTextFormat":2},{"label":"new_vec3","kind":3,"detail":"pub fn new_vec3(x T, y T, z T) Vec3","insertText":"new_vec3($0, $1, $2)","insertTextFormat":2},{"label":"new_vec2","kind":3,"detail":"pub fn new_vec2(x T, y T) Vec2","insertText":"new_vec2($0, $1)","insertTextFormat":2},{"label":"HResult","kind":22,"detail":"pub struct HResult","insertText":"HResult{val:$1}","insertTextFormat":2},{"label":"h_res","kind":3,"detail":"pub fn h_res(with_hres int) HResult","insertText":"h_res($0)","insertTextFormat":2},{"label":"get_key","kind":3,"detail":"fn get_key(with_vk_code int, is_toggle bool) bool","insertText":"get_key($0, $1)","insertTextFormat":2},{"label":"str_align","kind":3,"detail":"pub fn str_align(with_og_text string, with_spaces_count i32, and_final_sep string) string","insertText":"str_align($0, $1, $2)","insertTextFormat":2},{"label":"load_unload_console","kind":3,"detail":"pub fn load_unload_console(with_switch bool, and_file voidptr)","insertText":"load_unload_console($0, $1)","insertTextFormat":2},{"label":"Color","kind":22,"detail":"pub struct Color","insertText":"Color{, rgba:$1}","insertTextFormat":2},{"label":"msg_c","kind":3,"detail":"fn msg_c(with_text string, and_color Color)","insertText":"msg_c($0, $1)","insertTextFormat":2},{"label":"pront","kind":3,"detail":"pub fn pront(with_text string)","insertText":"pront($0)","insertTextFormat":2},{"label":"ColorRgbF","kind":22,"detail":"pub struct ColorRgbF","insertText":"ColorRgbF{r:$1, g:$2, b:$3}","insertTextFormat":2},{"label":"ColorRgbaF","kind":22,"detail":"pub struct ColorRgbaF","insertText":"ColorRgbaF{r:$1, g:$2, b:$3, a:$4}","insertTextFormat":2},{"label":"ColorRgba","kind":22,"detail":"struct ColorRgba","insertText":"ColorRgba{r:$1, g:$2, b:$3, a:$4}","insertTextFormat":2},{"label":"color_rbga","kind":3,"detail":"pub fn color_rbga(r_ T, g_ T, b_ T, a_ T) Color","insertText":"color_rbga($0, $1, $2, $3)","insertTextFormat":2},{"label":"color_f_rbga","kind":3,"detail":"pub fn color_f_rbga(r_ T, g_ T, b_ T, a_ T) Color","insertText":"color_f_rbga($0, $1, $2, $3)","insertTextFormat":2},{"label":"color_hex","kind":3,"detail":"pub fn color_hex(withHex u32) Color","insertText":"color_hex($0)","insertTextFormat":2},{"label":"errors","kind":6,"detail":"const errors","insertText":"errors","insertTextFormat":1},{"label":"error_critical","kind":3,"detail":"pub fn error_critical(with_error string, and_error_complement string)","insertText":"error_critical($0, $1)","insertTextFormat":2},{"label":"client_error","kind":3,"detail":"pub fn client_error(with_error string)","insertText":"client_error($0)","insertTextFormat":2},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664320231}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664320231}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664320231}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664320231}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664320231}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664320231}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664320231}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664320231}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664320231}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664320231}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664320231}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":92,"method":"textDocument/completion","params":{"position":{"line":7,"character":54},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664320231}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":92,"result":[]},"timestamp":1664320231}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664320231}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664320231}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664320232}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664320232}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":93,"method":"textDocument/completion","params":{"position":{"line":7,"character":56},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v"},"context":{"triggerKind":1}}},"timestamp":1664320232}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":93,"result":[{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"with_switch","kind":6,"detail":"with_switch bool","insertText":"with_switch","insertTextFormat":1},{"label":"and_file","kind":6,"detail":"and_file ?","insertText":"and_file","insertTextFormat":1},{"label":"with_switch","kind":6,"detail":"with_switch bool","insertText":"with_switch","insertTextFormat":1},{"label":"and_file","kind":6,"detail":"and_file","insertText":"and_file","insertTextFormat":1},{"label":"with_switch","kind":6,"detail":"with_switch bool","insertText":"with_switch","insertTextFormat":1},{"label":"with_switch","kind":6,"detail":"with_switch bool","insertText":"with_switch","insertTextFormat":1},{"label":"and_file","kind":6,"detail":"and_file &C.","insertText":"and_file","insertTextFormat":1},{"label":"with_switch","kind":6,"detail":"with_switch bool","insertText":"with_switch","insertTextFormat":1},{"label":"and_file","kind":6,"detail":"and_file &C.F","insertText":"and_file","insertTextFormat":1},{"label":"with_switch","kind":6,"detail":"with_switch bool","insertText":"with_switch","insertTextFormat":1},{"label":"and_file","kind":6,"detail":"and_file &C.FI","insertText":"and_file","insertTextFormat":1},{"label":"with_switch","kind":6,"detail":"with_switch bool","insertText":"with_switch","insertTextFormat":1},{"label":"and_file","kind":6,"detail":"and_file &C.FIL","insertText":"and_file","insertTextFormat":1},{"label":"with_switch","kind":6,"detail":"with_switch bool","insertText":"with_switch","insertTextFormat":1},{"label":"and_file","kind":6,"detail":"and_file voidptr","insertText":"and_file","insertTextFormat":1},{"label":"radian","kind":6,"detail":"pub const radian f32","insertText":"radian","insertTextFormat":1},{"label":"Vec3","kind":22,"detail":"pub struct Vec3","insertText":"Vec3{x:$1, y:$2, z:$3}","insertTextFormat":2},{"label":"distance_from","kind":3,"detail":"pub fn distance_from(from_ent Vec3, to_ent Vec3) f32","insertText":"distance_from($0, $1)","insertTextFormat":2},{"label":"sin_cos","kind":3,"detail":"pub fn sin_cos(with_radion f32) (f32, f32)","insertText":"sin_cos($0)","insertTextFormat":2},{"label":"Angle","kind":22,"detail":"pub struct Angle","insertText":"Angle{pitch:$1, yaw:$2, roll:$3}","insertTextFormat":2},{"label":"angle_to_vectors","kind":3,"detail":"pub fn angle_to_vectors(with_angle Angle) (Vec3, Vec3, Vec3)","insertText":"angle_to_vectors($0)","insertTextFormat":2},{"label":"get_virtual","kind":3,"detail":"fn get_virtual(in_this_obj voidptr, at_index int) voidptr","insertText":"get_virtual($0, $1)","insertTextFormat":2},{"label":"call_vfunc","kind":3,"detail":"fn call_vfunc(from_class voidptr, at_idx int) T","insertText":"call_vfunc($0, $1)","insertTextFormat":2},{"label":"get_val_offset","kind":3,"detail":"pub fn get_val_offset(in_this_obj voidptr, at_offset usize) &T","insertText":"get_val_offset($0, $1)","insertTextFormat":2},{"label":"Value","kind":22,"detail":"struct Value","insertText":"Value{ptr:$1}","insertTextFormat":2},{"label":"C.IMAGE_DOS_HEADER","kind":22,"detail":"struct C.IMAGE_DOS_HEADER","insertText":"C.IMAGE_DOS_HEADER{pad:$1, pud:$2, ped:$3, pyd:$4, e_lfanew:$5}","insertTextFormat":2},{"label":"C.IMAGE_OPTIONAL_HEADER","kind":22,"detail":"struct C.IMAGE_OPTIONAL_HEADER","insertText":"C.IMAGE_OPTIONAL_HEADER{Magic:$1, pad:$2, SizeOfImage:$3}","insertTextFormat":2},{"label":"C.IMAGE_NT_HEADERS","kind":22,"detail":"struct C.IMAGE_NT_HEADERS","insertText":"C.IMAGE_NT_HEADERS{pad:$1, OptionalHeader:$2}","insertTextFormat":2},{"label":"pattern_scan","kind":3,"detail":"pub fn pattern_scan(in_module string, with_sig string) ?voidptr","insertText":"pattern_scan($0, $1)","insertTextFormat":2},{"label":"wait_for_module","kind":3,"detail":"pub fn wait_for_module(mut with_modules []string, and_max_timeout int)","insertText":"wait_for_module($0, $1)","insertTextFormat":2},{"label":"Matrix","kind":22,"detail":"pub struct Matrix","insertText":"Matrix{m:$1}","insertTextFormat":2},{"label":"Vec2","kind":22,"detail":"pub struct Vec2","insertText":"Vec2{x:$1, y:$2}","insertTextFormat":2},{"label":"op_vec","kind":3,"detail":"pub fn op_vec(with_op_val f32) Vec3","insertText":"op_vec($0)","insertTextFormat":2},{"label":"new_angle","kind":3,"detail":"pub fn new_angle(x T, y T, z T) Angle","insertText":"new_angle($0, $1, $2)","insertTextFormat":2},{"label":"new_vec3","kind":3,"detail":"pub fn new_vec3(x T, y T, z T) Vec3","insertText":"new_vec3($0, $1, $2)","insertTextFormat":2},{"label":"new_vec2","kind":3,"detail":"pub fn new_vec2(x T, y T) Vec2","insertText":"new_vec2($0, $1)","insertTextFormat":2},{"label":"HResult","kind":22,"detail":"pub struct HResult","insertText":"HResult{val:$1}","insertTextFormat":2},{"label":"h_res","kind":3,"detail":"pub fn h_res(with_hres int) HResult","insertText":"h_res($0)","insertTextFormat":2},{"label":"get_key","kind":3,"detail":"fn get_key(with_vk_code int, is_toggle bool) bool","insertText":"get_key($0, $1)","insertTextFormat":2},{"label":"str_align","kind":3,"detail":"pub fn str_align(with_og_text string, with_spaces_count i32, and_final_sep string) string","insertText":"str_align($0, $1, $2)","insertTextFormat":2},{"label":"load_unload_console","kind":3,"detail":"pub fn load_unload_console(with_switch bool, and_file)","insertText":"load_unload_console($0, $1)","insertTextFormat":2},{"label":"Color","kind":22,"detail":"pub struct Color","insertText":"Color{, rgba:$1}","insertTextFormat":2},{"label":"msg_c","kind":3,"detail":"fn msg_c(with_text string, and_color Color)","insertText":"msg_c($0, $1)","insertTextFormat":2},{"label":"pront","kind":3,"detail":"pub fn pront(with_text string)","insertText":"pront($0)","insertTextFormat":2},{"label":"ColorRgbF","kind":22,"detail":"pub struct ColorRgbF","insertText":"ColorRgbF{r:$1, g:$2, b:$3}","insertTextFormat":2},{"label":"ColorRgbaF","kind":22,"detail":"pub struct ColorRgbaF","insertText":"ColorRgbaF{r:$1, g:$2, b:$3, a:$4}","insertTextFormat":2},{"label":"ColorRgba","kind":22,"detail":"struct ColorRgba","insertText":"ColorRgba{r:$1, g:$2, b:$3, a:$4}","insertTextFormat":2},{"label":"color_rbga","kind":3,"detail":"pub fn color_rbga(r_ T, g_ T, b_ T, a_ T) Color","insertText":"color_rbga($0, $1, $2, $3)","insertTextFormat":2},{"label":"color_f_rbga","kind":3,"detail":"pub fn color_f_rbga(r_ T, g_ T, b_ T, a_ T) Color","insertText":"color_f_rbga($0, $1, $2, $3)","insertTextFormat":2},{"label":"color_hex","kind":3,"detail":"pub fn color_hex(withHex u32) Color","insertText":"color_hex($0)","insertTextFormat":2},{"label":"errors","kind":6,"detail":"const errors","insertText":"errors","insertTextFormat":1},{"label":"error_critical","kind":3,"detail":"pub fn error_critical(with_error string, and_error_complement string)","insertText":"error_critical($0, $1)","insertTextFormat":2},{"label":"client_error","kind":3,"detail":"pub fn client_error(with_error string)","insertText":"client_error($0)","insertTextFormat":2},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664320232}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664320232}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664320232}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":94,"method":"textDocument/completion","params":{"position":{"line":7,"character":57},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v"},"context":{"triggerKind":2,"triggerCharacter":"."}}},"timestamp":1664320233}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":94,"result":[]},"timestamp":1664320233}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664320233}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664320233}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":95,"method":"textDocument/completion","params":{"position":{"line":7,"character":58},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v"},"context":{"triggerKind":1}}},"timestamp":1664320233}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":95,"result":[{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"with_switch","kind":6,"detail":"with_switch bool","insertText":"with_switch","insertTextFormat":1},{"label":"and_file","kind":6,"detail":"and_file ?","insertText":"and_file","insertTextFormat":1},{"label":"with_switch","kind":6,"detail":"with_switch bool","insertText":"with_switch","insertTextFormat":1},{"label":"and_file","kind":6,"detail":"and_file","insertText":"and_file","insertTextFormat":1},{"label":"with_switch","kind":6,"detail":"with_switch bool","insertText":"with_switch","insertTextFormat":1},{"label":"with_switch","kind":6,"detail":"with_switch bool","insertText":"with_switch","insertTextFormat":1},{"label":"and_file","kind":6,"detail":"and_file &C.","insertText":"and_file","insertTextFormat":1},{"label":"with_switch","kind":6,"detail":"with_switch bool","insertText":"with_switch","insertTextFormat":1},{"label":"and_file","kind":6,"detail":"and_file &C.F","insertText":"and_file","insertTextFormat":1},{"label":"with_switch","kind":6,"detail":"with_switch bool","insertText":"with_switch","insertTextFormat":1},{"label":"and_file","kind":6,"detail":"and_file &C.FI","insertText":"and_file","insertTextFormat":1},{"label":"with_switch","kind":6,"detail":"with_switch bool","insertText":"with_switch","insertTextFormat":1},{"label":"and_file","kind":6,"detail":"and_file &C.FIL","insertText":"and_file","insertTextFormat":1},{"label":"with_switch","kind":6,"detail":"with_switch bool","insertText":"with_switch","insertTextFormat":1},{"label":"and_file","kind":6,"detail":"and_file voidptr","insertText":"and_file","insertTextFormat":1},{"label":"radian","kind":6,"detail":"pub const radian f32","insertText":"radian","insertTextFormat":1},{"label":"Vec3","kind":22,"detail":"pub struct Vec3","insertText":"Vec3{x:$1, y:$2, z:$3}","insertTextFormat":2},{"label":"distance_from","kind":3,"detail":"pub fn distance_from(from_ent Vec3, to_ent Vec3) f32","insertText":"distance_from($0, $1)","insertTextFormat":2},{"label":"sin_cos","kind":3,"detail":"pub fn sin_cos(with_radion f32) (f32, f32)","insertText":"sin_cos($0)","insertTextFormat":2},{"label":"Angle","kind":22,"detail":"pub struct Angle","insertText":"Angle{pitch:$1, yaw:$2, roll:$3}","insertTextFormat":2},{"label":"angle_to_vectors","kind":3,"detail":"pub fn angle_to_vectors(with_angle Angle) (Vec3, Vec3, Vec3)","insertText":"angle_to_vectors($0)","insertTextFormat":2},{"label":"get_virtual","kind":3,"detail":"fn get_virtual(in_this_obj voidptr, at_index int) voidptr","insertText":"get_virtual($0, $1)","insertTextFormat":2},{"label":"call_vfunc","kind":3,"detail":"fn call_vfunc(from_class voidptr, at_idx int) T","insertText":"call_vfunc($0, $1)","insertTextFormat":2},{"label":"get_val_offset","kind":3,"detail":"pub fn get_val_offset(in_this_obj voidptr, at_offset usize) &T","insertText":"get_val_offset($0, $1)","insertTextFormat":2},{"label":"Value","kind":22,"detail":"struct Value","insertText":"Value{ptr:$1}","insertTextFormat":2},{"label":"C.IMAGE_DOS_HEADER","kind":22,"detail":"struct C.IMAGE_DOS_HEADER","insertText":"C.IMAGE_DOS_HEADER{pad:$1, pud:$2, ped:$3, pyd:$4, e_lfanew:$5}","insertTextFormat":2},{"label":"C.IMAGE_OPTIONAL_HEADER","kind":22,"detail":"struct C.IMAGE_OPTIONAL_HEADER","insertText":"C.IMAGE_OPTIONAL_HEADER{Magic:$1, pad:$2, SizeOfImage:$3}","insertTextFormat":2},{"label":"C.IMAGE_NT_HEADERS","kind":22,"detail":"struct C.IMAGE_NT_HEADERS","insertText":"C.IMAGE_NT_HEADERS{pad:$1, OptionalHeader:$2}","insertTextFormat":2},{"label":"pattern_scan","kind":3,"detail":"pub fn pattern_scan(in_module string, with_sig string) ?voidptr","insertText":"pattern_scan($0, $1)","insertTextFormat":2},{"label":"wait_for_module","kind":3,"detail":"pub fn wait_for_module(mut with_modules []string, and_max_timeout int)","insertText":"wait_for_module($0, $1)","insertTextFormat":2},{"label":"Matrix","kind":22,"detail":"pub struct Matrix","insertText":"Matrix{m:$1}","insertTextFormat":2},{"label":"Vec2","kind":22,"detail":"pub struct Vec2","insertText":"Vec2{x:$1, y:$2}","insertTextFormat":2},{"label":"op_vec","kind":3,"detail":"pub fn op_vec(with_op_val f32) Vec3","insertText":"op_vec($0)","insertTextFormat":2},{"label":"new_angle","kind":3,"detail":"pub fn new_angle(x T, y T, z T) Angle","insertText":"new_angle($0, $1, $2)","insertTextFormat":2},{"label":"new_vec3","kind":3,"detail":"pub fn new_vec3(x T, y T, z T) Vec3","insertText":"new_vec3($0, $1, $2)","insertTextFormat":2},{"label":"new_vec2","kind":3,"detail":"pub fn new_vec2(x T, y T) Vec2","insertText":"new_vec2($0, $1)","insertTextFormat":2},{"label":"HResult","kind":22,"detail":"pub struct HResult","insertText":"HResult{val:$1}","insertTextFormat":2},{"label":"h_res","kind":3,"detail":"pub fn h_res(with_hres int) HResult","insertText":"h_res($0)","insertTextFormat":2},{"label":"get_key","kind":3,"detail":"fn get_key(with_vk_code int, is_toggle bool) bool","insertText":"get_key($0, $1)","insertTextFormat":2},{"label":"str_align","kind":3,"detail":"pub fn str_align(with_og_text string, with_spaces_count i32, and_final_sep string) string","insertText":"str_align($0, $1, $2)","insertTextFormat":2},{"label":"load_unload_console","kind":3,"detail":"pub fn load_unload_console(with_switch bool, and_file &C.)","insertText":"load_unload_console($0, $1)","insertTextFormat":2},{"label":"Color","kind":22,"detail":"pub struct Color","insertText":"Color{, rgba:$1}","insertTextFormat":2},{"label":"msg_c","kind":3,"detail":"fn msg_c(with_text string, and_color Color)","insertText":"msg_c($0, $1)","insertTextFormat":2},{"label":"pront","kind":3,"detail":"pub fn pront(with_text string)","insertText":"pront($0)","insertTextFormat":2},{"label":"ColorRgbF","kind":22,"detail":"pub struct ColorRgbF","insertText":"ColorRgbF{r:$1, g:$2, b:$3}","insertTextFormat":2},{"label":"ColorRgbaF","kind":22,"detail":"pub struct ColorRgbaF","insertText":"ColorRgbaF{r:$1, g:$2, b:$3, a:$4}","insertTextFormat":2},{"label":"ColorRgba","kind":22,"detail":"struct ColorRgba","insertText":"ColorRgba{r:$1, g:$2, b:$3, a:$4}","insertTextFormat":2},{"label":"color_rbga","kind":3,"detail":"pub fn color_rbga(r_ T, g_ T, b_ T, a_ T) Color","insertText":"color_rbga($0, $1, $2, $3)","insertTextFormat":2},{"label":"color_f_rbga","kind":3,"detail":"pub fn color_f_rbga(r_ T, g_ T, b_ T, a_ T) Color","insertText":"color_f_rbga($0, $1, $2, $3)","insertTextFormat":2},{"label":"color_hex","kind":3,"detail":"pub fn color_hex(withHex u32) Color","insertText":"color_hex($0)","insertTextFormat":2},{"label":"errors","kind":6,"detail":"const errors","insertText":"errors","insertTextFormat":1},{"label":"error_critical","kind":3,"detail":"pub fn error_critical(with_error string, and_error_complement string)","insertText":"error_critical($0, $1)","insertTextFormat":2},{"label":"client_error","kind":3,"detail":"pub fn client_error(with_error string)","insertText":"client_error($0)","insertTextFormat":2},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664320233}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664320233}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664320233}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664320233}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664320233}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664320234}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664320234}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664320234}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664320234}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[]}},"timestamp":1664320235}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/logs.v","diagnostics":[{"range":{"start":{"line":10,"character":8},"end":{"line":10,"character":8}},"severity":1,"code":"","source":"","message":"unknown function: C.AllocConsole","relatedInformation":[]},{"range":{"start":{"line":14,"character":7},"end":{"line":14,"character":7}},"severity":1,"code":"","source":"","message":"unknown function: C.freopen_s","relatedInformation":[]},{"range":{"start":{"line":31,"character":28},"end":{"line":31,"character":28}},"severity":1,"code":"","source":"","message":"unknown function: C.GetProcAddress","relatedInformation":[]}]}},"timestamp":1664320235}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1664320246}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":96,"method":"textDocument/completion","params":{"position":{"line":19,"character":12},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v"},"context":{"triggerKind":1}}},"timestamp":1664320246}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":96,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"vmod","kind":9,"detail":"","insertText":"vmod","insertTextFormat":1},{"label":"d3d","kind":9,"detail":"","insertText":"d3d","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, hooks:$8, d3d:$9, rnd_queue:$10, ent_cacher:$11, config:$12, engine:$13, visuals:$14, menu:$15, chams:$16, kill_sound:$17, skins:$18, is_ok:$19}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664320246}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1664320247}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1664320247}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1664320247}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1664320247}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1664320247}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":97,"method":"textDocument/completion","params":{"position":{"line":19,"character":7},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664320247}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":97,"result":[]},"timestamp":1664320247}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1664320247}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":98,"method":"textDocument/completion","params":{"position":{"line":19,"character":8},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v"},"context":{"triggerKind":1}}},"timestamp":1664320247}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":98,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"vmod","kind":9,"detail":"","insertText":"vmod","insertTextFormat":1},{"label":"d3d","kind":9,"detail":"","insertText":"d3d","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664320247}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1664320247}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":99,"method":"textDocument/completion","params":{"position":{"line":19,"character":7},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664320248}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":99,"result":[]},"timestamp":1664320248}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1664320248}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1664320248}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":100,"method":"textDocument/completion","params":{"position":{"line":19,"character":7},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664320249}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":100,"result":[]},"timestamp":1664320249}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1664320249}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1664320249}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":101,"method":"textDocument/completion","params":{"position":{"line":19,"character":9},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v"},"context":{"triggerKind":1}}},"timestamp":1664320250}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":101,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"vmod","kind":9,"detail":"","insertText":"vmod","insertTextFormat":1},{"label":"d3d","kind":9,"detail":"","insertText":"d3d","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664320250}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1664320250}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":102,"method":"textDocument/completion","params":{"position":{"line":19,"character":10},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v"},"context":{"triggerKind":2,"triggerCharacter":"."}}},"timestamp":1664320250}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":102,"result":[]},"timestamp":1664320250}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1664320250}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":103,"method":"textDocument/completion","params":{"position":{"line":19,"character":11},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v"},"context":{"triggerKind":1}}},"timestamp":1664320251}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":103,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"vmod","kind":9,"detail":"","insertText":"vmod","insertTextFormat":1},{"label":"d3d","kind":9,"detail":"","insertText":"d3d","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664320251}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1664320251}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1664320251}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1664320251}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1664320251}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1664320253}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1664320258}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_studio_renderer.v","diagnostics":[]}},"timestamp":1664320343}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":104,"method":"textDocument/completion","params":{"position":{"line":44,"character":2},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_studio_renderer.v"},"context":{"triggerKind":1}}},"timestamp":1664320343}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":104,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"Entity_t","kind":22,"detail":"pub struct Entity_t","insertText":"Entity_t{}","insertTextFormat":1},{"label":"IClientUnknown","kind":22,"detail":"struct IClientUnknown","insertText":"IClientUnknown{}","insertTextFormat":1},{"label":"IClientRenderable","kind":22,"detail":"struct IClientRenderable","insertText":"IClientRenderable{}","insertTextFormat":1},{"label":"Weapon_t","kind":22,"detail":"pub struct Weapon_t","insertText":"Weapon_t{}","insertTextFormat":1},{"label":"Player","kind":22,"detail":"pub struct Player","insertText":"Player{}","insertTextFormat":1},{"label":"Item","kind":22,"detail":"struct Item","insertText":"Item{}","insertTextFormat":1},{"label":"Viewmodel","kind":22,"detail":"pub struct Viewmodel","insertText":"Viewmodel{}","insertTextFormat":1},{"label":"contents_solid","kind":6,"detail":"pub const contents_solid int","insertText":"contents_solid","insertTextFormat":1},{"label":"contents_moveable","kind":6,"detail":"pub const contents_moveable int","insertText":"contents_moveable","insertTextFormat":1},{"label":"contents_monsterclip","kind":6,"detail":"pub const contents_monsterclip int","insertText":"contents_monsterclip","insertTextFormat":1},{"label":"contents_window","kind":6,"detail":"pub const contents_window int","insertText":"contents_window","insertTextFormat":1},{"label":"contents_debris","kind":6,"detail":"pub const contents_debris int","insertText":"contents_debris","insertTextFormat":1},{"label":"contents_hitbox","kind":6,"detail":"pub const contents_hitbox int","insertText":"contents_hitbox","insertTextFormat":1},{"label":"contents_grate","kind":6,"detail":"pub const contents_grate int","insertText":"contents_grate","insertTextFormat":1},{"label":"contents_ignore_nodraw_opaque","kind":6,"detail":"pub const contents_ignore_nodraw_opaque int","insertText":"contents_ignore_nodraw_opaque","insertTextFormat":1},{"label":"contents_opaque","kind":6,"detail":"pub const contents_opaque int","insertText":"contents_opaque","insertTextFormat":1},{"label":"mask_shot","kind":6,"detail":"pub const mask_shot","insertText":"mask_shot","insertTextFormat":1},{"label":"mask_opaque","kind":6,"detail":"pub const mask_opaque","insertText":"mask_opaque","insertTextFormat":1},{"label":"mask_visible","kind":6,"detail":"pub const mask_visible","insertText":"mask_visible","insertTextFormat":1},{"label":"CTraceFilter","kind":22,"detail":"pub struct CTraceFilter","insertText":"CTraceFilter{v_table:$1, p_skip:$2}","insertTextFormat":2},{"label":"CSurface","kind":22,"detail":"pub struct CSurface","insertText":"CSurface{name:$1, surface_prop:$2, flags:$3}","insertTextFormat":2},{"label":"CGameTrace","kind":22,"detail":"pub struct CGameTrace","insertText":"CGameTrace{start_pos:$1, end_pos:$2, pad:$3, fraction:$4, contents:$5, disp_flags:$6, all_solid:$7, start_solid:$8, pod:$9, surface:$10, hit_group:$11, pud:$12, hit_entity:$13, hitbox:$14}","insertTextFormat":2},{"label":"Ray","kind":22,"detail":"pub struct Ray","insertText":"Ray{start:$1, pad:$2, delta:$3, pod:$4, is_ray:$5, is_swept:$6}","insertTextFormat":2},{"label":"IEngineTrace","kind":22,"detail":"pub struct IEngineTrace","insertText":"IEngineTrace{}","insertTextFormat":1},{"label":"CGlobalVarsBase","kind":22,"detail":"pub struct CGlobalVarsBase","insertText":"CGlobalVarsBase{realtime:$1, framecount:$2, absoluteframetime:$3, absoluteframestarttimestddev:$4, curtime:$5, frametime:$6, max_clients:$7, tickcount:$8, interval_per_tick:$9, interpolation_amount:$10, sim_ticks_this_frame:$11, network_protocol:$12, p_save_data:$13, bclient:$14, bremoteclient:$15, timestamp_networking_base:$16, timestamp_randomize_window:$17}","insertTextFormat":2},{"label":"msg_c","kind":3,"detail":"fn msg_c(with_color Color, and_text string)","insertText":"msg_c($0, $1)","insertTextFormat":2},{"label":"msg","kind":3,"detail":"fn msg(with_text string)","insertText":"msg($0)","insertTextFormat":2},{"label":"ISurface","kind":22,"detail":"pub struct ISurface","insertText":"ISurface{}","insertTextFormat":1},{"label":"IVModelInfo","kind":22,"detail":"pub struct IVModelInfo","insertText":"IVModelInfo{}","insertTextFormat":1},{"label":"IEntityList","kind":22,"detail":"pub struct IEntityList","insertText":"IEntityList{}","insertTextFormat":1},{"label":"IMaterial","kind":22,"detail":"pub struct IMaterial","insertText":"IMaterial{}","insertTextFormat":1},{"label":"IMaterialSystem","kind":22,"detail":"struct IMaterialSystem","insertText":"IMaterialSystem{}","insertTextFormat":1},{"label":"ICvar","kind":22,"detail":"pub struct ICvar","insertText":"ICvar{}","insertTextFormat":1},{"label":"CDrawModelInfo","kind":22,"detail":"pub struct CDrawModelInfo","insertText":"CDrawModelInfo{studio_hdr:$1, hardware_data:$2, decals:$3, skin:$4, body:$5, hitbox_set:$6, renderable:$7}","insertTextFormat":2},{"label":"IStudioRender","kind":22,"detail":"struct IStudioRender","insertText":"IStudioRender{}","insertTextFormat":1},{"label":"WeaponData","kind":22,"detail":"pub struct WeaponData","insertText":"WeaponData{pad:$1, clean_name:$2, pud:$3, max_clip:$4, pid:$5, name:$6, pod:$7, w_type:$8, pzd:$9, full_auto:$10, phd:$11, damage:$12, armor_ratio:$13, bullets:$14, penetration:$15, pkd:$16, range:$17, range_modifier:$18, pnd:$19, has_silencer:$20}","insertTextFormat":2},{"label":"IWeaponSystem","kind":22,"detail":"pub struct IWeaponSystem","insertText":"IWeaponSystem{}","insertTextFormat":1},{"label":"PlayerInfo","kind":22,"detail":"pub struct PlayerInfo","insertText":"PlayerInfo{pad:$1, pod:$2, sz_name:$3, user_id:$4, sz_steam_id:$5, pud:$6, steam_id:$7, friends_sz_name:$8, fake_player:$9, hltv:$10, custom_files:$11, files_downloaded:$12}","insertTextFormat":2},{"label":"IVEngineClient","kind":22,"detail":"pub struct IVEngineClient","insertText":"IVEngineClient{}","insertTextFormat":1},{"label":"IBaseClientDLL","kind":22,"detail":"pub struct IBaseClientDLL","insertText":"IBaseClientDLL{}","insertTextFormat":1},{"label":"IInputSystem","kind":22,"detail":"pub struct IInputSystem","insertText":"IInputSystem{}","insertTextFormat":1},{"label":"IVDebugOverlay","kind":22,"detail":"pub struct IVDebugOverlay","insertText":"IVDebugOverlay{}","insertTextFormat":1},{"label":"raw_name","kind":6,"detail":"mut raw_name string","insertText":"raw_name","insertTextFormat":1},{"label":"cleaned_name","kind":6,"detail":"mut cleaned_name string","insertText":"cleaned_name","insertTextFormat":1},{"label":"CCLientClass","kind":22,"detail":"pub struct CCLientClass","insertText":"CCLientClass{create_fn:$1, create_event_fn:$2, network_name:$3, recvtable_ptr:$4, next_ptr:$5, class_id:$6}","insertTextFormat":2},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664320343}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_studio_renderer.v","diagnostics":[]}},"timestamp":1664320343}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":105,"method":"textDocument/completion","params":{"position":{"line":44,"character":4},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_studio_renderer.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664320344}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":105,"result":[]},"timestamp":1664320344}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_studio_renderer.v","diagnostics":[]}},"timestamp":1664320344}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_studio_renderer.v","diagnostics":[]}},"timestamp":1664320345}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_studio_renderer.v","diagnostics":[]}},"timestamp":1664320405}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":106,"method":"textDocument/completion","params":{"position":{"line":44,"character":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/nuklear/wrapper.v"},"context":{"triggerKind":1}}},"timestamp":1664320419}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":106,"result":[{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"C.nk_context","kind":22,"detail":"struct C.nk_context","insertText":"C.nk_context{}","insertTextFormat":1},{"label":"C.nk_rect","kind":22,"detail":"struct C.nk_rect","insertText":"C.nk_rect{x:$1, y:$2, w:$3, h:$4}","insertTextFormat":2},{"label":"C.nk_vec2","kind":22,"detail":"struct C.nk_vec2","insertText":"C.nk_vec2{x:$1, y:$2}","insertTextFormat":2},{"label":"C.nk_color","kind":22,"detail":"pub struct C.nk_color","insertText":"C.nk_color{r:$1, g:$2, b:$3, a:$4}","insertTextFormat":2},{"label":"C.nk_colorf","kind":22,"detail":"pub struct C.nk_colorf","insertText":"C.nk_colorf{r:$1, g:$2, b:$3, a:$4}","insertTextFormat":2},{"label":"Nuklear","kind":22,"detail":"pub struct Nuklear","insertText":"Nuklear{nk_ctx:$1}","insertTextFormat":2},{"label":"handle_event","kind":3,"detail":"pub fn handle_event(with_hwnd C.HWND, with_msg u32, with_param u32, and_lparam int) bool","insertText":"handle_event($0, $1, $2, $3)","insertTextFormat":2},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664320419}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/nuklear/wrapper.v","diagnostics":[]}},"timestamp":1664320419}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/nuklear/wrapper.v","diagnostics":[]}},"timestamp":1664320419}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":107,"method":"textDocument/completion","params":{"position":{"line":44,"character":4},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/nuklear/wrapper.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664320419}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":107,"result":[]},"timestamp":1664320419}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/nuklear/wrapper.v","diagnostics":[]}},"timestamp":1664320419}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":108,"method":"textDocument/completion","params":{"position":{"line":36,"character":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/nuklear/wrapper.v"},"context":{"triggerKind":1}}},"timestamp":1664320427}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":108,"result":[{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"C.nk_context","kind":22,"detail":"struct C.nk_context","insertText":"C.nk_context{}","insertTextFormat":1},{"label":"C.nk_rect","kind":22,"detail":"struct C.nk_rect","insertText":"C.nk_rect{x:$1, y:$2, w:$3, h:$4}","insertTextFormat":2},{"label":"C.nk_vec2","kind":22,"detail":"pub struct C.nk_vec2","insertText":"C.nk_vec2{x:$1, y:$2}","insertTextFormat":2},{"label":"C.nk_color","kind":22,"detail":"pub struct C.nk_color","insertText":"C.nk_color{r:$1, g:$2, b:$3, a:$4}","insertTextFormat":2},{"label":"C.nk_colorf","kind":22,"detail":"pub struct C.nk_colorf","insertText":"C.nk_colorf{r:$1, g:$2, b:$3, a:$4}","insertTextFormat":2},{"label":"Nuklear","kind":22,"detail":"pub struct Nuklear","insertText":"Nuklear{nk_ctx:$1}","insertTextFormat":2},{"label":"handle_event","kind":3,"detail":"pub fn handle_event(with_hwnd C.HWND, with_msg u32, with_param u32, and_lparam int) bool","insertText":"handle_event($0, $1, $2, $3)","insertTextFormat":2},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664320427}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/nuklear/wrapper.v","diagnostics":[]}},"timestamp":1664320427}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/nuklear/wrapper.v","diagnostics":[]}},"timestamp":1664320427}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":109,"method":"textDocument/completion","params":{"position":{"line":36,"character":4},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/nuklear/wrapper.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664320427}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":109,"result":[]},"timestamp":1664320427}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/nuklear/wrapper.v","diagnostics":[]}},"timestamp":1664320427}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":110,"method":"textDocument/completion","params":{"position":{"line":37,"character":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/nuklear/wrapper.v"},"context":{"triggerKind":1}}},"timestamp":1664320429}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":110,"result":[{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"C.nk_context","kind":22,"detail":"pub struct C.nk_context","insertText":"C.nk_context{}","insertTextFormat":1},{"label":"C.nk_rect","kind":22,"detail":"struct C.nk_rect","insertText":"C.nk_rect{x:$1, y:$2, w:$3, h:$4}","insertTextFormat":2},{"label":"C.nk_vec2","kind":22,"detail":"pub struct C.nk_vec2","insertText":"C.nk_vec2{x:$1, y:$2}","insertTextFormat":2},{"label":"C.nk_color","kind":22,"detail":"pub struct C.nk_color","insertText":"C.nk_color{r:$1, g:$2, b:$3, a:$4}","insertTextFormat":2},{"label":"C.nk_colorf","kind":22,"detail":"pub struct C.nk_colorf","insertText":"C.nk_colorf{r:$1, g:$2, b:$3, a:$4}","insertTextFormat":2},{"label":"Nuklear","kind":22,"detail":"pub struct Nuklear","insertText":"Nuklear{nk_ctx:$1}","insertTextFormat":2},{"label":"handle_event","kind":3,"detail":"pub fn handle_event(with_hwnd C.HWND, with_msg u32, with_param u32, and_lparam int) bool","insertText":"handle_event($0, $1, $2, $3)","insertTextFormat":2},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664320429}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/nuklear/wrapper.v","diagnostics":[]}},"timestamp":1664320429}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/nuklear/wrapper.v","diagnostics":[]}},"timestamp":1664320430}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":111,"method":"textDocument/completion","params":{"position":{"line":37,"character":4},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/nuklear/wrapper.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664320430}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":111,"result":[]},"timestamp":1664320430}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/nuklear/wrapper.v","diagnostics":[]}},"timestamp":1664320430}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/nuklear/wrapper.v","diagnostics":[]}},"timestamp":1664320431}
/wrapper.v","diagnostics":[]}},"timestamp":1664320430}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":111,"method":"textDocument/completion","params":{"position":{"line":37,"character":4},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/nuklear/wrapper.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664320430}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":111,"result":[]},"timestamp":1664320430}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/nuklear/wrapper.v","diagnostics":[]}},"timestamp":1664320430}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/nuklear/wrapper.v","diagnostics":[]}},"timestamp":1664320431}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/nuklear/wrapper.v","diagnostics":[]}},"timestamp":1664320480}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_material_system.v","diagnostics":[]}},"timestamp":1664320527}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":112,"method":"textDocument/completion","params":{"position":{"line":19,"character":2},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_material_system.v"},"context":{"triggerKind":1}}},"timestamp":1664320527}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":112,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"Entity_t","kind":22,"detail":"pub struct Entity_t","insertText":"Entity_t{}","insertTextFormat":1},{"label":"IClientUnknown","kind":22,"detail":"struct IClientUnknown","insertText":"IClientUnknown{}","insertTextFormat":1},{"label":"IClientRenderable","kind":22,"detail":"struct IClientRenderable","insertText":"IClientRenderable{}","insertTextFormat":1},{"label":"Weapon_t","kind":22,"detail":"pub struct Weapon_t","insertText":"Weapon_t{}","insertTextFormat":1},{"label":"Player","kind":22,"detail":"pub struct Player","insertText":"Player{}","insertTextFormat":1},{"label":"Item","kind":22,"detail":"struct Item","insertText":"Item{}","insertTextFormat":1},{"label":"Viewmodel","kind":22,"detail":"pub struct Viewmodel","insertText":"Viewmodel{}","insertTextFormat":1},{"label":"contents_solid","kind":6,"detail":"pub const contents_solid int","insertText":"contents_solid","insertTextFormat":1},{"label":"contents_moveable","kind":6,"detail":"pub const contents_moveable int","insertText":"contents_moveable","insertTextFormat":1},{"label":"contents_monsterclip","kind":6,"detail":"pub const contents_monsterclip int","insertText":"contents_monsterclip","insertTextFormat":1},{"label":"contents_window","kind":6,"detail":"pub const contents_window int","insertText":"contents_window","insertTextFormat":1},{"label":"contents_debris","kind":6,"detail":"pub const contents_debris int","insertText":"contents_debris","insertTextFormat":1},{"label":"contents_hitbox","kind":6,"detail":"pub const contents_hitbox int","insertText":"contents_hitbox","insertTextFormat":1},{"label":"contents_grate","kind":6,"detail":"pub const contents_grate int","insertText":"contents_grate","insertTextFormat":1},{"label":"contents_ignore_nodraw_opaque","kind":6,"detail":"pub const contents_ignore_nodraw_opaque int","insertText":"contents_ignore_nodraw_opaque","insertTextFormat":1},{"label":"contents_opaque","kind":6,"detail":"pub const contents_opaque int","insertText":"contents_opaque","insertTextFormat":1},{"label":"mask_shot","kind":6,"detail":"pub const mask_shot","insertText":"mask_shot","insertTextFormat":1},{"label":"mask_opaque","kind":6,"detail":"pub const mask_opaque","insertText":"mask_opaque","insertTextFormat":1},{"label":"mask_visible","kind":6,"detail":"pub const mask_visible","insertText":"mask_visible","insertTextFormat":1},{"label":"CTraceFilter","kind":22,"detail":"pub struct CTraceFilter","insertText":"CTraceFilter{v_table:$1, p_skip:$2}","insertTextFormat":2},{"label":"CSurface","kind":22,"detail":"pub struct CSurface","insertText":"CSurface{name:$1, surface_prop:$2, flags:$3}","insertTextFormat":2},{"label":"CGameTrace","kind":22,"detail":"pub struct CGameTrace","insertText":"CGameTrace{start_pos:$1, end_pos:$2, pad:$3, fraction:$4, contents:$5, disp_flags:$6, all_solid:$7, start_solid:$8, pod:$9, surface:$10, hit_group:$11, pud:$12, hit_entity:$13, hitbox:$14}","insertTextFormat":2},{"label":"Ray","kind":22,"detail":"pub struct Ray","insertText":"Ray{start:$1, pad:$2, delta:$3, pod:$4, is_ray:$5, is_swept:$6}","insertTextFormat":2},{"label":"IEngineTrace","kind":22,"detail":"pub struct IEngineTrace","insertText":"IEngineTrace{}","insertTextFormat":1},{"label":"CGlobalVarsBase","kind":22,"detail":"pub struct CGlobalVarsBase","insertText":"CGlobalVarsBase{realtime:$1, framecount:$2, absoluteframetime:$3, absoluteframestarttimestddev:$4, curtime:$5, frametime:$6, max_clients:$7, tickcount:$8, interval_per_tick:$9, interpolation_amount:$10, sim_ticks_this_frame:$11, network_protocol:$12, p_save_data:$13, bclient:$14, bremoteclient:$15, timestamp_networking_base:$16, timestamp_randomize_window:$17}","insertTextFormat":2},{"label":"msg_c","kind":3,"detail":"fn msg_c(with_color Color, and_text string)","insertText":"msg_c($0, $1)","insertTextFormat":2},{"label":"msg","kind":3,"detail":"fn msg(with_text string)","insertText":"msg($0)","insertTextFormat":2},{"label":"ISurface","kind":22,"detail":"pub struct ISurface","insertText":"ISurface{}","insertTextFormat":1},{"label":"IVModelInfo","kind":22,"detail":"pub struct IVModelInfo","insertText":"IVModelInfo{}","insertTextFormat":1},{"label":"IEntityList","kind":22,"detail":"pub struct IEntityList","insertText":"IEntityList{}","insertTextFormat":1},{"label":"IMaterial","kind":22,"detail":"pub struct IMaterial","insertText":"IMaterial{}","insertTextFormat":1},{"label":"IMaterialSystem","kind":22,"detail":"struct IMaterialSystem","insertText":"IMaterialSystem{}","insertTextFormat":1},{"label":"ICvar","kind":22,"detail":"pub struct ICvar","insertText":"ICvar{}","insertTextFormat":1},{"label":"CDrawModelInfo","kind":22,"detail":"pub struct CDrawModelInfo","insertText":"CDrawModelInfo{studio_hdr:$1, hardware_data:$2, decals:$3, skin:$4, body:$5, hitbox_set:$6, renderable:$7}","insertTextFormat":2},{"label":"IStudioRender","kind":22,"detail":"pub struct IStudioRender","insertText":"IStudioRender{}","insertTextFormat":1},{"label":"WeaponData","kind":22,"detail":"pub struct WeaponData","insertText":"WeaponData{pad:$1, clean_name:$2, pud:$3, max_clip:$4, pid:$5, name:$6, pod:$7, w_type:$8, pzd:$9, full_auto:$10, phd:$11, damage:$12, armor_ratio:$13, bullets:$14, penetration:$15, pkd:$16, range:$17, range_modifier:$18, pnd:$19, has_silencer:$20}","insertTextFormat":2},{"label":"IWeaponSystem","kind":22,"detail":"pub struct IWeaponSystem","insertText":"IWeaponSystem{}","insertTextFormat":1},{"label":"PlayerInfo","kind":22,"detail":"pub struct PlayerInfo","insertText":"PlayerInfo{pad:$1, pod:$2, sz_name:$3, user_id:$4, sz_steam_id:$5, pud:$6, steam_id:$7, friends_sz_name:$8, fake_player:$9, hltv:$10, custom_files:$11, files_downloaded:$12}","insertTextFormat":2},{"label":"IVEngineClient","kind":22,"detail":"pub struct IVEngineClient","insertText":"IVEngineClient{}","insertTextFormat":1},{"label":"IBaseClientDLL","kind":22,"detail":"pub struct IBaseClientDLL","insertText":"IBaseClientDLL{}","insertTextFormat":1},{"label":"IInputSystem","kind":22,"detail":"pub struct IInputSystem","insertText":"IInputSystem{}","insertTextFormat":1},{"label":"IVDebugOverlay","kind":22,"detail":"pub struct IVDebugOverlay","insertText":"IVDebugOverlay{}","insertTextFormat":1},{"label":"raw_name","kind":6,"detail":"mut raw_name string","insertText":"raw_name","insertTextFormat":1},{"label":"cleaned_name","kind":6,"detail":"mut cleaned_name string","insertText":"cleaned_name","insertTextFormat":1},{"label":"CCLientClass","kind":22,"detail":"pub struct CCLientClass","insertText":"CCLientClass{create_fn:$1, create_event_fn:$2, network_name:$3, recvtable_ptr:$4, next_ptr:$5, class_id:$6}","insertTextFormat":2},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664320527}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_material_system.v","diagnostics":[]}},"timestamp":1664320527}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":113,"method":"textDocument/completion","params":{"position":{"line":19,"character":4},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_material_system.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664320527}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":113,"result":[]},"timestamp":1664320527}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_material_system.v","diagnostics":[]}},"timestamp":1664320527}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/i_material_system.v","diagnostics":[]}},"timestamp":1664320528}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/math.v","diagnostics":[]}},"timestamp":1664320576}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/math.v","diagnostics":[]}},"timestamp":1664320576}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/mem.v","diagnostics":[]}},"timestamp":1664320577}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/mem.v","diagnostics":[]}},"timestamp":1664320577}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/mem.v","diagnostics":[]}},"timestamp":1664320577}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/mem.v","diagnostics":[{"range":{"start":{"line":64,"character":18},"end":{"line":64,"character":18}},"severity":1,"code":"","source":"","message":"unknown function: C.GetModuleHandleA","relatedInformation":[]},{"range":{"start":{"line":65,"character":28},"end":{"line":65,"character":28}},"severity":1,"code":"","source":"","message":"expression does not return a value so it cannot be cast","relatedInformation":[]},{"range":{"start":{"line":66,"character":49},"end":{"line":66,"character":49}},"severity":1,"code":"","source":"","message":"expression does not return a value so it cannot be cast","relatedInformation":[]},{"range":{"start":{"line":77,"character":18},"end":{"line":77,"character":18}},"severity":1,"code":"","source":"","message":"expression does not return a value so it cannot be cast","relatedInformation":[]},{"range":{"start":{"line":106,"character":12},"end":{"line":106,"character":12}},"severity":1,"code":"","source":"","message":"unknown function: C.GetModuleHandleA","relatedInformation":[]},{"range":{"start":{"line":2,"character":7},"end":{"line":2,"character":7}},"severity":2,"code":"","source":"","message":"module 'time' is imported but never used","relatedInformation":[]}]}},"timestamp":1664320577}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/mem.v","diagnostics":[]}},"timestamp":1664320645}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/utils/mem.v","diagnostics":[{"range":{"start":{"line":64,"character":18},"end":{"line":64,"character":18}},"severity":1,"code":"","source":"","message":"unknown function: C.GetModuleHandleA","relatedInformation":[]},{"range":{"start":{"line":65,"character":28},"end":{"line":65,"character":28}},"severity":1,"code":"","source":"","message":"expression does not return a value so it cannot be cast","relatedInformation":[]},{"range":{"start":{"line":66,"character":49},"end":{"line":66,"character":49}},"severity":1,"code":"","source":"","message":"expression does not return a value so it cannot be cast","relatedInformation":[]},{"range":{"start":{"line":77,"character":18},"end":{"line":77,"character":18}},"severity":1,"code":"","source":"","message":"expression does not return a value so it cannot be cast","relatedInformation":[]},{"range":{"start":{"line":106,"character":12},"end":{"line":106,"character":12}},"severity":1,"code":"","source":"","message":"unknown function: C.GetModuleHandleA","relatedInformation":[]},{"range":{"start":{"line":2,"character":7},"end":{"line":2,"character":7}},"severity":2,"code":"","source":"","message":"module 'time' is imported but never used","relatedInformation":[]}]}},"timestamp":1664320645}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":114,"method":"textDocument/completion","params":{"position":{"line":43,"character":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/entities.v"},"context":{"triggerKind":1}}},"timestamp":1664320666}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":114,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"Entity_t","kind":22,"detail":"pub struct Entity_t","insertText":"Entity_t{}","insertTextFormat":1},{"label":"IClientUnknown","kind":22,"detail":"struct IClientUnknown","insertText":"IClientUnknown{}","insertTextFormat":1},{"label":"IClientRenderable","kind":22,"detail":"struct IClientRenderable","insertText":"IClientRenderable{}","insertTextFormat":1},{"label":"Weapon_t","kind":22,"detail":"pub struct Weapon_t","insertText":"Weapon_t{}","insertTextFormat":1},{"label":"Player","kind":22,"detail":"pub struct Player","insertText":"Player{}","insertTextFormat":1},{"label":"Item","kind":22,"detail":"struct Item","insertText":"Item{}","insertTextFormat":1},{"label":"Viewmodel","kind":22,"detail":"pub struct Viewmodel","insertText":"Viewmodel{}","insertTextFormat":1},{"label":"contents_solid","kind":6,"detail":"pub const contents_solid int","insertText":"contents_solid","insertTextFormat":1},{"label":"contents_moveable","kind":6,"detail":"pub const contents_moveable int","insertText":"contents_moveable","insertTextFormat":1},{"label":"contents_monsterclip","kind":6,"detail":"pub const contents_monsterclip int","insertText":"contents_monsterclip","insertTextFormat":1},{"label":"contents_window","kind":6,"detail":"pub const contents_window int","insertText":"contents_window","insertTextFormat":1},{"label":"contents_debris","kind":6,"detail":"pub const contents_debris int","insertText":"contents_debris","insertTextFormat":1},{"label":"contents_hitbox","kind":6,"detail":"pub const contents_hitbox int","insertText":"contents_hitbox","insertTextFormat":1},{"label":"contents_grate","kind":6,"detail":"pub const contents_grate int","insertText":"contents_grate","insertTextFormat":1},{"label":"contents_ignore_nodraw_opaque","kind":6,"detail":"pub const contents_ignore_nodraw_opaque int","insertText":"contents_ignore_nodraw_opaque","insertTextFormat":1},{"label":"contents_opaque","kind":6,"detail":"pub const contents_opaque int","insertText":"contents_opaque","insertTextFormat":1},{"label":"mask_shot","kind":6,"detail":"pub const mask_shot","insertText":"mask_shot","insertTextFormat":1},{"label":"mask_opaque","kind":6,"detail":"pub const mask_opaque","insertText":"mask_opaque","insertTextFormat":1},{"label":"mask_visible","kind":6,"detail":"pub const mask_visible","insertText":"mask_visible","insertTextFormat":1},{"label":"CTraceFilter","kind":22,"detail":"pub struct CTraceFilter","insertText":"CTraceFilter{v_table:$1, p_skip:$2}","insertTextFormat":2},{"label":"CSurface","kind":22,"detail":"pub struct CSurface","insertText":"CSurface{name:$1, surface_prop:$2, flags:$3}","insertTextFormat":2},{"label":"CGameTrace","kind":22,"detail":"pub struct CGameTrace","insertText":"CGameTrace{start_pos:$1, end_pos:$2, pad:$3, fraction:$4, contents:$5, disp_flags:$6, all_solid:$7, start_solid:$8, pod:$9, surface:$10, hit_group:$11, pud:$12, hit_entity:$13, hitbox:$14}","insertTextFormat":2},{"label":"Ray","kind":22,"detail":"pub struct Ray","insertText":"Ray{start:$1, pad:$2, delta:$3, pod:$4, is_ray:$5, is_swept:$6}","insertTextFormat":2},{"label":"IEngineTrace","kind":22,"detail":"pub struct IEngineTrace","insertText":"IEngineTrace{}","insertTextFormat":1},{"label":"CGlobalVarsBase","kind":22,"detail":"pub struct CGlobalVarsBase","insertText":"CGlobalVarsBase{realtime:$1, framecount:$2, absoluteframetime:$3, absoluteframestarttimestddev:$4, curtime:$5, frametime:$6, max_clients:$7, tickcount:$8, interval_per_tick:$9, interpolation_amount:$10, sim_ticks_this_frame:$11, network_protocol:$12, p_save_data:$13, bclient:$14, bremoteclient:$15, timestamp_networking_base:$16, timestamp_randomize_window:$17}","insertTextFormat":2},{"label":"msg_c","kind":3,"detail":"fn msg_c(with_color Color, and_text string)","insertText":"msg_c($0, $1)","insertTextFormat":2},{"label":"msg","kind":3,"detail":"fn msg(with_text string)","insertText":"msg($0)","insertTextFormat":2},{"label":"ISurface","kind":22,"detail":"pub struct ISurface","insertText":"ISurface{}","insertTextFormat":1},{"label":"IVModelInfo","kind":22,"detail":"pub struct IVModelInfo","insertText":"IVModelInfo{}","insertTextFormat":1},{"label":"IEntityList","kind":22,"detail":"pub struct IEntityList","insertText":"IEntityList{}","insertTextFormat":1},{"label":"IMaterial","kind":22,"detail":"pub struct IMaterial","insertText":"IMaterial{}","insertTextFormat":1},{"label":"IMaterialSystem","kind":22,"detail":"pub struct IMaterialSystem","insertText":"IMaterialSystem{}","insertTextFormat":1},{"label":"ICvar","kind":22,"detail":"pub struct ICvar","insertText":"ICvar{}","insertTextFormat":1},{"label":"CDrawModelInfo","kind":22,"detail":"pub struct CDrawModelInfo","insertText":"CDrawModelInfo{studio_hdr:$1, hardware_data:$2, decals:$3, skin:$4, body:$5, hitbox_set:$6, renderable:$7}","insertTextFormat":2},{"label":"IStudioRender","kind":22,"detail":"pub struct IStudioRender","insertText":"IStudioRender{}","insertTextFormat":1},{"label":"WeaponData","kind":22,"detail":"pub struct WeaponData","insertText":"WeaponData{pad:$1, clean_name:$2, pud:$3, max_clip:$4, pid:$5, name:$6, pod:$7, w_type:$8, pzd:$9, full_auto:$10, phd:$11, damage:$12, armor_ratio:$13, bullets:$14, penetration:$15, pkd:$16, range:$17, range_modifier:$18, pnd:$19, has_silencer:$20}","insertTextFormat":2},{"label":"IWeaponSystem","kind":22,"detail":"pub struct IWeaponSystem","insertText":"IWeaponSystem{}","insertTextFormat":1},{"label":"PlayerInfo","kind":22,"detail":"pub struct PlayerInfo","insertText":"PlayerInfo{pad:$1, pod:$2, sz_name:$3, user_id:$4, sz_steam_id:$5, pud:$6, steam_id:$7, friends_sz_name:$8, fake_player:$9, hltv:$10, custom_files:$11, files_downloaded:$12}","insertTextFormat":2},{"label":"IVEngineClient","kind":22,"detail":"pub struct IVEngineClient","insertText":"IVEngineClient{}","insertTextFormat":1},{"label":"IBaseClientDLL","kind":22,"detail":"pub struct IBaseClientDLL","insertText":"IBaseClientDLL{}","insertTextFormat":1},{"label":"IInputSystem","kind":22,"detail":"pub struct IInputSystem","insertText":"IInputSystem{}","insertTextFormat":1},{"label":"IVDebugOverlay","kind":22,"detail":"pub struct IVDebugOverlay","insertText":"IVDebugOverlay{}","insertTextFormat":1},{"label":"raw_name","kind":6,"detail":"mut raw_name string","insertText":"raw_name","insertTextFormat":1},{"label":"cleaned_name","kind":6,"detail":"mut cleaned_name string","insertText":"cleaned_name","insertTextFormat":1},{"label":"CCLientClass","kind":22,"detail":"pub struct CCLientClass","insertText":"CCLientClass{create_fn:$1, create_event_fn:$2, network_name:$3, recvtable_ptr:$4, next_ptr:$5, class_id:$6}","insertTextFormat":2},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664320666}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/entities.v","diagnostics":[]}},"timestamp":1664320666}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/entities.v","diagnostics":[]}},"timestamp":1664320666}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":115,"method":"textDocument/completion","params":{"position":{"line":43,"character":4},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/entities.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664320666}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":115,"result":[]},"timestamp":1664320666}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/entities.v","diagnostics":[]}},"timestamp":1664320666}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":116,"method":"textDocument/completion","params":{"position":{"line":49,"character":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/entities.v"},"context":{"triggerKind":1}}},"timestamp":1664320668}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":116,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"Entity_t","kind":22,"detail":"pub struct Entity_t","insertText":"Entity_t{}","insertTextFormat":1},{"label":"IClientUnknown","kind":22,"detail":"pub struct IClientUnknown","insertText":"IClientUnknown{}","insertTextFormat":1},{"label":"IClientRenderable","kind":22,"detail":"struct IClientRenderable","insertText":"IClientRenderable{}","insertTextFormat":1},{"label":"Weapon_t","kind":22,"detail":"pub struct Weapon_t","insertText":"Weapon_t{}","insertTextFormat":1},{"label":"Player","kind":22,"detail":"pub struct Player","insertText":"Player{}","insertTextFormat":1},{"label":"Item","kind":22,"detail":"struct Item","insertText":"Item{}","insertTextFormat":1},{"label":"Viewmodel","kind":22,"detail":"pub struct Viewmodel","insertText":"Viewmodel{}","insertTextFormat":1},{"label":"contents_solid","kind":6,"detail":"pub const contents_solid int","insertText":"contents_solid","insertTextFormat":1},{"label":"contents_moveable","kind":6,"detail":"pub const contents_moveable int","insertText":"contents_moveable","insertTextFormat":1},{"label":"contents_monsterclip","kind":6,"detail":"pub const contents_monsterclip int","insertText":"contents_monsterclip","insertTextFormat":1},{"label":"contents_window","kind":6,"detail":"pub const contents_window int","insertText":"contents_window","insertTextFormat":1},{"label":"contents_debris","kind":6,"detail":"pub const contents_debris int","insertText":"contents_debris","insertTextFormat":1},{"label":"contents_hitbox","kind":6,"detail":"pub const contents_hitbox int","insertText":"contents_hitbox","insertTextFormat":1},{"label":"contents_grate","kind":6,"detail":"pub const contents_grate int","insertText":"contents_grate","insertTextFormat":1},{"label":"contents_ignore_nodraw_opaque","kind":6,"detail":"pub const contents_ignore_nodraw_opaque int","insertText":"contents_ignore_nodraw_opaque","insertTextFormat":1},{"label":"contents_opaque","kind":6,"detail":"pub const contents_opaque int","insertText":"contents_opaque","insertTextFormat":1},{"label":"mask_shot","kind":6,"detail":"pub const mask_shot","insertText":"mask_shot","insertTextFormat":1},{"label":"mask_opaque","kind":6,"detail":"pub const mask_opaque","insertText":"mask_opaque","insertTextFormat":1},{"label":"mask_visible","kind":6,"detail":"pub const mask_visible","insertText":"mask_visible","insertTextFormat":1},{"label":"CTraceFilter","kind":22,"detail":"pub struct CTraceFilter","insertText":"CTraceFilter{v_table:$1, p_skip:$2}","insertTextFormat":2},{"label":"CSurface","kind":22,"detail":"pub struct CSurface","insertText":"CSurface{name:$1, surface_prop:$2, flags:$3}","insertTextFormat":2},{"label":"CGameTrace","kind":22,"detail":"pub struct CGameTrace","insertText":"CGameTrace{start_pos:$1, end_pos:$2, pad:$3, fraction:$4, contents:$5, disp_flags:$6, all_solid:$7, start_solid:$8, pod:$9, surface:$10, hit_group:$11, pud:$12, hit_entity:$13, hitbox:$14}","insertTextFormat":2},{"label":"Ray","kind":22,"detail":"pub struct Ray","insertText":"Ray{start:$1, pad:$2, delta:$3, pod:$4, is_ray:$5, is_swept:$6}","insertTextFormat":2},{"label":"IEngineTrace","kind":22,"detail":"pub struct IEngineTrace","insertText":"IEngineTrace{}","insertTextFormat":1},{"label":"CGlobalVarsBase","kind":22,"detail":"pub struct CGlobalVarsBase","insertText":"CGlobalVarsBase{realtime:$1, framecount:$2, absoluteframetime:$3, absoluteframestarttimestddev:$4, curtime:$5, frametime:$6, max_clients:$7, tickcount:$8, interval_per_tick:$9, interpolation_amount:$10, sim_ticks_this_frame:$11, network_protocol:$12, p_save_data:$13, bclient:$14, bremoteclient:$15, timestamp_networking_base:$16, timestamp_randomize_window:$17}","insertTextFormat":2},{"label":"msg_c","kind":3,"detail":"fn msg_c(with_color Color, and_text string)","insertText":"msg_c($0, $1)","insertTextFormat":2},{"label":"msg","kind":3,"detail":"fn msg(with_text string)","insertText":"msg($0)","insertTextFormat":2},{"label":"ISurface","kind":22,"detail":"pub struct ISurface","insertText":"ISurface{}","insertTextFormat":1},{"label":"IVModelInfo","kind":22,"detail":"pub struct IVModelInfo","insertText":"IVModelInfo{}","insertTextFormat":1},{"label":"IEntityList","kind":22,"detail":"pub struct IEntityList","insertText":"IEntityList{}","insertTextFormat":1},{"label":"IMaterial","kind":22,"detail":"pub struct IMaterial","insertText":"IMaterial{}","insertTextFormat":1},{"label":"IMaterialSystem","kind":22,"detail":"pub struct IMaterialSystem","insertText":"IMaterialSystem{}","insertTextFormat":1},{"label":"ICvar","kind":22,"detail":"pub struct ICvar","insertText":"ICvar{}","insertTextFormat":1},{"label":"CDrawModelInfo","kind":22,"detail":"pub struct CDrawModelInfo","insertText":"CDrawModelInfo{studio_hdr:$1, hardware_data:$2, decals:$3, skin:$4, body:$5, hitbox_set:$6, renderable:$7}","insertTextFormat":2},{"label":"IStudioRender","kind":22,"detail":"pub struct IStudioRender","insertText":"IStudioRender{}","insertTextFormat":1},{"label":"WeaponData","kind":22,"detail":"pub struct WeaponData","insertText":"WeaponData{pad:$1, clean_name:$2, pud:$3, max_clip:$4, pid:$5, name:$6, pod:$7, w_type:$8, pzd:$9, full_auto:$10, phd:$11, damage:$12, armor_ratio:$13, bullets:$14, penetration:$15, pkd:$16, range:$17, range_modifier:$18, pnd:$19, has_silencer:$20}","insertTextFormat":2},{"label":"IWeaponSystem","kind":22,"detail":"pub struct IWeaponSystem","insertText":"IWeaponSystem{}","insertTextFormat":1},{"label":"PlayerInfo","kind":22,"detail":"pub struct PlayerInfo","insertText":"PlayerInfo{pad:$1, pod:$2, sz_name:$3, user_id:$4, sz_steam_id:$5, pud:$6, steam_id:$7, friends_sz_name:$8, fake_player:$9, hltv:$10, custom_files:$11, files_downloaded:$12}","insertTextFormat":2},{"label":"IVEngineClient","kind":22,"detail":"pub struct IVEngineClient","insertText":"IVEngineClient{}","insertTextFormat":1},{"label":"IBaseClientDLL","kind":22,"detail":"pub struct IBaseClientDLL","insertText":"IBaseClientDLL{}","insertTextFormat":1},{"label":"IInputSystem","kind":22,"detail":"pub struct IInputSystem","insertText":"IInputSystem{}","insertTextFormat":1},{"label":"IVDebugOverlay","kind":22,"detail":"pub struct IVDebugOverlay","insertText":"IVDebugOverlay{}","insertTextFormat":1},{"label":"raw_name","kind":6,"detail":"mut raw_name string","insertText":"raw_name","insertTextFormat":1},{"label":"cleaned_name","kind":6,"detail":"mut cleaned_name string","insertText":"cleaned_name","insertTextFormat":1},{"label":"CCLientClass","kind":22,"detail":"pub struct CCLientClass","insertText":"CCLientClass{create_fn:$1, create_event_fn:$2, network_name:$3, recvtable_ptr:$4, next_ptr:$5, class_id:$6}","insertTextFormat":2},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664320668}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/entities.v","diagnostics":[]}},"timestamp":1664320668}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/entities.v","diagnostics":[]}},"timestamp":1664320669}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":117,"method":"textDocument/completion","params":{"position":{"line":49,"character":4},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/entities.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664320669}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":117,"result":[]},"timestamp":1664320669}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/entities.v","diagnostics":[]}},"timestamp":1664320669}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/entities.v","diagnostics":[]}},"timestamp":1664320672}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/entities.v","diagnostics":[]}},"timestamp":1664321018}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/valve/entities.v","diagnostics":[]}},"timestamp":1664321018}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664321026}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664321026}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1664321034}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1664321034}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/visuals.v","diagnostics":[]}},"timestamp":1664321357}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/visuals.v","diagnostics":[]}},"timestamp":1664321357}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/visuals.v","diagnostics":[]}},"timestamp":1664321457}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/visuals.v","diagnostics":[]}},"timestamp":1664321459}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/visuals.v","diagnostics":[]}},"timestamp":1664321535}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/visuals.v","diagnostics":[]}},"timestamp":1664321535}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/visuals.v","diagnostics":[]}},"timestamp":1664321988}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/visuals.v","diagnostics":[]}},"timestamp":1664321989}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_cacher.v","diagnostics":[]}},"timestamp":1664322583}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_cacher.v","diagnostics":[]}},"timestamp":1664322584}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322585}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322585}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322697}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322698}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322698}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322698}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322698}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322698}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322699}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":118,"method":"textDocument/completion","params":{"position":{"line":79,"character":4},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v"},"context":{"triggerKind":1}}},"timestamp":1664322699}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":118,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"math","kind":9,"detail":"","insertText":"math","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"e","kind":6,"detail":"mut e Engine","insertText":"e","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx","insertText":"app_ctx","insertTextFormat":1},{"label":"force_attack","kind":6,"detail":"mut force_attack Value","insertText":"force_attack","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664322699}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322699}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322699}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":119,"method":"textDocument/completion","params":{"position":{"line":79,"character":4},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v"},"context":{"triggerKind":1}}},"timestamp":1664322699}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":119,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"math","kind":9,"detail":"","insertText":"math","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"e","kind":6,"detail":"mut e Engine","insertText":"e","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx","insertText":"app_ctx","insertTextFormat":1},{"label":"force_attack","kind":6,"detail":"mut force_attack Value","insertText":"force_attack","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664322699}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322699}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322700}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322700}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322700}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322700}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":120,"method":"textDocument/completion","params":{"position":{"line":79,"character":9},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v"},"context":{"triggerKind":2,"triggerCharacter":"."}}},"timestamp":1664322700}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":120,"result":[{"label":"radian","kind":6,"detail":"pub const radian f32","insertText":"radian","insertTextFormat":1},{"label":"Vec3","kind":22,"detail":"pub struct Vec3","insertText":"Vec3{x:$1, y:$2, z:$3}","insertTextFormat":2},{"label":"distance_from","kind":3,"detail":"pub fn distance_from(from_ent Vec3, to_ent Vec3) f32","insertText":"distance_from($0, $1)","insertTextFormat":2},{"label":"sin_cos","kind":3,"detail":"pub fn sin_cos(with_radion f32) (f32, f32)","insertText":"sin_cos($0)","insertTextFormat":2},{"label":"Angle","kind":22,"detail":"pub struct Angle","insertText":"Angle{pitch:$1, yaw:$2, roll:$3}","insertTextFormat":2},{"label":"angle_to_vectors","kind":3,"detail":"pub fn angle_to_vectors(with_angle Angle) (Vec3, Vec3, Vec3)","insertText":"angle_to_vectors($0)","insertTextFormat":2},{"label":"get_val_offset","kind":3,"detail":"pub fn get_val_offset(in_this_obj voidptr, at_offset usize) &T","insertText":"get_val_offset($0, $1)","insertTextFormat":2},{"label":"pattern_scan","kind":3,"detail":"pub fn pattern_scan(in_module string, with_sig string) ?voidptr","insertText":"pattern_scan($0, $1)","insertTextFormat":2},{"label":"wait_for_module","kind":3,"detail":"pub fn wait_for_module(mut with_modules []string, and_max_timeout int)","insertText":"wait_for_module($0, $1)","insertTextFormat":2},{"label":"Matrix","kind":22,"detail":"pub struct Matrix","insertText":"Matrix{m:$1}","insertTextFormat":2},{"label":"Vec2","kind":22,"detail":"pub struct Vec2","insertText":"Vec2{x:$1, y:$2}","insertTextFormat":2},{"label":"op_vec","kind":3,"detail":"pub fn op_vec(with_op_val f32) Vec3","insertText":"op_vec($0)","insertTextFormat":2},{"label":"new_angle","kind":3,"detail":"pub fn new_angle(x T, y T, z T) Angle","insertText":"new_angle($0, $1, $2)","insertTextFormat":2},{"label":"new_vec3","kind":3,"detail":"pub fn new_vec3(x T, y T, z T) Vec3","insertText":"new_vec3($0, $1, $2)","insertTextFormat":2},{"label":"new_vec2","kind":3,"detail":"pub fn new_vec2(x T, y T) Vec2","insertText":"new_vec2($0, $1)","insertTextFormat":2},{"label":"HResult","kind":22,"detail":"pub struct HResult","insertText":"HResult{val:$1}","insertTextFormat":2},{"label":"h_res","kind":3,"detail":"pub fn h_res(with_hres int) HResult","insertText":"h_res($0)","insertTextFormat":2},{"label":"str_align","kind":3,"detail":"pub fn str_align(with_og_text string, with_spaces_count i32, and_final_sep string) string","insertText":"str_align($0, $1, $2)","insertTextFormat":2},{"label":"load_unload_console","kind":3,"detail":"pub fn load_unload_console(with_switch bool, and_file &C.FILE)","insertText":"load_unload_console($0, $1)","insertTextFormat":2},{"label":"Color","kind":22,"detail":"pub struct Color","insertText":"Color{, rgba:$1}","insertTextFormat":2},{"label":"pront","kind":3,"detail":"pub fn pront(with_text string)","insertText":"pront($0)","insertTextFormat":2},{"label":"ColorRgbF","kind":22,"detail":"pub struct ColorRgbF","insertText":"ColorRgbF{r:$1, g:$2, b:$3}","insertTextFormat":2},{"label":"ColorRgbaF","kind":22,"detail":"pub struct ColorRgbaF","insertText":"ColorRgbaF{r:$1, g:$2, b:$3, a:$4}","insertTextFormat":2},{"label":"color_rbga","kind":3,"detail":"pub fn color_rbga(r_ T, g_ T, b_ T, a_ T) Color","insertText":"color_rbga($0, $1, $2, $3)","insertTextFormat":2},{"label":"color_f_rbga","kind":3,"detail":"pub fn color_f_rbga(r_ T, g_ T, b_ T, a_ T) Color","insertText":"color_f_rbga($0, $1, $2, $3)","insertTextFormat":2},{"label":"color_hex","kind":3,"detail":"pub fn color_hex(withHex u32) Color","insertText":"color_hex($0)","insertTextFormat":2},{"label":"error_critical","kind":3,"detail":"pub fn error_critical(with_error string, and_error_complement string)","insertText":"error_critical($0, $1)","insertTextFormat":2},{"label":"client_error","kind":3,"detail":"pub fn client_error(with_error string)","insertText":"client_error($0)","insertTextFormat":2}]},"timestamp":1664322700}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322700}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322700}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322701}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322701}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322701}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322701}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322702}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322702}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322702}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322702}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322703}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322703}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":121,"method":"textDocument/completion","params":{"position":{"line":79,"character":15},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v"},"context":{"triggerKind":2,"triggerCharacter":"("}}},"timestamp":1664322703}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":121,"result":[{"label":"app_ctx","kind":6,"detail":"mut app_ctx","insertText":"app_ctx","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664322703}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322703}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322704}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322704}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":122,"method":"textDocument/completion","params":{"position":{"line":79,"character":17},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v"},"context":{"triggerKind":1}}},"timestamp":1664322706}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":122,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"math","kind":9,"detail":"","insertText":"math","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"e","kind":6,"detail":"mut e Engine","insertText":"e","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx","insertText":"app_ctx","insertTextFormat":1},{"label":"force_attack","kind":6,"detail":"mut force_attack Value","insertText":"force_attack","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"force_attack","kind":6,"detail":"mut force_attack Value","insertText":"force_attack","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664322706}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322706}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322706}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322706}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322706}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322707}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322707}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322707}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322709}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322787}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322787}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322802}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322802}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322802}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":123,"method":"textDocument/completion","params":{"position":{"line":56,"character":3},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v"},"context":{"triggerKind":1}}},"timestamp":1664322802}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":123,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"math","kind":9,"detail":"","insertText":"math","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"e","kind":6,"detail":"mut e Engine","insertText":"e","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"force_attack","kind":6,"detail":"mut force_attack Value","insertText":"force_attack","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"force_attack","kind":6,"detail":"mut force_attack Value","insertText":"force_attack","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664322802}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322802}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322803}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322803}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322803}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322803}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":124,"method":"textDocument/completion","params":{"position":{"line":56,"character":8},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v"},"context":{"triggerKind":2,"triggerCharacter":"."}}},"timestamp":1664322803}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":124,"result":[{"label":"radian","kind":6,"detail":"pub const radian f32","insertText":"radian","insertTextFormat":1},{"label":"Vec3","kind":22,"detail":"pub struct Vec3","insertText":"Vec3{x:$1, y:$2, z:$3}","insertTextFormat":2},{"label":"distance_from","kind":3,"detail":"pub fn distance_from(from_ent Vec3, to_ent Vec3) f32","insertText":"distance_from($0, $1)","insertTextFormat":2},{"label":"sin_cos","kind":3,"detail":"pub fn sin_cos(with_radion f32) (f32, f32)","insertText":"sin_cos($0)","insertTextFormat":2},{"label":"Angle","kind":22,"detail":"pub struct Angle","insertText":"Angle{pitch:$1, yaw:$2, roll:$3}","insertTextFormat":2},{"label":"angle_to_vectors","kind":3,"detail":"pub fn angle_to_vectors(with_angle Angle) (Vec3, Vec3, Vec3)","insertText":"angle_to_vectors($0)","insertTextFormat":2},{"label":"get_val_offset","kind":3,"detail":"pub fn get_val_offset(in_this_obj voidptr, at_offset usize) &T","insertText":"get_val_offset($0, $1)","insertTextFormat":2},{"label":"pattern_scan","kind":3,"detail":"pub fn pattern_scan(in_module string, with_sig string) ?voidptr","insertText":"pattern_scan($0, $1)","insertTextFormat":2},{"label":"wait_for_module","kind":3,"detail":"pub fn wait_for_module(mut with_modules []string, and_max_timeout int)","insertText":"wait_for_module($0, $1)","insertTextFormat":2},{"label":"Matrix","kind":22,"detail":"pub struct Matrix","insertText":"Matrix{m:$1}","insertTextFormat":2},{"label":"Vec2","kind":22,"detail":"pub struct Vec2","insertText":"Vec2{x:$1, y:$2}","insertTextFormat":2},{"label":"op_vec","kind":3,"detail":"pub fn op_vec(with_op_val f32) Vec3","insertText":"op_vec($0)","insertTextFormat":2},{"label":"new_angle","kind":3,"detail":"pub fn new_angle(x T, y T, z T) Angle","insertText":"new_angle($0, $1, $2)","insertTextFormat":2},{"label":"new_vec3","kind":3,"detail":"pub fn new_vec3(x T, y T, z T) Vec3","insertText":"new_vec3($0, $1, $2)","insertTextFormat":2},{"label":"new_vec2","kind":3,"detail":"pub fn new_vec2(x T, y T) Vec2","insertText":"new_vec2($0, $1)","insertTextFormat":2},{"label":"HResult","kind":22,"detail":"pub struct HResult","insertText":"HResult{val:$1}","insertTextFormat":2},{"label":"h_res","kind":3,"detail":"pub fn h_res(with_hres int) HResult","insertText":"h_res($0)","insertTextFormat":2},{"label":"str_align","kind":3,"detail":"pub fn str_align(with_og_text string, with_spaces_count i32, and_final_sep string) string","insertText":"str_align($0, $1, $2)","insertTextFormat":2},{"label":"load_unload_console","kind":3,"detail":"pub fn load_unload_console(with_switch bool, and_file &C.FILE)","insertText":"load_unload_console($0, $1)","insertTextFormat":2},{"label":"Color","kind":22,"detail":"pub struct Color","insertText":"Color{, rgba:$1}","insertTextFormat":2},{"label":"pront","kind":3,"detail":"pub fn pront(with_text string)","insertText":"pront($0)","insertTextFormat":2},{"label":"ColorRgbF","kind":22,"detail":"pub struct ColorRgbF","insertText":"ColorRgbF{r:$1, g:$2, b:$3}","insertTextFormat":2},{"label":"ColorRgbaF","kind":22,"detail":"pub struct ColorRgbaF","insertText":"ColorRgbaF{r:$1, g:$2, b:$3, a:$4}","insertTextFormat":2},{"label":"color_rbga","kind":3,"detail":"pub fn color_rbga(r_ T, g_ T, b_ T, a_ T) Color","insertText":"color_rbga($0, $1, $2, $3)","insertTextFormat":2},{"label":"color_f_rbga","kind":3,"detail":"pub fn color_f_rbga(r_ T, g_ T, b_ T, a_ T) Color","insertText":"color_f_rbga($0, $1, $2, $3)","insertTextFormat":2},{"label":"color_hex","kind":3,"detail":"pub fn color_hex(withHex u32) Color","insertText":"color_hex($0)","insertTextFormat":2},{"label":"error_critical","kind":3,"detail":"pub fn error_critical(with_error string, and_error_complement string)","insertText":"error_critical($0, $1)","insertTextFormat":2},{"label":"client_error","kind":3,"detail":"pub fn client_error(with_error string)","insertText":"client_error($0)","insertTextFormat":2}]},"timestamp":1664322803}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322803}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322803}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322804}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322804}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322805}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322805}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":125,"method":"textDocument/completion","params":{"position":{"line":56,"character":14},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v"},"context":{"triggerKind":2,"triggerCharacter":"("}}},"timestamp":1664322806}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":125,"result":[{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664322806}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322806}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322806}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322806}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":126,"method":"textDocument/completion","params":{"position":{"line":56,"character":16},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v"},"context":{"triggerKind":1}}},"timestamp":1664322808}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":126,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"math","kind":9,"detail":"","insertText":"math","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"e","kind":6,"detail":"mut e Engine","insertText":"e","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"force_attack","kind":6,"detail":"mut force_attack Value","insertText":"force_attack","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"force_attack","kind":6,"detail":"mut force_attack Value","insertText":"force_attack","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664322808}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322808}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322809}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322809}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322809}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322809}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322809}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322811}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322859}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322859}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322861}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322869}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322870}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322870}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322870}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322870}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322870}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":127,"method":"textDocument/completion","params":{"position":{"line":64,"character":3},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v"},"context":{"triggerKind":1}}},"timestamp":1664322871}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":127,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"math","kind":9,"detail":"","insertText":"math","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"e","kind":6,"detail":"mut e Engine","insertText":"e","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"force_attack","kind":6,"detail":"mut force_attack Value","insertText":"force_attack","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"force_attack","kind":6,"detail":"mut force_attack Value","insertText":"force_attack","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664322871}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322871}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322871}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322871}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322872}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322872}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":128,"method":"textDocument/completion","params":{"position":{"line":64,"character":8},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v"},"context":{"triggerKind":2,"triggerCharacter":"."}}},"timestamp":1664322872}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":128,"result":[{"label":"radian","kind":6,"detail":"pub const radian f32","insertText":"radian","insertTextFormat":1},{"label":"Vec3","kind":22,"detail":"pub struct Vec3","insertText":"Vec3{x:$1, y:$2, z:$3}","insertTextFormat":2},{"label":"distance_from","kind":3,"detail":"pub fn distance_from(from_ent Vec3, to_ent Vec3) f32","insertText":"distance_from($0, $1)","insertTextFormat":2},{"label":"sin_cos","kind":3,"detail":"pub fn sin_cos(with_radion f32) (f32, f32)","insertText":"sin_cos($0)","insertTextFormat":2},{"label":"Angle","kind":22,"detail":"pub struct Angle","insertText":"Angle{pitch:$1, yaw:$2, roll:$3}","insertTextFormat":2},{"label":"angle_to_vectors","kind":3,"detail":"pub fn angle_to_vectors(with_angle Angle) (Vec3, Vec3, Vec3)","insertText":"angle_to_vectors($0)","insertTextFormat":2},{"label":"get_val_offset","kind":3,"detail":"pub fn get_val_offset(in_this_obj voidptr, at_offset usize) &T","insertText":"get_val_offset($0, $1)","insertTextFormat":2},{"label":"pattern_scan","kind":3,"detail":"pub fn pattern_scan(in_module string, with_sig string) ?voidptr","insertText":"pattern_scan($0, $1)","insertTextFormat":2},{"label":"wait_for_module","kind":3,"detail":"pub fn wait_for_module(mut with_modules []string, and_max_timeout int)","insertText":"wait_for_module($0, $1)","insertTextFormat":2},{"label":"Matrix","kind":22,"detail":"pub struct Matrix","insertText":"Matrix{m:$1}","insertTextFormat":2},{"label":"Vec2","kind":22,"detail":"pub struct Vec2","insertText":"Vec2{x:$1, y:$2}","insertTextFormat":2},{"label":"op_vec","kind":3,"detail":"pub fn op_vec(with_op_val f32) Vec3","insertText":"op_vec($0)","insertTextFormat":2},{"label":"new_angle","kind":3,"detail":"pub fn new_angle(x T, y T, z T) Angle","insertText":"new_angle($0, $1, $2)","insertTextFormat":2},{"label":"new_vec3","kind":3,"detail":"pub fn new_vec3(x T, y T, z T) Vec3","insertText":"new_vec3($0, $1, $2)","insertTextFormat":2},{"label":"new_vec2","kind":3,"detail":"pub fn new_vec2(x T, y T) Vec2","insertText":"new_vec2($0, $1)","insertTextFormat":2},{"label":"HResult","kind":22,"detail":"pub struct HResult","insertText":"HResult{val:$1}","insertTextFormat":2},{"label":"h_res","kind":3,"detail":"pub fn h_res(with_hres int) HResult","insertText":"h_res($0)","insertTextFormat":2},{"label":"str_align","kind":3,"detail":"pub fn str_align(with_og_text string, with_spaces_count i32, and_final_sep string) string","insertText":"str_align($0, $1, $2)","insertTextFormat":2},{"label":"load_unload_console","kind":3,"detail":"pub fn load_unload_console(with_switch bool, and_file &C.FILE)","insertText":"load_unload_console($0, $1)","insertTextFormat":2},{"label":"Color","kind":22,"detail":"pub struct Color","insertText":"Color{, rgba:$1}","insertTextFormat":2},{"label":"pront","kind":3,"detail":"pub fn pront(with_text string)","insertText":"pront($0)","insertTextFormat":2},{"label":"ColorRgbF","kind":22,"detail":"pub struct ColorRgbF","insertText":"ColorRgbF{r:$1, g:$2, b:$3}","insertTextFormat":2},{"label":"ColorRgbaF","kind":22,"detail":"pub struct ColorRgbaF","insertText":"ColorRgbaF{r:$1, g:$2, b:$3, a:$4}","insertTextFormat":2},{"label":"color_rbga","kind":3,"detail":"pub fn color_rbga(r_ T, g_ T, b_ T, a_ T) Color","insertText":"color_rbga($0, $1, $2, $3)","insertTextFormat":2},{"label":"color_f_rbga","kind":3,"detail":"pub fn color_f_rbga(r_ T, g_ T, b_ T, a_ T) Color","insertText":"color_f_rbga($0, $1, $2, $3)","insertTextFormat":2},{"label":"color_hex","kind":3,"detail":"pub fn color_hex(withHex u32) Color","insertText":"color_hex($0)","insertTextFormat":2},{"label":"error_critical","kind":3,"detail":"pub fn error_critical(with_error string, and_error_complement string)","insertText":"error_critical($0, $1)","insertTextFormat":2},{"label":"client_error","kind":3,"detail":"pub fn client_error(with_error string)","insertText":"client_error($0)","insertTextFormat":2}]},"timestamp":1664322872}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322872}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322872}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322873}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322874}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322874}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322874}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322875}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322875}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322875}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":129,"method":"textDocument/completion","params":{"position":{"line":64,"character":14},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v"},"context":{"triggerKind":2,"triggerCharacter":"("}}},"timestamp":1664322875}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":129,"result":[{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664322875}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322875}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":130,"method":"textDocument/completion","params":{"position":{"line":64,"character":15},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v"},"context":{"triggerKind":2,"triggerCharacter":"("}}},"timestamp":1664322876}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":130,"result":[]},"timestamp":1664322876}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322876}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":131,"method":"textDocument/completion","params":{"position":{"line":64,"character":14},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v"},"context":{"triggerKind":2,"triggerCharacter":"("}}},"timestamp":1664322876}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":131,"result":[{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664322876}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322876}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322876}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322877}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":132,"method":"textDocument/completion","params":{"position":{"line":64,"character":16},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v"},"context":{"triggerKind":1}}},"timestamp":1664322878}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":132,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"math","kind":9,"detail":"","insertText":"math","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"e","kind":6,"detail":"mut e Engine","insertText":"e","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"force_attack","kind":6,"detail":"mut force_attack Value","insertText":"force_attack","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"force_attack","kind":6,"detail":"mut force_attack Value","insertText":"force_attack","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664322878}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322878}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322889}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322889}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322889}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322889}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322890}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322890}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322890}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322890}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322891}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322891}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322891}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322892}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322892}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322892}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322893}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322893}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322894}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":133,"method":"textDocument/completion","params":{"position":{"line":70,"character":19},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v"},"context":{"triggerKind":1}}},"timestamp":1664322895}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":133,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"math","kind":9,"detail":"","insertText":"math","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"e","kind":6,"detail":"mut e Engine","insertText":"e","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"force_attack","kind":6,"detail":"mut force_attack Value","insertText":"force_attack","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"force_attack","kind":6,"detail":"mut force_attack Value","insertText":"force_attack","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664322895}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322895}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322897}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322897}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322898}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322956}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322957}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322965}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322966}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322966}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322966}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":134,"method":"textDocument/completion","params":{"position":{"line":60,"character":3},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v"},"context":{"triggerKind":1}}},"timestamp":1664322966}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":134,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"math","kind":9,"detail":"","insertText":"math","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"e","kind":6,"detail":"mut e Engine","insertText":"e","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"force_attack","kind":6,"detail":"mut force_attack Value","insertText":"force_attack","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"force_attack","kind":6,"detail":"mut force_attack Value","insertText":"force_attack","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664322966}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322966}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322967}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322967}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322967}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322967}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322967}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322968}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322969}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322969}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":135,"method":"textDocument/completion","params":{"position":{"line":60,"character":8},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v"},"context":{"triggerKind":2,"triggerCharacter":"."}}},"timestamp":1664322970}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":135,"result":[{"label":"radian","kind":6,"detail":"pub const radian f32","insertText":"radian","insertTextFormat":1},{"label":"Vec3","kind":22,"detail":"pub struct Vec3","insertText":"Vec3{x:$1, y:$2, z:$3}","insertTextFormat":2},{"label":"distance_from","kind":3,"detail":"pub fn distance_from(from_ent Vec3, to_ent Vec3) f32","insertText":"distance_from($0, $1)","insertTextFormat":2},{"label":"sin_cos","kind":3,"detail":"pub fn sin_cos(with_radion f32) (f32, f32)","insertText":"sin_cos($0)","insertTextFormat":2},{"label":"Angle","kind":22,"detail":"pub struct Angle","insertText":"Angle{pitch:$1, yaw:$2, roll:$3}","insertTextFormat":2},{"label":"angle_to_vectors","kind":3,"detail":"pub fn angle_to_vectors(with_angle Angle) (Vec3, Vec3, Vec3)","insertText":"angle_to_vectors($0)","insertTextFormat":2},{"label":"get_val_offset","kind":3,"detail":"pub fn get_val_offset(in_this_obj voidptr, at_offset usize) &T","insertText":"get_val_offset($0, $1)","insertTextFormat":2},{"label":"pattern_scan","kind":3,"detail":"pub fn pattern_scan(in_module string, with_sig string) ?voidptr","insertText":"pattern_scan($0, $1)","insertTextFormat":2},{"label":"wait_for_module","kind":3,"detail":"pub fn wait_for_module(mut with_modules []string, and_max_timeout int)","insertText":"wait_for_module($0, $1)","insertTextFormat":2},{"label":"Matrix","kind":22,"detail":"pub struct Matrix","insertText":"Matrix{m:$1}","insertTextFormat":2},{"label":"Vec2","kind":22,"detail":"pub struct Vec2","insertText":"Vec2{x:$1, y:$2}","insertTextFormat":2},{"label":"op_vec","kind":3,"detail":"pub fn op_vec(with_op_val f32) Vec3","insertText":"op_vec($0)","insertTextFormat":2},{"label":"new_angle","kind":3,"detail":"pub fn new_angle(x T, y T, z T) Angle","insertText":"new_angle($0, $1, $2)","insertTextFormat":2},{"label":"new_vec3","kind":3,"detail":"pub fn new_vec3(x T, y T, z T) Vec3","insertText":"new_vec3($0, $1, $2)","insertTextFormat":2},{"label":"new_vec2","kind":3,"detail":"pub fn new_vec2(x T, y T) Vec2","insertText":"new_vec2($0, $1)","insertTextFormat":2},{"label":"HResult","kind":22,"detail":"pub struct HResult","insertText":"HResult{val:$1}","insertTextFormat":2},{"label":"h_res","kind":3,"detail":"pub fn h_res(with_hres int) HResult","insertText":"h_res($0)","insertTextFormat":2},{"label":"str_align","kind":3,"detail":"pub fn str_align(with_og_text string, with_spaces_count i32, and_final_sep string) string","insertText":"str_align($0, $1, $2)","insertTextFormat":2},{"label":"load_unload_console","kind":3,"detail":"pub fn load_unload_console(with_switch bool, and_file &C.FILE)","insertText":"load_unload_console($0, $1)","insertTextFormat":2},{"label":"Color","kind":22,"detail":"pub struct Color","insertText":"Color{, rgba:$1}","insertTextFormat":2},{"label":"pront","kind":3,"detail":"pub fn pront(with_text string)","insertText":"pront($0)","insertTextFormat":2},{"label":"ColorRgbF","kind":22,"detail":"pub struct ColorRgbF","insertText":"ColorRgbF{r:$1, g:$2, b:$3}","insertTextFormat":2},{"label":"ColorRgbaF","kind":22,"detail":"pub struct ColorRgbaF","insertText":"ColorRgbaF{r:$1, g:$2, b:$3, a:$4}","insertTextFormat":2},{"label":"color_rbga","kind":3,"detail":"pub fn color_rbga(r_ T, g_ T, b_ T, a_ T) Color","insertText":"color_rbga($0, $1, $2, $3)","insertTextFormat":2},{"label":"color_f_rbga","kind":3,"detail":"pub fn color_f_rbga(r_ T, g_ T, b_ T, a_ T) Color","insertText":"color_f_rbga($0, $1, $2, $3)","insertTextFormat":2},{"label":"color_hex","kind":3,"detail":"pub fn color_hex(withHex u32) Color","insertText":"color_hex($0)","insertTextFormat":2},{"label":"error_critical","kind":3,"detail":"pub fn error_critical(with_error string, and_error_complement string)","insertText":"error_critical($0, $1)","insertTextFormat":2},{"label":"client_error","kind":3,"detail":"pub fn client_error(with_error string)","insertText":"client_error($0)","insertTextFormat":2}]},"timestamp":1664322970}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322970}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322970}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322970}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322971}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322971}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322972}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322972}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322973}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322973}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":136,"method":"textDocument/completion","params":{"position":{"line":60,"character":14},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v"},"context":{"triggerKind":2,"triggerCharacter":"("}}},"timestamp":1664322973}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":136,"result":[{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664322973}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322973}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322974}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322974}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322978}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322978}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664322979}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323051}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323051}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323057}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323077}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323077}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":137,"method":"textDocument/completion","params":{"position":{"line":165,"character":2},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v"},"context":{"triggerKind":1}}},"timestamp":1664323077}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":137,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"math","kind":9,"detail":"","insertText":"math","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"err","kind":6,"detail":"err IError","insertText":"err","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"weapon","kind":6,"detail":"weapon &Weapon_t","insertText":"weapon","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"force_attack","kind":6,"detail":"mut force_attack Value","insertText":"force_attack","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664323077}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323077}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323078}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323078}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323078}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323078}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":138,"method":"textDocument/completion","params":{"position":{"line":165,"character":7},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v"},"context":{"triggerKind":2,"triggerCharacter":"."}}},"timestamp":1664323078}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":138,"result":[{"label":"radian","kind":6,"detail":"pub const radian f32","insertText":"radian","insertTextFormat":1},{"label":"Vec3","kind":22,"detail":"pub struct Vec3","insertText":"Vec3{x:$1, y:$2, z:$3}","insertTextFormat":2},{"label":"distance_from","kind":3,"detail":"pub fn distance_from(from_ent Vec3, to_ent Vec3) f32","insertText":"distance_from($0, $1)","insertTextFormat":2},{"label":"sin_cos","kind":3,"detail":"pub fn sin_cos(with_radion f32) (f32, f32)","insertText":"sin_cos($0)","insertTextFormat":2},{"label":"Angle","kind":22,"detail":"pub struct Angle","insertText":"Angle{pitch:$1, yaw:$2, roll:$3}","insertTextFormat":2},{"label":"angle_to_vectors","kind":3,"detail":"pub fn angle_to_vectors(with_angle Angle) (Vec3, Vec3, Vec3)","insertText":"angle_to_vectors($0)","insertTextFormat":2},{"label":"get_val_offset","kind":3,"detail":"pub fn get_val_offset(in_this_obj voidptr, at_offset usize) &T","insertText":"get_val_offset($0, $1)","insertTextFormat":2},{"label":"pattern_scan","kind":3,"detail":"pub fn pattern_scan(in_module string, with_sig string) ?voidptr","insertText":"pattern_scan($0, $1)","insertTextFormat":2},{"label":"wait_for_module","kind":3,"detail":"pub fn wait_for_module(mut with_modules []string, and_max_timeout int)","insertText":"wait_for_module($0, $1)","insertTextFormat":2},{"label":"Matrix","kind":22,"detail":"pub struct Matrix","insertText":"Matrix{m:$1}","insertTextFormat":2},{"label":"Vec2","kind":22,"detail":"pub struct Vec2","insertText":"Vec2{x:$1, y:$2}","insertTextFormat":2},{"label":"op_vec","kind":3,"detail":"pub fn op_vec(with_op_val f32) Vec3","insertText":"op_vec($0)","insertTextFormat":2},{"label":"new_angle","kind":3,"detail":"pub fn new_angle(x T, y T, z T) Angle","insertText":"new_angle($0, $1, $2)","insertTextFormat":2},{"label":"new_vec3","kind":3,"detail":"pub fn new_vec3(x T, y T, z T) Vec3","insertText":"new_vec3($0, $1, $2)","insertTextFormat":2},{"label":"new_vec2","kind":3,"detail":"pub fn new_vec2(x T, y T) Vec2","insertText":"new_vec2($0, $1)","insertTextFormat":2},{"label":"HResult","kind":22,"detail":"pub struct HResult","insertText":"HResult{val:$1}","insertTextFormat":2},{"label":"h_res","kind":3,"detail":"pub fn h_res(with_hres int) HResult","insertText":"h_res($0)","insertTextFormat":2},{"label":"str_align","kind":3,"detail":"pub fn str_align(with_og_text string, with_spaces_count i32, and_final_sep string) string","insertText":"str_align($0, $1, $2)","insertTextFormat":2},{"label":"load_unload_console","kind":3,"detail":"pub fn load_unload_console(with_switch bool, and_file &C.FILE)","insertText":"load_unload_console($0, $1)","insertTextFormat":2},{"label":"Color","kind":22,"detail":"pub struct Color","insertText":"Color{, rgba:$1}","insertTextFormat":2},{"label":"pront","kind":3,"detail":"pub fn pront(with_text string)","insertText":"pront($0)","insertTextFormat":2},{"label":"ColorRgbF","kind":22,"detail":"pub struct ColorRgbF","insertText":"ColorRgbF{r:$1, g:$2, b:$3}","insertTextFormat":2},{"label":"ColorRgbaF","kind":22,"detail":"pub struct ColorRgbaF","insertText":"ColorRgbaF{r:$1, g:$2, b:$3, a:$4}","insertTextFormat":2},{"label":"color_rbga","kind":3,"detail":"pub fn color_rbga(r_ T, g_ T, b_ T, a_ T) Color","insertText":"color_rbga($0, $1, $2, $3)","insertTextFormat":2},{"label":"color_f_rbga","kind":3,"detail":"pub fn color_f_rbga(r_ T, g_ T, b_ T, a_ T) Color","insertText":"color_f_rbga($0, $1, $2, $3)","insertTextFormat":2},{"label":"color_hex","kind":3,"detail":"pub fn color_hex(withHex u32) Color","insertText":"color_hex($0)","insertTextFormat":2},{"label":"error_critical","kind":3,"detail":"pub fn error_critical(with_error string, and_error_complement string)","insertText":"error_critical($0, $1)","insertTextFormat":2},{"label":"client_error","kind":3,"detail":"pub fn client_error(with_error string)","insertText":"client_error($0)","insertTextFormat":2}]},"timestamp":1664323078}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323078}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323079}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323079}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323079}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323079}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323079}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":139,"method":"textDocument/completion","params":{"position":{"line":165,"character":13},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v"},"context":{"triggerKind":2,"triggerCharacter":"("}}},"timestamp":1664323081}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":139,"result":[{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664323081}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323081}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323082}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":140,"method":"textDocument/completion","params":{"position":{"line":165,"character":13},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v"},"context":{"triggerKind":2,"triggerCharacter":"("}}},"timestamp":1664323083}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":140,"result":[{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664323083}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323083}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323083}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":141,"method":"textDocument/completion","params":{"position":{"line":165,"character":15},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v"},"context":{"triggerKind":1}}},"timestamp":1664323086}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":141,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"math","kind":9,"detail":"","insertText":"math","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"err","kind":6,"detail":"err IError","insertText":"err","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"weapon","kind":6,"detail":"weapon &Weapon_t","insertText":"weapon","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"force_attack","kind":6,"detail":"mut force_attack Value","insertText":"force_attack","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664323086}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323086}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323089}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323089}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323089}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":142,"method":"textDocument/completion","params":{"position":{"line":169,"character":2},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v"},"context":{"triggerKind":1}}},"timestamp":1664323089}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":142,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"math","kind":9,"detail":"","insertText":"math","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"weapon","kind":6,"detail":"weapon &Weapon_t","insertText":"weapon","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"force_attack","kind":6,"detail":"mut force_attack Value","insertText":"force_attack","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664323089}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323089}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323089}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323090}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323090}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323090}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":143,"method":"textDocument/completion","params":{"position":{"line":169,"character":7},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v"},"context":{"triggerKind":2,"triggerCharacter":"."}}},"timestamp":1664323090}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":143,"result":[{"label":"radian","kind":6,"detail":"pub const radian f32","insertText":"radian","insertTextFormat":1},{"label":"Vec3","kind":22,"detail":"pub struct Vec3","insertText":"Vec3{x:$1, y:$2, z:$3}","insertTextFormat":2},{"label":"distance_from","kind":3,"detail":"pub fn distance_from(from_ent Vec3, to_ent Vec3) f32","insertText":"distance_from($0, $1)","insertTextFormat":2},{"label":"sin_cos","kind":3,"detail":"pub fn sin_cos(with_radion f32) (f32, f32)","insertText":"sin_cos($0)","insertTextFormat":2},{"label":"Angle","kind":22,"detail":"pub struct Angle","insertText":"Angle{pitch:$1, yaw:$2, roll:$3}","insertTextFormat":2},{"label":"angle_to_vectors","kind":3,"detail":"pub fn angle_to_vectors(with_angle Angle) (Vec3, Vec3, Vec3)","insertText":"angle_to_vectors($0)","insertTextFormat":2},{"label":"get_val_offset","kind":3,"detail":"pub fn get_val_offset(in_this_obj voidptr, at_offset usize) &T","insertText":"get_val_offset($0, $1)","insertTextFormat":2},{"label":"pattern_scan","kind":3,"detail":"pub fn pattern_scan(in_module string, with_sig string) ?voidptr","insertText":"pattern_scan($0, $1)","insertTextFormat":2},{"label":"wait_for_module","kind":3,"detail":"pub fn wait_for_module(mut with_modules []string, and_max_timeout int)","insertText":"wait_for_module($0, $1)","insertTextFormat":2},{"label":"Matrix","kind":22,"detail":"pub struct Matrix","insertText":"Matrix{m:$1}","insertTextFormat":2},{"label":"Vec2","kind":22,"detail":"pub struct Vec2","insertText":"Vec2{x:$1, y:$2}","insertTextFormat":2},{"label":"op_vec","kind":3,"detail":"pub fn op_vec(with_op_val f32) Vec3","insertText":"op_vec($0)","insertTextFormat":2},{"label":"new_angle","kind":3,"detail":"pub fn new_angle(x T, y T, z T) Angle","insertText":"new_angle($0, $1, $2)","insertTextFormat":2},{"label":"new_vec3","kind":3,"detail":"pub fn new_vec3(x T, y T, z T) Vec3","insertText":"new_vec3($0, $1, $2)","insertTextFormat":2},{"label":"new_vec2","kind":3,"detail":"pub fn new_vec2(x T, y T) Vec2","insertText":"new_vec2($0, $1)","insertTextFormat":2},{"label":"HResult","kind":22,"detail":"pub struct HResult","insertText":"HResult{val:$1}","insertTextFormat":2},{"label":"h_res","kind":3,"detail":"pub fn h_res(with_hres int) HResult","insertText":"h_res($0)","insertTextFormat":2},{"label":"str_align","kind":3,"detail":"pub fn str_align(with_og_text string, with_spaces_count i32, and_final_sep string) string","insertText":"str_align($0, $1, $2)","insertTextFormat":2},{"label":"load_unload_console","kind":3,"detail":"pub fn load_unload_console(with_switch bool, and_file &C.FILE)","insertText":"load_unload_console($0, $1)","insertTextFormat":2},{"label":"Color","kind":22,"detail":"pub struct Color","insertText":"Color{, rgba:$1}","insertTextFormat":2},{"label":"pront","kind":3,"detail":"pub fn pront(with_text string)","insertText":"pront($0)","insertTextFormat":2},{"label":"ColorRgbF","kind":22,"detail":"pub struct ColorRgbF","insertText":"ColorRgbF{r:$1, g:$2, b:$3}","insertTextFormat":2},{"label":"ColorRgbaF","kind":22,"detail":"pub struct ColorRgbaF","insertText":"ColorRgbaF{r:$1, g:$2, b:$3, a:$4}","insertTextFormat":2},{"label":"color_rbga","kind":3,"detail":"pub fn color_rbga(r_ T, g_ T, b_ T, a_ T) Color","insertText":"color_rbga($0, $1, $2, $3)","insertTextFormat":2},{"label":"color_f_rbga","kind":3,"detail":"pub fn color_f_rbga(r_ T, g_ T, b_ T, a_ T) Color","insertText":"color_f_rbga($0, $1, $2, $3)","insertTextFormat":2},{"label":"color_hex","kind":3,"detail":"pub fn color_hex(withHex u32) Color","insertText":"color_hex($0)","insertTextFormat":2},{"label":"error_critical","kind":3,"detail":"pub fn error_critical(with_error string, and_error_complement string)","insertText":"error_critical($0, $1)","insertTextFormat":2},{"label":"client_error","kind":3,"detail":"pub fn client_error(with_error string)","insertText":"client_error($0)","insertTextFormat":2}]},"timestamp":1664323090}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323090}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323090}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323091}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323091}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323091}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323096}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323097}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323097}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323097}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323097}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323098}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":144,"method":"textDocument/completion","params":{"position":{"line":169,"character":13},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v"},"context":{"triggerKind":2,"triggerCharacter":"("}}},"timestamp":1664323098}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":144,"result":[{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664323098}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323098}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323099}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323099}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":145,"method":"textDocument/completion","params":{"position":{"line":169,"character":15},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v"},"context":{"triggerKind":1}}},"timestamp":1664323099}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":145,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"math","kind":9,"detail":"","insertText":"math","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"weapon","kind":6,"detail":"weapon &Weapon_t","insertText":"weapon","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"force_attack","kind":6,"detail":"mut force_attack Value","insertText":"force_attack","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664323099}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323099}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323103}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323103}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323103}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323103}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":146,"method":"textDocument/completion","params":{"position":{"line":173,"character":2},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v"},"context":{"triggerKind":1}}},"timestamp":1664323103}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":146,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"math","kind":9,"detail":"","insertText":"math","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"weapon","kind":6,"detail":"weapon &Weapon_t","insertText":"weapon","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"force_attack","kind":6,"detail":"mut force_attack Value","insertText":"force_attack","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664323103}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323104}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323104}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323104}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323104}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323104}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":147,"method":"textDocument/completion","params":{"position":{"line":173,"character":7},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v"},"context":{"triggerKind":2,"triggerCharacter":"."}}},"timestamp":1664323104}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":147,"result":[{"label":"radian","kind":6,"detail":"pub const radian f32","insertText":"radian","insertTextFormat":1},{"label":"Vec3","kind":22,"detail":"pub struct Vec3","insertText":"Vec3{x:$1, y:$2, z:$3}","insertTextFormat":2},{"label":"distance_from","kind":3,"detail":"pub fn distance_from(from_ent Vec3, to_ent Vec3) f32","insertText":"distance_from($0, $1)","insertTextFormat":2},{"label":"sin_cos","kind":3,"detail":"pub fn sin_cos(with_radion f32) (f32, f32)","insertText":"sin_cos($0)","insertTextFormat":2},{"label":"Angle","kind":22,"detail":"pub struct Angle","insertText":"Angle{pitch:$1, yaw:$2, roll:$3}","insertTextFormat":2},{"label":"angle_to_vectors","kind":3,"detail":"pub fn angle_to_vectors(with_angle Angle) (Vec3, Vec3, Vec3)","insertText":"angle_to_vectors($0)","insertTextFormat":2},{"label":"get_val_offset","kind":3,"detail":"pub fn get_val_offset(in_this_obj voidptr, at_offset usize) &T","insertText":"get_val_offset($0, $1)","insertTextFormat":2},{"label":"pattern_scan","kind":3,"detail":"pub fn pattern_scan(in_module string, with_sig string) ?voidptr","insertText":"pattern_scan($0, $1)","insertTextFormat":2},{"label":"wait_for_module","kind":3,"detail":"pub fn wait_for_module(mut with_modules []string, and_max_timeout int)","insertText":"wait_for_module($0, $1)","insertTextFormat":2},{"label":"Matrix","kind":22,"detail":"pub struct Matrix","insertText":"Matrix{m:$1}","insertTextFormat":2},{"label":"Vec2","kind":22,"detail":"pub struct Vec2","insertText":"Vec2{x:$1, y:$2}","insertTextFormat":2},{"label":"op_vec","kind":3,"detail":"pub fn op_vec(with_op_val f32) Vec3","insertText":"op_vec($0)","insertTextFormat":2},{"label":"new_angle","kind":3,"detail":"pub fn new_angle(x T, y T, z T) Angle","insertText":"new_angle($0, $1, $2)","insertTextFormat":2},{"label":"new_vec3","kind":3,"detail":"pub fn new_vec3(x T, y T, z T) Vec3","insertText":"new_vec3($0, $1, $2)","insertTextFormat":2},{"label":"new_vec2","kind":3,"detail":"pub fn new_vec2(x T, y T) Vec2","insertText":"new_vec2($0, $1)","insertTextFormat":2},{"label":"HResult","kind":22,"detail":"pub struct HResult","insertText":"HResult{val:$1}","insertTextFormat":2},{"label":"h_res","kind":3,"detail":"pub fn h_res(with_hres int) HResult","insertText":"h_res($0)","insertTextFormat":2},{"label":"str_align","kind":3,"detail":"pub fn str_align(with_og_text string, with_spaces_count i32, and_final_sep string) string","insertText":"str_align($0, $1, $2)","insertTextFormat":2},{"label":"load_unload_console","kind":3,"detail":"pub fn load_unload_console(with_switch bool, and_file &C.FILE)","insertText":"load_unload_console($0, $1)","insertTextFormat":2},{"label":"Color","kind":22,"detail":"pub struct Color","insertText":"Color{, rgba:$1}","insertTextFormat":2},{"label":"pront","kind":3,"detail":"pub fn pront(with_text string)","insertText":"pront($0)","insertTextFormat":2},{"label":"ColorRgbF","kind":22,"detail":"pub struct ColorRgbF","insertText":"ColorRgbF{r:$1, g:$2, b:$3}","insertTextFormat":2},{"label":"ColorRgbaF","kind":22,"detail":"pub struct ColorRgbaF","insertText":"ColorRgbaF{r:$1, g:$2, b:$3, a:$4}","insertTextFormat":2},{"label":"color_rbga","kind":3,"detail":"pub fn color_rbga(r_ T, g_ T, b_ T, a_ T) Color","insertText":"color_rbga($0, $1, $2, $3)","insertTextFormat":2},{"label":"color_f_rbga","kind":3,"detail":"pub fn color_f_rbga(r_ T, g_ T, b_ T, a_ T) Color","insertText":"color_f_rbga($0, $1, $2, $3)","insertTextFormat":2},{"label":"color_hex","kind":3,"detail":"pub fn color_hex(withHex u32) Color","insertText":"color_hex($0)","insertTextFormat":2},{"label":"error_critical","kind":3,"detail":"pub fn error_critical(with_error string, and_error_complement string)","insertText":"error_critical($0, $1)","insertTextFormat":2},{"label":"client_error","kind":3,"detail":"pub fn client_error(with_error string)","insertText":"client_error($0)","insertTextFormat":2}]},"timestamp":1664323104}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323104}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323105}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":148,"method":"textDocument/completion","params":{"position":{"line":173,"character":13},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v"},"context":{"triggerKind":2,"triggerCharacter":"("}}},"timestamp":1664323106}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":148,"result":[{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664323106}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323106}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323106}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323107}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":149,"method":"textDocument/completion","params":{"position":{"line":173,"character":15},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v"},"context":{"triggerKind":1}}},"timestamp":1664323107}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":149,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"math","kind":9,"detail":"","insertText":"math","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"weapon","kind":6,"detail":"weapon &Weapon_t","insertText":"weapon","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"force_attack","kind":6,"detail":"mut force_attack Value","insertText":"force_attack","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664323107}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323107}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323109}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323165}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323166}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323170}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323246}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323246}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323246}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323249}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":150,"method":"textDocument/completion","params":{"position":{"line":163,"character":2},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v"},"context":{"triggerKind":1}}},"timestamp":1664323249}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":150,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"math","kind":9,"detail":"","insertText":"math","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"err","kind":6,"detail":"err IError","insertText":"err","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"weapon","kind":6,"detail":"weapon &Weapon_t","insertText":"weapon","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"force_attack","kind":6,"detail":"mut force_attack Value","insertText":"force_attack","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664323249}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323249}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323250}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323250}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323250}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323250}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323250}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323251}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323251}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323251}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323251}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323252}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323252}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323252}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323252}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323252}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":151,"method":"textDocument/completion","params":{"position":{"line":163,"character":7},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v"},"context":{"triggerKind":2,"triggerCharacter":"."}}},"timestamp":1664323252}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":151,"result":[{"label":"radian","kind":6,"detail":"pub const radian f32","insertText":"radian","insertTextFormat":1},{"label":"Vec3","kind":22,"detail":"pub struct Vec3","insertText":"Vec3{x:$1, y:$2, z:$3}","insertTextFormat":2},{"label":"distance_from","kind":3,"detail":"pub fn distance_from(from_ent Vec3, to_ent Vec3) f32","insertText":"distance_from($0, $1)","insertTextFormat":2},{"label":"sin_cos","kind":3,"detail":"pub fn sin_cos(with_radion f32) (f32, f32)","insertText":"sin_cos($0)","insertTextFormat":2},{"label":"Angle","kind":22,"detail":"pub struct Angle","insertText":"Angle{pitch:$1, yaw:$2, roll:$3}","insertTextFormat":2},{"label":"angle_to_vectors","kind":3,"detail":"pub fn angle_to_vectors(with_angle Angle) (Vec3, Vec3, Vec3)","insertText":"angle_to_vectors($0)","insertTextFormat":2},{"label":"get_val_offset","kind":3,"detail":"pub fn get_val_offset(in_this_obj voidptr, at_offset usize) &T","insertText":"get_val_offset($0, $1)","insertTextFormat":2},{"label":"pattern_scan","kind":3,"detail":"pub fn pattern_scan(in_module string, with_sig string) ?voidptr","insertText":"pattern_scan($0, $1)","insertTextFormat":2},{"label":"wait_for_module","kind":3,"detail":"pub fn wait_for_module(mut with_modules []string, and_max_timeout int)","insertText":"wait_for_module($0, $1)","insertTextFormat":2},{"label":"Matrix","kind":22,"detail":"pub struct Matrix","insertText":"Matrix{m:$1}","insertTextFormat":2},{"label":"Vec2","kind":22,"detail":"pub struct Vec2","insertText":"Vec2{x:$1, y:$2}","insertTextFormat":2},{"label":"op_vec","kind":3,"detail":"pub fn op_vec(with_op_val f32) Vec3","insertText":"op_vec($0)","insertTextFormat":2},{"label":"new_angle","kind":3,"detail":"pub fn new_angle(x T, y T, z T) Angle","insertText":"new_angle($0, $1, $2)","insertTextFormat":2},{"label":"new_vec3","kind":3,"detail":"pub fn new_vec3(x T, y T, z T) Vec3","insertText":"new_vec3($0, $1, $2)","insertTextFormat":2},{"label":"new_vec2","kind":3,"detail":"pub fn new_vec2(x T, y T) Vec2","insertText":"new_vec2($0, $1)","insertTextFormat":2},{"label":"HResult","kind":22,"detail":"pub struct HResult","insertText":"HResult{val:$1}","insertTextFormat":2},{"label":"h_res","kind":3,"detail":"pub fn h_res(with_hres int) HResult","insertText":"h_res($0)","insertTextFormat":2},{"label":"str_align","kind":3,"detail":"pub fn str_align(with_og_text string, with_spaces_count i32, and_final_sep string) string","insertText":"str_align($0, $1, $2)","insertTextFormat":2},{"label":"load_unload_console","kind":3,"detail":"pub fn load_unload_console(with_switch bool, and_file &C.FILE)","insertText":"load_unload_console($0, $1)","insertTextFormat":2},{"label":"Color","kind":22,"detail":"pub struct Color","insertText":"Color{, rgba:$1}","insertTextFormat":2},{"label":"pront","kind":3,"detail":"pub fn pront(with_text string)","insertText":"pront($0)","insertTextFormat":2},{"label":"ColorRgbF","kind":22,"detail":"pub struct ColorRgbF","insertText":"ColorRgbF{r:$1, g:$2, b:$3}","insertTextFormat":2},{"label":"ColorRgbaF","kind":22,"detail":"pub struct ColorRgbaF","insertText":"ColorRgbaF{r:$1, g:$2, b:$3, a:$4}","insertTextFormat":2},{"label":"color_rbga","kind":3,"detail":"pub fn color_rbga(r_ T, g_ T, b_ T, a_ T) Color","insertText":"color_rbga($0, $1, $2, $3)","insertTextFormat":2},{"label":"color_f_rbga","kind":3,"detail":"pub fn color_f_rbga(r_ T, g_ T, b_ T, a_ T) Color","insertText":"color_f_rbga($0, $1, $2, $3)","insertTextFormat":2},{"label":"color_hex","kind":3,"detail":"pub fn color_hex(withHex u32) Color","insertText":"color_hex($0)","insertTextFormat":2},{"label":"error_critical","kind":3,"detail":"pub fn error_critical(with_error string, and_error_complement string)","insertText":"error_critical($0, $1)","insertTextFormat":2},{"label":"client_error","kind":3,"detail":"pub fn client_error(with_error string)","insertText":"client_error($0)","insertTextFormat":2}]},"timestamp":1664323252}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323253}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":152,"method":"textDocument/completion","params":{"position":{"line":163,"character":13},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v"},"context":{"triggerKind":2,"triggerCharacter":"("}}},"timestamp":1664323265}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":152,"result":[{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664323265}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323265}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323272}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323272}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":153,"method":"textDocument/completion","params":{"position":{"line":163,"character":15},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v"},"context":{"triggerKind":1}}},"timestamp":1664323273}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":153,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"math","kind":9,"detail":"","insertText":"math","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"err","kind":6,"detail":"err IError","insertText":"err","insertTextFormat":1},{"label":"err","kind":6,"detail":"err IError","insertText":"err","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"weapon","kind":6,"detail":"weapon &Weapon_t","insertText":"weapon","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"force_attack","kind":6,"detail":"mut force_attack Value","insertText":"force_attack","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664323273}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323273}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323275}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323337}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323337}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323436}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323439}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323439}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323441}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323442}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323443}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":154,"method":"textDocument/completion","params":{"position":{"line":169,"character":15},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v"},"context":{"triggerKind":1}}},"timestamp":1664323453}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":154,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"math","kind":9,"detail":"","insertText":"math","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"weapon","kind":6,"detail":"weapon &Weapon_t","insertText":"weapon","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"force_attack","kind":6,"detail":"mut force_attack Value","insertText":"force_attack","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664323453}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323453}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323453}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":155,"method":"textDocument/completion","params":{"position":{"line":169,"character":12},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v"},"context":{"triggerKind":1}}},"timestamp":1664323454}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":155,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"math","kind":9,"detail":"","insertText":"math","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"weapon","kind":6,"detail":"weapon &Weapon_t","insertText":"weapon","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"force_attack","kind":6,"detail":"mut force_attack Value","insertText":"force_attack","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"weapon","kind":6,"detail":"weapon &Weapon_t","insertText":"weapon","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664323454}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323454}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":156,"method":"textDocument/completion","params":{"position":{"line":169,"character":7},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v"},"context":{"triggerKind":2,"triggerCharacter":"."}}},"timestamp":1664323454}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":156,"result":[{"label":"radian","kind":6,"detail":"pub const radian f32","insertText":"radian","insertTextFormat":1},{"label":"Vec3","kind":22,"detail":"pub struct Vec3","insertText":"Vec3{x:$1, y:$2, z:$3}","insertTextFormat":2},{"label":"distance_from","kind":3,"detail":"pub fn distance_from(from_ent Vec3, to_ent Vec3) f32","insertText":"distance_from($0, $1)","insertTextFormat":2},{"label":"sin_cos","kind":3,"detail":"pub fn sin_cos(with_radion f32) (f32, f32)","insertText":"sin_cos($0)","insertTextFormat":2},{"label":"Angle","kind":22,"detail":"pub struct Angle","insertText":"Angle{pitch:$1, yaw:$2, roll:$3}","insertTextFormat":2},{"label":"angle_to_vectors","kind":3,"detail":"pub fn angle_to_vectors(with_angle Angle) (Vec3, Vec3, Vec3)","insertText":"angle_to_vectors($0)","insertTextFormat":2},{"label":"get_val_offset","kind":3,"detail":"pub fn get_val_offset(in_this_obj voidptr, at_offset usize) &T","insertText":"get_val_offset($0, $1)","insertTextFormat":2},{"label":"pattern_scan","kind":3,"detail":"pub fn pattern_scan(in_module string, with_sig string) ?voidptr","insertText":"pattern_scan($0, $1)","insertTextFormat":2},{"label":"wait_for_module","kind":3,"detail":"pub fn wait_for_module(mut with_modules []string, and_max_timeout int)","insertText":"wait_for_module($0, $1)","insertTextFormat":2},{"label":"Matrix","kind":22,"detail":"pub struct Matrix","insertText":"Matrix{m:$1}","insertTextFormat":2},{"label":"Vec2","kind":22,"detail":"pub struct Vec2","insertText":"Vec2{x:$1, y:$2}","insertTextFormat":2},{"label":"op_vec","kind":3,"detail":"pub fn op_vec(with_op_val f32) Vec3","insertText":"op_vec($0)","insertTextFormat":2},{"label":"new_angle","kind":3,"detail":"pub fn new_angle(x T, y T, z T) Angle","insertText":"new_angle($0, $1, $2)","insertTextFormat":2},{"label":"new_vec3","kind":3,"detail":"pub fn new_vec3(x T, y T, z T) Vec3","insertText":"new_vec3($0, $1, $2)","insertTextFormat":2},{"label":"new_vec2","kind":3,"detail":"pub fn new_vec2(x T, y T) Vec2","insertText":"new_vec2($0, $1)","insertTextFormat":2},{"label":"HResult","kind":22,"detail":"pub struct HResult","insertText":"HResult{val:$1}","insertTextFormat":2},{"label":"h_res","kind":3,"detail":"pub fn h_res(with_hres int) HResult","insertText":"h_res($0)","insertTextFormat":2},{"label":"str_align","kind":3,"detail":"pub fn str_align(with_og_text string, with_spaces_count i32, and_final_sep string) string","insertText":"str_align($0, $1, $2)","insertTextFormat":2},{"label":"load_unload_console","kind":3,"detail":"pub fn load_unload_console(with_switch bool, and_file &C.FILE)","insertText":"load_unload_console($0, $1)","insertTextFormat":2},{"label":"Color","kind":22,"detail":"pub struct Color","insertText":"Color{, rgba:$1}","insertTextFormat":2},{"label":"pront","kind":3,"detail":"pub fn pront(with_text string)","insertText":"pront($0)","insertTextFormat":2},{"label":"ColorRgbF","kind":22,"detail":"pub struct ColorRgbF","insertText":"ColorRgbF{r:$1, g:$2, b:$3}","insertTextFormat":2},{"label":"ColorRgbaF","kind":22,"detail":"pub struct ColorRgbaF","insertText":"ColorRgbaF{r:$1, g:$2, b:$3, a:$4}","insertTextFormat":2},{"label":"color_rbga","kind":3,"detail":"pub fn color_rbga(r_ T, g_ T, b_ T, a_ T) Color","insertText":"color_rbga($0, $1, $2, $3)","insertTextFormat":2},{"label":"color_f_rbga","kind":3,"detail":"pub fn color_f_rbga(r_ T, g_ T, b_ T, a_ T) Color","insertText":"color_f_rbga($0, $1, $2, $3)","insertTextFormat":2},{"label":"color_hex","kind":3,"detail":"pub fn color_hex(withHex u32) Color","insertText":"color_hex($0)","insertTextFormat":2},{"label":"error_critical","kind":3,"detail":"pub fn error_critical(with_error string, and_error_complement string)","insertText":"error_critical($0, $1)","insertTextFormat":2},{"label":"client_error","kind":3,"detail":"pub fn client_error(with_error string)","insertText":"client_error($0)","insertTextFormat":2}]},"timestamp":1664323454}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323454}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":157,"method":"textDocument/completion","params":{"position":{"line":169,"character":6},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v"},"context":{"triggerKind":1}}},"timestamp":1664323454}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":157,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"math","kind":9,"detail":"","insertText":"math","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"weapon","kind":6,"detail":"weapon &Weapon_t","insertText":"weapon","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"force_attack","kind":6,"detail":"mut force_attack Value","insertText":"force_attack","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"weapon","kind":6,"detail":"weapon &Weapon_t","insertText":"weapon","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664323454}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323454}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323454}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/engine.v","diagnostics":[]}},"timestamp":1664323454}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323463}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323464}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323609}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323610}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323610}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323610}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":158,"method":"textDocument/completion","params":{"position":{"line":85,"character":2},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v"},"context":{"triggerKind":1}}},"timestamp":1664323611}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":158,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"math","kind":9,"detail":"","insertText":"math","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"for_ent","kind":6,"detail":"for_ent &Player","insertText":"for_ent","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx","insertText":"app_ctx","insertTextFormat":1},{"label":"prob_weapon","kind":6,"detail":"prob_weapon","insertText":"prob_weapon","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"force_attack","kind":6,"detail":"mut force_attack Value","insertText":"force_attack","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"weapon","kind":6,"detail":"weapon &Weapon_t","insertText":"weapon","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664323611}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323611}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323611}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323611}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323611}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":159,"method":"textDocument/completion","params":{"position":{"line":85,"character":7},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v"},"context":{"triggerKind":2,"triggerCharacter":"."}}},"timestamp":1664323611}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":159,"result":[{"label":"radian","kind":6,"detail":"pub const radian f32","insertText":"radian","insertTextFormat":1},{"label":"Vec3","kind":22,"detail":"pub struct Vec3","insertText":"Vec3{x:$1, y:$2, z:$3}","insertTextFormat":2},{"label":"distance_from","kind":3,"detail":"pub fn distance_from(from_ent Vec3, to_ent Vec3) f32","insertText":"distance_from($0, $1)","insertTextFormat":2},{"label":"sin_cos","kind":3,"detail":"pub fn sin_cos(with_radion f32) (f32, f32)","insertText":"sin_cos($0)","insertTextFormat":2},{"label":"Angle","kind":22,"detail":"pub struct Angle","insertText":"Angle{pitch:$1, yaw:$2, roll:$3}","insertTextFormat":2},{"label":"angle_to_vectors","kind":3,"detail":"pub fn angle_to_vectors(with_angle Angle) (Vec3, Vec3, Vec3)","insertText":"angle_to_vectors($0)","insertTextFormat":2},{"label":"get_val_offset","kind":3,"detail":"pub fn get_val_offset(in_this_obj voidptr, at_offset usize) &T","insertText":"get_val_offset($0, $1)","insertTextFormat":2},{"label":"pattern_scan","kind":3,"detail":"pub fn pattern_scan(in_module string, with_sig string) ?voidptr","insertText":"pattern_scan($0, $1)","insertTextFormat":2},{"label":"wait_for_module","kind":3,"detail":"pub fn wait_for_module(mut with_modules []string, and_max_timeout int)","insertText":"wait_for_module($0, $1)","insertTextFormat":2},{"label":"Matrix","kind":22,"detail":"pub struct Matrix","insertText":"Matrix{m:$1}","insertTextFormat":2},{"label":"Vec2","kind":22,"detail":"pub struct Vec2","insertText":"Vec2{x:$1, y:$2}","insertTextFormat":2},{"label":"op_vec","kind":3,"detail":"pub fn op_vec(with_op_val f32) Vec3","insertText":"op_vec($0)","insertTextFormat":2},{"label":"new_angle","kind":3,"detail":"pub fn new_angle(x T, y T, z T) Angle","insertText":"new_angle($0, $1, $2)","insertTextFormat":2},{"label":"new_vec3","kind":3,"detail":"pub fn new_vec3(x T, y T, z T) Vec3","insertText":"new_vec3($0, $1, $2)","insertTextFormat":2},{"label":"new_vec2","kind":3,"detail":"pub fn new_vec2(x T, y T) Vec2","insertText":"new_vec2($0, $1)","insertTextFormat":2},{"label":"HResult","kind":22,"detail":"pub struct HResult","insertText":"HResult{val:$1}","insertTextFormat":2},{"label":"h_res","kind":3,"detail":"pub fn h_res(with_hres int) HResult","insertText":"h_res($0)","insertTextFormat":2},{"label":"str_align","kind":3,"detail":"pub fn str_align(with_og_text string, with_spaces_count i32, and_final_sep string) string","insertText":"str_align($0, $1, $2)","insertTextFormat":2},{"label":"load_unload_console","kind":3,"detail":"pub fn load_unload_console(with_switch bool, and_file &C.FILE)","insertText":"load_unload_console($0, $1)","insertTextFormat":2},{"label":"Color","kind":22,"detail":"pub struct Color","insertText":"Color{, rgba:$1}","insertTextFormat":2},{"label":"pront","kind":3,"detail":"pub fn pront(with_text string)","insertText":"pront($0)","insertTextFormat":2},{"label":"ColorRgbF","kind":22,"detail":"pub struct ColorRgbF","insertText":"ColorRgbF{r:$1, g:$2, b:$3}","insertTextFormat":2},{"label":"ColorRgbaF","kind":22,"detail":"pub struct ColorRgbaF","insertText":"ColorRgbaF{r:$1, g:$2, b:$3, a:$4}","insertTextFormat":2},{"label":"color_rbga","kind":3,"detail":"pub fn color_rbga(r_ T, g_ T, b_ T, a_ T) Color","insertText":"color_rbga($0, $1, $2, $3)","insertTextFormat":2},{"label":"color_f_rbga","kind":3,"detail":"pub fn color_f_rbga(r_ T, g_ T, b_ T, a_ T) Color","insertText":"color_f_rbga($0, $1, $2, $3)","insertTextFormat":2},{"label":"color_hex","kind":3,"detail":"pub fn color_hex(withHex u32) Color","insertText":"color_hex($0)","insertTextFormat":2},{"label":"error_critical","kind":3,"detail":"pub fn error_critical(with_error string, and_error_complement string)","insertText":"error_critical($0, $1)","insertTextFormat":2},{"label":"client_error","kind":3,"detail":"pub fn client_error(with_error string)","insertText":"client_error($0)","insertTextFormat":2}]},"timestamp":1664323611}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323611}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323612}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323612}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323612}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323612}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":160,"method":"textDocument/completion","params":{"position":{"line":85,"character":13},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v"},"context":{"triggerKind":2,"triggerCharacter":"("}}},"timestamp":1664323613}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":160,"result":[{"label":"app_ctx","kind":6,"detail":"mut app_ctx","insertText":"app_ctx","insertTextFormat":1},{"label":"prob_weapon","kind":6,"detail":"prob_weapon","insertText":"prob_weapon","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664323613}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323613}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323614}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323614}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323615}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":161,"method":"textDocument/completion","params":{"position":{"line":85,"character":16},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v"},"context":{"triggerKind":2,"triggerCharacter":"{"}}},"timestamp":1664323629}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":161,"result":[]},"timestamp":1664323629}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323629}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":162,"method":"textDocument/completion","params":{"position":{"line":85,"character":17},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v"},"context":{"triggerKind":1}}},"timestamp":1664323632}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":162,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"math","kind":9,"detail":"","insertText":"math","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"for_ent","kind":6,"detail":"for_ent &Player","insertText":"for_ent","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx","insertText":"app_ctx","insertTextFormat":1},{"label":"prob_weapon","kind":6,"detail":"prob_weapon","insertText":"prob_weapon","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"force_attack","kind":6,"detail":"mut force_attack Value","insertText":"force_attack","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"weapon","kind":6,"detail":"weapon &Weapon_t","insertText":"weapon","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664323632}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323632}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323632}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323632}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":163,"method":"textDocument/completion","params":{"position":{"line":85,"character":20},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v"},"context":{"triggerKind":2,"triggerCharacter":"("}}},"timestamp":1664323633}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":163,"result":[]},"timestamp":1664323633}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323633}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323640}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323640}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":164,"method":"textDocument/completion","params":{"position":{"line":85,"character":26},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v"},"context":{"triggerKind":1}}},"timestamp":1664323640}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":164,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"math","kind":9,"detail":"","insertText":"math","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"for_ent","kind":6,"detail":"for_ent &Player","insertText":"for_ent","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"for_ent","kind":6,"detail":"for_ent &Player","insertText":"for_ent","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx","insertText":"app_ctx","insertTextFormat":1},{"label":"prob_weapon","kind":6,"detail":"prob_weapon","insertText":"prob_weapon","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"force_attack","kind":6,"detail":"mut force_attack Value","insertText":"force_attack","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"weapon","kind":6,"detail":"weapon &Weapon_t","insertText":"weapon","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664323640}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323640}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323641}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323641}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323641}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323641}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323641}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":165,"method":"textDocument/completion","params":{"position":{"line":85,"character":20},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v"},"context":{"triggerKind":2,"triggerCharacter":"("}}},"timestamp":1664323641}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":165,"result":[]},"timestamp":1664323641}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323641}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323642}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":166,"method":"textDocument/completion","params":{"position":{"line":85,"character":46},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664323643}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":166,"result":[]},"timestamp":1664323643}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323643}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323644}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":167,"method":"textDocument/completion","params":{"position":{"line":85,"character":48},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664323644}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":167,"result":[]},"timestamp":1664323644}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323644}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":168,"method":"textDocument/completion","params":{"position":{"line":85,"character":48},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664323654}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":168,"result":[]},"timestamp":1664323654}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323654}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":169,"method":"textDocument/completion","params":{"position":{"line":85,"character":49},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v"},"context":{"triggerKind":2,"triggerCharacter":"{"}}},"timestamp":1664323655}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":169,"result":[]},"timestamp":1664323655}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323655}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323657}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":170,"method":"textDocument/completion","params":{"position":{"line":85,"character":51},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v"},"context":{"triggerKind":1}}},"timestamp":1664323665}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":170,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"math","kind":9,"detail":"","insertText":"math","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"for_ent","kind":6,"detail":"for_ent &Player","insertText":"for_ent","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx","insertText":"app_ctx","insertTextFormat":1},{"label":"prob_weapon","kind":6,"detail":"prob_weapon","insertText":"prob_weapon","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"force_attack","kind":6,"detail":"mut force_attack Value","insertText":"force_attack","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"weapon","kind":6,"detail":"weapon &Weapon_t","insertText":"weapon","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664323665}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323665}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323665}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323668}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323668}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323668}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":171,"method":"textDocument/completion","params":{"position":{"line":85,"character":54},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v"},"context":{"triggerKind":2,"triggerCharacter":"("}}},"timestamp":1664323668}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":171,"result":[]},"timestamp":1664323668}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323669}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323670}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323670}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":172,"method":"textDocument/completion","params":{"position":{"line":85,"character":60},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v"},"context":{"triggerKind":1}}},"timestamp":1664323671}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":172,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"math","kind":9,"detail":"","insertText":"math","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"for_ent","kind":6,"detail":"for_ent &Player","insertText":"for_ent","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx","insertText":"app_ctx","insertTextFormat":1},{"label":"prob_weapon","kind":6,"detail":"prob_weapon","insertText":"prob_weapon","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"force_attack","kind":6,"detail":"mut force_attack Value","insertText":"force_attack","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"weapon","kind":6,"detail":"weapon &Weapon_t","insertText":"weapon","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664323671}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323671}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323671}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323671}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323672}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323672}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323672}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":173,"method":"textDocument/completion","params":{"position":{"line":85,"character":54},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v"},"context":{"triggerKind":2,"triggerCharacter":"("}}},"timestamp":1664323672}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":173,"result":[]},"timestamp":1664323672}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323672}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323672}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323674}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323674}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323683}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":174,"method":"textDocument/completion","params":{"position":{"line":85,"character":52},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v"},"context":{"triggerKind":1}}},"timestamp":1664323750}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":174,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"math","kind":9,"detail":"","insertText":"math","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"for_ent","kind":6,"detail":"for_ent &Player","insertText":"for_ent","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx","insertText":"app_ctx","insertTextFormat":1},{"label":"prob_weapon","kind":6,"detail":"prob_weapon","insertText":"prob_weapon","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"force_attack","kind":6,"detail":"mut force_attack Value","insertText":"force_attack","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"weapon","kind":6,"detail":"weapon &Weapon_t","insertText":"weapon","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664323750}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323750}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323750}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":175,"method":"textDocument/completion","params":{"position":{"line":85,"character":50},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v"},"context":{"triggerKind":2,"triggerCharacter":"{"}}},"timestamp":1664323751}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":175,"result":[]},"timestamp":1664323751}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323751}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":176,"method":"textDocument/completion","params":{"position":{"line":85,"character":51},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v"},"context":{"triggerKind":1}}},"timestamp":1664323751}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":176,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"math","kind":9,"detail":"","insertText":"math","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"for_ent","kind":6,"detail":"for_ent &Player","insertText":"for_ent","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx","insertText":"app_ctx","insertTextFormat":1},{"label":"prob_weapon","kind":6,"detail":"prob_weapon","insertText":"prob_weapon","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"force_attack","kind":6,"detail":"mut force_attack Value","insertText":"force_attack","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"weapon","kind":6,"detail":"weapon &Weapon_t","insertText":"weapon","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664323751}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323751}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323751}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323752}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323752}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323752}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323752}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323752}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":177,"method":"textDocument/completion","params":{"position":{"line":85,"character":18},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v"},"context":{"triggerKind":1}}},"timestamp":1664323754}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":177,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"math","kind":9,"detail":"","insertText":"math","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"for_ent","kind":6,"detail":"for_ent &Player","insertText":"for_ent","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"for_ent","kind":6,"detail":"for_ent &Player","insertText":"for_ent","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx","insertText":"app_ctx","insertTextFormat":1},{"label":"prob_weapon","kind":6,"detail":"prob_weapon","insertText":"prob_weapon","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"force_attack","kind":6,"detail":"mut force_attack Value","insertText":"force_attack","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"weapon","kind":6,"detail":"weapon &Weapon_t","insertText":"weapon","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664323754}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323754}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323754}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":178,"method":"textDocument/completion","params":{"position":{"line":85,"character":16},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v"},"context":{"triggerKind":2,"triggerCharacter":"{"}}},"timestamp":1664323754}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":178,"result":[]},"timestamp":1664323754}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323754}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":179,"method":"textDocument/completion","params":{"position":{"line":85,"character":17},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v"},"context":{"triggerKind":1}}},"timestamp":1664323755}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":179,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"math","kind":9,"detail":"","insertText":"math","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"for_ent","kind":6,"detail":"for_ent &Player","insertText":"for_ent","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"for_ent","kind":6,"detail":"for_ent &Player","insertText":"for_ent","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx","insertText":"app_ctx","insertTextFormat":1},{"label":"prob_weapon","kind":6,"detail":"prob_weapon","insertText":"prob_weapon","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"force_attack","kind":6,"detail":"mut force_attack Value","insertText":"force_attack","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"weapon","kind":6,"detail":"weapon &Weapon_t","insertText":"weapon","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664323755}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323755}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323755}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323755}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323756}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323756}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323756}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323756}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323758}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323842}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323842}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323856}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323858}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323858}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323858}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":180,"method":"textDocument/completion","params":{"position":{"line":85,"character":2},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v"},"context":{"triggerKind":1}}},"timestamp":1664323869}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":180,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"math","kind":9,"detail":"","insertText":"math","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"for_ent","kind":6,"detail":"for_ent &Player","insertText":"for_ent","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"prob_weapon","kind":6,"detail":"prob_weapon voidptr","insertText":"prob_weapon","insertTextFormat":1},{"label":"for_ent","kind":6,"detail":"for_ent &Player","insertText":"for_ent","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"prob_weapon","kind":6,"detail":"prob_weapon voidptr","insertText":"prob_weapon","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"force_attack","kind":6,"detail":"mut force_attack Value","insertText":"force_attack","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"weapon","kind":6,"detail":"weapon &Weapon_t","insertText":"weapon","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664323869}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323869}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":181,"method":"textDocument/completion","params":{"position":{"line":85,"character":3},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v"},"context":{"triggerKind":2,"triggerCharacter":"."}}},"timestamp":1664323870}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":181,"result":[]},"timestamp":1664323870}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323870}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":182,"method":"textDocument/completion","params":{"position":{"line":85,"character":4},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v"},"context":{"triggerKind":1}}},"timestamp":1664323870}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":182,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"math","kind":9,"detail":"","insertText":"math","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"for_ent","kind":6,"detail":"for_ent &Player","insertText":"for_ent","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"prob_weapon","kind":6,"detail":"prob_weapon voidptr","insertText":"prob_weapon","insertTextFormat":1},{"label":"for_ent","kind":6,"detail":"for_ent &Player","insertText":"for_ent","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"prob_weapon","kind":6,"detail":"prob_weapon voidptr","insertText":"prob_weapon","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"force_attack","kind":6,"detail":"mut force_attack Value","insertText":"force_attack","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"weapon","kind":6,"detail":"weapon &Weapon_t","insertText":"weapon","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664323870}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323870}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323870}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323870}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323872}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323873}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323873}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":183,"method":"textDocument/completion","params":{"position":{"line":85,"character":10},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v"},"context":{"triggerKind":2,"triggerCharacter":"("}}},"timestamp":1664323874}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":183,"result":[]},"timestamp":1664323874}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323874}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323875}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323875}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323876}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323877}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":184,"method":"textDocument/completion","params":{"position":{"line":85,"character":14},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v"},"context":{"triggerKind":1}}},"timestamp":1664323877}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":184,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"math","kind":9,"detail":"","insertText":"math","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"for_ent","kind":6,"detail":"for_ent &Player","insertText":"for_ent","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"prob_weapon","kind":6,"detail":"prob_weapon voidptr","insertText":"prob_weapon","insertTextFormat":1},{"label":"for_ent","kind":6,"detail":"for_ent &Player","insertText":"for_ent","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"prob_weapon","kind":6,"detail":"prob_weapon voidptr","insertText":"prob_weapon","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"force_attack","kind":6,"detail":"mut force_attack Value","insertText":"force_attack","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"weapon","kind":6,"detail":"weapon &Weapon_t","insertText":"weapon","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664323877}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323877}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323878}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":185,"method":"textDocument/completion","params":{"position":{"line":85,"character":14},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v"},"context":{"triggerKind":1}}},"timestamp":1664323878}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":185,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"math","kind":9,"detail":"","insertText":"math","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"for_ent","kind":6,"detail":"for_ent &Player","insertText":"for_ent","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"prob_weapon","kind":6,"detail":"prob_weapon voidptr","insertText":"prob_weapon","insertTextFormat":1},{"label":"for_ent","kind":6,"detail":"for_ent &Player","insertText":"for_ent","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"prob_weapon","kind":6,"detail":"prob_weapon voidptr","insertText":"prob_weapon","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"force_attack","kind":6,"detail":"mut force_attack Value","insertText":"force_attack","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"weapon","kind":6,"detail":"weapon &Weapon_t","insertText":"weapon","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664323878}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323878}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323880}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":186,"method":"textDocument/completion","params":{"position":{"line":85,"character":14},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v"},"context":{"triggerKind":1}}},"timestamp":1664323880}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":186,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"math","kind":9,"detail":"","insertText":"math","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"for_ent","kind":6,"detail":"for_ent &Player","insertText":"for_ent","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"prob_weapon","kind":6,"detail":"prob_weapon voidptr","insertText":"prob_weapon","insertTextFormat":1},{"label":"for_ent","kind":6,"detail":"for_ent &Player","insertText":"for_ent","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"prob_weapon","kind":6,"detail":"prob_weapon voidptr","insertText":"prob_weapon","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"force_attack","kind":6,"detail":"mut force_attack Value","insertText":"force_attack","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"weapon","kind":6,"detail":"weapon &Weapon_t","insertText":"weapon","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664323880}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323880}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":187,"method":"textDocument/completion","params":{"position":{"line":85,"character":15},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664323881}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":187,"result":[]},"timestamp":1664323881}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323881}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323881}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":188,"method":"textDocument/completion","params":{"position":{"line":85,"character":17},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664323881}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":188,"result":[]},"timestamp":1664323881}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323881}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323883}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":189,"method":"textDocument/completion","params":{"position":{"line":85,"character":17},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664323884}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":189,"result":[]},"timestamp":1664323884}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323884}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323884}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":190,"method":"textDocument/completion","params":{"position":{"line":85,"character":17},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664323884}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":190,"result":[]},"timestamp":1664323884}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323884}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323885}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":191,"method":"textDocument/completion","params":{"position":{"line":85,"character":19},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v"},"context":{"triggerKind":1}}},"timestamp":1664323886}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":191,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"math","kind":9,"detail":"","insertText":"math","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"for_ent","kind":6,"detail":"for_ent &Player","insertText":"for_ent","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"prob_weapon","kind":6,"detail":"prob_weapon voidptr","insertText":"prob_weapon","insertTextFormat":1},{"label":"weapon","kind":6,"detail":"weapon","insertText":"weapon","insertTextFormat":1},{"label":"for_ent","kind":6,"detail":"for_ent &Player","insertText":"for_ent","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"prob_weapon","kind":6,"detail":"prob_weapon voidptr","insertText":"prob_weapon","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"force_attack","kind":6,"detail":"mut force_attack Value","insertText":"force_attack","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"weapon","kind":6,"detail":"weapon &Weapon_t","insertText":"weapon","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664323886}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323886}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323886}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":192,"method":"textDocument/completion","params":{"position":{"line":85,"character":19},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v"},"context":{"triggerKind":1}}},"timestamp":1664323886}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":192,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"math","kind":9,"detail":"","insertText":"math","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"for_ent","kind":6,"detail":"for_ent &Player","insertText":"for_ent","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"prob_weapon","kind":6,"detail":"prob_weapon voidptr","insertText":"prob_weapon","insertTextFormat":1},{"label":"weapon","kind":6,"detail":"weapon","insertText":"weapon","insertTextFormat":1},{"label":"for_ent","kind":6,"detail":"for_ent &Player","insertText":"for_ent","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"prob_weapon","kind":6,"detail":"prob_weapon voidptr","insertText":"prob_weapon","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"force_attack","kind":6,"detail":"mut force_attack Value","insertText":"force_attack","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"weapon","kind":6,"detail":"weapon &Weapon_t","insertText":"weapon","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664323886}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323886}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323887}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":193,"method":"textDocument/completion","params":{"position":{"line":85,"character":20},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v"},"context":{"triggerKind":1}}},"timestamp":1664323888}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":193,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"math","kind":9,"detail":"","insertText":"math","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"for_ent","kind":6,"detail":"for_ent &Player","insertText":"for_ent","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"prob_weapon","kind":6,"detail":"prob_weapon voidptr","insertText":"prob_weapon","insertTextFormat":1},{"label":"weapon","kind":6,"detail":"weapon","insertText":"weapon","insertTextFormat":1},{"label":"for_ent","kind":6,"detail":"for_ent &Player","insertText":"for_ent","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"prob_weapon","kind":6,"detail":"prob_weapon voidptr","insertText":"prob_weapon","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"force_attack","kind":6,"detail":"mut force_attack Value","insertText":"force_attack","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"weapon","kind":6,"detail":"weapon &Weapon_t","insertText":"weapon","insertTextFormat":1},{"label":"prob_weapon","kind":6,"detail":"prob_weapon voidptr","insertText":"prob_weapon","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664323888}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323888}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323889}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323889}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":194,"method":"textDocument/completion","params":{"position":{"line":85,"character":19},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v"},"context":{"triggerKind":1}}},"timestamp":1664323889}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":194,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"math","kind":9,"detail":"","insertText":"math","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"for_ent","kind":6,"detail":"for_ent &Player","insertText":"for_ent","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"prob_weapon","kind":6,"detail":"prob_weapon voidptr","insertText":"prob_weapon","insertTextFormat":1},{"label":"weapon","kind":6,"detail":"weapon","insertText":"weapon","insertTextFormat":1},{"label":"for_ent","kind":6,"detail":"for_ent &Player","insertText":"for_ent","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"prob_weapon","kind":6,"detail":"prob_weapon voidptr","insertText":"prob_weapon","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"force_attack","kind":6,"detail":"mut force_attack Value","insertText":"force_attack","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"weapon","kind":6,"detail":"weapon &Weapon_t","insertText":"weapon","insertTextFormat":1},{"label":"prob_weapon","kind":6,"detail":"prob_weapon voidptr","insertText":"prob_weapon","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664323889}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323889}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":195,"method":"textDocument/completion","params":{"position":{"line":85,"character":21},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v"},"context":{"triggerKind":2,"triggerCharacter":","}}},"timestamp":1664323890}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":195,"result":[]},"timestamp":1664323890}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323890}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":196,"method":"textDocument/completion","params":{"position":{"line":85,"character":22},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664323918}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":196,"result":[]},"timestamp":1664323918}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323918}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323918}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":197,"method":"textDocument/completion","params":{"position":{"line":85,"character":46},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v"},"context":{"triggerKind":2,"triggerCharacter":","}}},"timestamp":1664323927}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":197,"result":[]},"timestamp":1664323927}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323927}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":198,"method":"textDocument/completion","params":{"position":{"line":85,"character":47},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664323928}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":198,"result":[]},"timestamp":1664323928}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323928}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323930}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323931}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323931}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323932}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323949}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323949}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323950}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323950}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323951}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323951}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":199,"method":"textDocument/completion","params":{"position":{"line":85,"character":17},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664323954}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":199,"result":[]},"timestamp":1664323954}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323954}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323954}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664323958}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664324072}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664324073}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664324109}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":200,"method":"textDocument/completion","params":{"position":{"line":85,"character":4},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664324109}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":200,"result":[]},"timestamp":1664324109}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664324110}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664324131}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664324131}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":201,"method":"textDocument/completion","params":{"position":{"line":89,"character":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v"},"context":{"triggerKind":1}}},"timestamp":1664324131}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":201,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"math","kind":9,"detail":"","insertText":"math","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"weapon","kind":6,"detail":"weapon","insertText":"weapon","insertTextFormat":1},{"label":"for_ent","kind":6,"detail":"for_ent &Player","insertText":"for_ent","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"prob_weapon","kind":6,"detail":"prob_weapon voidptr","insertText":"prob_weapon","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"force_attack","kind":6,"detail":"mut force_attack Value","insertText":"force_attack","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"weapon","kind":6,"detail":"weapon &Weapon_t","insertText":"weapon","insertTextFormat":1},{"label":"prob_weapon","kind":6,"detail":"prob_weapon voidptr","insertText":"prob_weapon","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664324131}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664324131}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664324132}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664324132}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664324132}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664324132}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664324132}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664324133}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664324133}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664324134}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664324134}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":202,"method":"textDocument/completion","params":{"position":{"line":89,"character":3},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v"},"context":{"triggerKind":1}}},"timestamp":1664324134}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":202,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"math","kind":9,"detail":"","insertText":"math","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"weapon","kind":6,"detail":"weapon","insertText":"weapon","insertTextFormat":1},{"label":"for_ent","kind":6,"detail":"for_ent &Player","insertText":"for_ent","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"prob_weapon","kind":6,"detail":"prob_weapon voidptr","insertText":"prob_weapon","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"force_attack","kind":6,"detail":"mut force_attack Value","insertText":"force_attack","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"weapon","kind":6,"detail":"weapon &Weapon_t","insertText":"weapon","insertTextFormat":1},{"label":"prob_weapon","kind":6,"detail":"prob_weapon voidptr","insertText":"prob_weapon","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664324134}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664324134}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664324135}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664324135}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664324135}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664324135}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":203,"method":"textDocument/completion","params":{"position":{"line":89,"character":8},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v"},"context":{"triggerKind":2,"triggerCharacter":"."}}},"timestamp":1664324135}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":203,"result":[{"label":"radian","kind":6,"detail":"pub const radian f32","insertText":"radian","insertTextFormat":1},{"label":"Vec3","kind":22,"detail":"pub struct Vec3","insertText":"Vec3{x:$1, y:$2, z:$3}","insertTextFormat":2},{"label":"distance_from","kind":3,"detail":"pub fn distance_from(from_ent Vec3, to_ent Vec3) f32","insertText":"distance_from($0, $1)","insertTextFormat":2},{"label":"sin_cos","kind":3,"detail":"pub fn sin_cos(with_radion f32) (f32, f32)","insertText":"sin_cos($0)","insertTextFormat":2},{"label":"Angle","kind":22,"detail":"pub struct Angle","insertText":"Angle{pitch:$1, yaw:$2, roll:$3}","insertTextFormat":2},{"label":"angle_to_vectors","kind":3,"detail":"pub fn angle_to_vectors(with_angle Angle) (Vec3, Vec3, Vec3)","insertText":"angle_to_vectors($0)","insertTextFormat":2},{"label":"get_val_offset","kind":3,"detail":"pub fn get_val_offset(in_this_obj voidptr, at_offset usize) &T","insertText":"get_val_offset($0, $1)","insertTextFormat":2},{"label":"pattern_scan","kind":3,"detail":"pub fn pattern_scan(in_module string, with_sig string) ?voidptr","insertText":"pattern_scan($0, $1)","insertTextFormat":2},{"label":"wait_for_module","kind":3,"detail":"pub fn wait_for_module(mut with_modules []string, and_max_timeout int)","insertText":"wait_for_module($0, $1)","insertTextFormat":2},{"label":"Matrix","kind":22,"detail":"pub struct Matrix","insertText":"Matrix{m:$1}","insertTextFormat":2},{"label":"Vec2","kind":22,"detail":"pub struct Vec2","insertText":"Vec2{x:$1, y:$2}","insertTextFormat":2},{"label":"op_vec","kind":3,"detail":"pub fn op_vec(with_op_val f32) Vec3","insertText":"op_vec($0)","insertTextFormat":2},{"label":"new_angle","kind":3,"detail":"pub fn new_angle(x T, y T, z T) Angle","insertText":"new_angle($0, $1, $2)","insertTextFormat":2},{"label":"new_vec3","kind":3,"detail":"pub fn new_vec3(x T, y T, z T) Vec3","insertText":"new_vec3($0, $1, $2)","insertTextFormat":2},{"label":"new_vec2","kind":3,"detail":"pub fn new_vec2(x T, y T) Vec2","insertText":"new_vec2($0, $1)","insertTextFormat":2},{"label":"HResult","kind":22,"detail":"pub struct HResult","insertText":"HResult{val:$1}","insertTextFormat":2},{"label":"h_res","kind":3,"detail":"pub fn h_res(with_hres int) HResult","insertText":"h_res($0)","insertTextFormat":2},{"label":"str_align","kind":3,"detail":"pub fn str_align(with_og_text string, with_spaces_count i32, and_final_sep string) string","insertText":"str_align($0, $1, $2)","insertTextFormat":2},{"label":"load_unload_console","kind":3,"detail":"pub fn load_unload_console(with_switch bool, and_file &C.FILE)","insertText":"load_unload_console($0, $1)","insertTextFormat":2},{"label":"Color","kind":22,"detail":"pub struct Color","insertText":"Color{, rgba:$1}","insertTextFormat":2},{"label":"pront","kind":3,"detail":"pub fn pront(with_text string)","insertText":"pront($0)","insertTextFormat":2},{"label":"ColorRgbF","kind":22,"detail":"pub struct ColorRgbF","insertText":"ColorRgbF{r:$1, g:$2, b:$3}","insertTextFormat":2},{"label":"ColorRgbaF","kind":22,"detail":"pub struct ColorRgbaF","insertText":"ColorRgbaF{r:$1, g:$2, b:$3, a:$4}","insertTextFormat":2},{"label":"color_rbga","kind":3,"detail":"pub fn color_rbga(r_ T, g_ T, b_ T, a_ T) Color","insertText":"color_rbga($0, $1, $2, $3)","insertTextFormat":2},{"label":"color_f_rbga","kind":3,"detail":"pub fn color_f_rbga(r_ T, g_ T, b_ T, a_ T) Color","insertText":"color_f_rbga($0, $1, $2, $3)","insertTextFormat":2},{"label":"color_hex","kind":3,"detail":"pub fn color_hex(withHex u32) Color","insertText":"color_hex($0)","insertTextFormat":2},{"label":"error_critical","kind":3,"detail":"pub fn error_critical(with_error string, and_error_complement string)","insertText":"error_critical($0, $1)","insertTextFormat":2},{"label":"client_error","kind":3,"detail":"pub fn client_error(with_error string)","insertText":"client_error($0)","insertTextFormat":2}]},"timestamp":1664324135}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664324135}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664324136}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664324136}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":204,"method":"textDocument/completion","params":{"position":{"line":89,"character":14},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v"},"context":{"triggerKind":2,"triggerCharacter":"("}}},"timestamp":1664324136}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":204,"result":[{"label":"weapon","kind":6,"detail":"weapon","insertText":"weapon","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664324136}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664324137}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664324138}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664324138}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":205,"method":"textDocument/completion","params":{"position":{"line":89,"character":16},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v"},"context":{"triggerKind":1}}},"timestamp":1664324143}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":205,"result":[{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"math","kind":9,"detail":"","insertText":"math","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"weapon","kind":6,"detail":"weapon","insertText":"weapon","insertTextFormat":1},{"label":"for_ent","kind":6,"detail":"for_ent &Player","insertText":"for_ent","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"prob_weapon","kind":6,"detail":"prob_weapon voidptr","insertText":"prob_weapon","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"force_attack","kind":6,"detail":"mut force_attack Value","insertText":"force_attack","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"weapon","kind":6,"detail":"weapon &Weapon_t","insertText":"weapon","insertTextFormat":1},{"label":"prob_weapon","kind":6,"detail":"prob_weapon voidptr","insertText":"prob_weapon","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664324143}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664324143}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664324143}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664324145}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664324192}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664324192}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664324240}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664324249}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664324250}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664324256}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664324444}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664324444}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664324992}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664324992}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1664324994}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/scripts/build_prod.vsh","diagnostics":[]}},"timestamp":1664325511}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/scripts/build_prod.vsh","diagnostics":[]}},"timestamp":1664325511}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":206,"method":"textDocument/completion","params":{"position":{"line":11,"character":77},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/scripts/build_prod.vsh"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664325525}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":206,"result":[]},"timestamp":1664325525}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/scripts/build_prod.vsh","diagnostics":[]}},"timestamp":1664325525}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/scripts/build_prod.vsh","diagnostics":[]}},"timestamp":1664325525}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":207,"method":"textDocument/completion","params":{"position":{"line":11,"character":79},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/scripts/build_prod.vsh"},"context":{"triggerKind":1}}},"timestamp":1664325526}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":207,"result":[{"label":"os","kind":9,"detail":"","insertText":"os","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"ls","kind":6,"detail":"mut ls","insertText":"ls","insertTextFormat":1},{"label":"og_prod_res","kind":6,"detail":"og_prod_res","insertText":"og_prod_res","insertTextFormat":1},{"label":"og_cmd","kind":6,"detail":"og_cmd","insertText":"og_cmd","insertTextFormat":1},{"label":"fixed_cmd","kind":6,"detail":"fixed_cmd","insertText":"fixed_cmd","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664325526}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/scripts/build_prod.vsh","diagnostics":[]}},"timestamp":1664325526}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/scripts/build_prod.vsh","diagnostics":[]}},"timestamp":1664325526}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":208,"method":"textDocument/completion","params":{"position":{"line":11,"character":81},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/scripts/build_prod.vsh"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664325527}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":208,"result":[]},"timestamp":1664325527}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/scripts/build_prod.vsh","diagnostics":[]}},"timestamp":1664325527}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":209,"method":"textDocument/completion","params":{"position":{"line":11,"character":82},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/scripts/build_prod.vsh"},"context":{"triggerKind":1}}},"timestamp":1664325527}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":209,"result":[{"label":"os","kind":9,"detail":"","insertText":"os","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"err","kind":6,"detail":"err IError","insertText":"err","insertTextFormat":1},{"label":"err","kind":6,"detail":"err IError","insertText":"err","insertTextFormat":1},{"label":"fl_n","kind":6,"detail":"fl_n","insertText":"fl_n","insertTextFormat":1},{"label":"err","kind":6,"detail":"err IError","insertText":"err","insertTextFormat":1},{"label":"ls","kind":6,"detail":"mut ls","insertText":"ls","insertTextFormat":1},{"label":"og_prod_res","kind":6,"detail":"og_prod_res","insertText":"og_prod_res","insertTextFormat":1},{"label":"og_cmd","kind":6,"detail":"og_cmd","insertText":"og_cmd","insertTextFormat":1},{"label":"fixed_cmd","kind":6,"detail":"fixed_cmd","insertText":"fixed_cmd","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664325527}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/scripts/build_prod.vsh","diagnostics":[]}},"timestamp":1664325527}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/scripts/build_prod.vsh","diagnostics":[]}},"timestamp":1664325527}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/scripts/build_prod.vsh","diagnostics":[]}},"timestamp":1664325527}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/scripts/build_prod.vsh","diagnostics":[]}},"timestamp":1664325527}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/scripts/build_prod.vsh","diagnostics":[]}},"timestamp":1664325530}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/main.v","diagnostics":[]}},"timestamp":1664325555}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/main.v","diagnostics":[]}},"timestamp":1664325555}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331911}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":210,"method":"textDocument/completion","params":{"position":{"line":28,"character":29},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664331923}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":210,"result":[]},"timestamp":1664331923}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331923}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":211,"method":"textDocument/completion","params":{"position":{"line":28,"character":25},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664331923}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":211,"result":[]},"timestamp":1664331923}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331923}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":212,"method":"textDocument/completion","params":{"position":{"line":28,"character":23},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664331924}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":212,"result":[]},"timestamp":1664331924}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331924}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":213,"method":"textDocument/completion","params":{"position":{"line":28,"character":16},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v"},"context":{"triggerKind":2,"triggerCharacter":"="}}},"timestamp":1664331924}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":213,"result":[]},"timestamp":1664331924}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331924}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":214,"method":"textDocument/completion","params":{"position":{"line":28,"character":15},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664331924}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":214,"result":[]},"timestamp":1664331924}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331924}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":215,"method":"textDocument/completion","params":{"position":{"line":28,"character":13},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v"},"context":{"triggerKind":1}}},"timestamp":1664331924}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":215,"result":[{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"i","kind":6,"detail":"mut i Interfaces","insertText":"i","insertTextFormat":1},{"label":"withName","kind":6,"detail":"withName string","insertText":"withName","insertTextFormat":1},{"label":"inModule","kind":6,"detail":"inModule string","insertText":"inModule","insertTextFormat":1},{"label":"h_mod","kind":6,"detail":"h_mod","insertText":"h_mod","insertTextFormat":1},{"label":"crt_itfc_add","kind":6,"detail":"crt_itfc_add","insertText":"crt_itfc_add","insertTextFormat":1},{"label":"o_create_interface","kind":6,"detail":"o_create_interface","insertText":"o_create_interface","insertTextFormat":1},{"label":"itfc_add","kind":6,"detail":"itfc_add","insertText":"itfc_add","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, unsafe:$2}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"force_attack","kind":6,"detail":"mut force_attack Value","insertText":"force_attack","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"weapon","kind":6,"detail":"weapon &Weapon_t","insertText":"weapon","insertTextFormat":1},{"label":"prob_weapon","kind":6,"detail":"prob_weapon voidptr","insertText":"prob_weapon","insertTextFormat":1},{"label":"- %p\", for_ent.active_weapon()","kind":6,"detail":"- %p\", for_ent.active_weapon() voidptr","insertText":"- %p\", for_ent.active_weapon()","insertTextFormat":1},{"label":"&T {\n\th_mod","kind":6,"detail":"&T {\n\th_mod","insertText":"&T {\n\th_mod","insertTextFormat":1},{"label":"crt_itfc_add","kind":6,"detail":"crt_itfc_add","insertText":"crt_itfc_add","insertTextFormat":1},{"label":"o_create_interface","kind":6,"detail":"o_create_interface","insertText":"o_create_interface","insertTextFormat":1},{"label":"itfc_add","kind":6,"detail":"itfc_add","insertText":"itfc_add","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664331924}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331924}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":216,"method":"textDocument/completion","params":{"position":{"line":28,"character":8},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v"},"context":{"triggerKind":2,"triggerCharacter":"("}}},"timestamp":1664331925}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":216,"result":[{"label":"radian","kind":6,"detail":"pub const radian f32","insertText":"radian","insertTextFormat":1},{"label":"Vec3","kind":22,"detail":"pub struct Vec3","insertText":"Vec3","insertTextFormat":1},{"label":"distance_from","kind":3,"detail":"pub fn distance_from(from_ent Vec3, to_ent Vec3) f32","insertText":"distance_from","insertTextFormat":1},{"label":"sin_cos","kind":3,"detail":"pub fn sin_cos(with_radion f32) (f32, f32)","insertText":"sin_cos","insertTextFormat":1},{"label":"Angle","kind":22,"detail":"pub struct Angle","insertText":"Angle","insertTextFormat":1},{"label":"angle_to_vectors","kind":3,"detail":"pub fn angle_to_vectors(with_angle Angle) (Vec3, Vec3, Vec3)","insertText":"angle_to_vectors","insertTextFormat":1},{"label":"get_val_offset","kind":3,"detail":"pub fn get_val_offset(in_this_obj voidptr, at_offset usize) &T","insertText":"get_val_offset","insertTextFormat":1},{"label":"pattern_scan","kind":3,"detail":"pub fn pattern_scan(in_module string, with_sig string) ?voidptr","insertText":"pattern_scan","insertTextFormat":1},{"label":"wait_for_module","kind":3,"detail":"pub fn wait_for_module(mut with_modules []string, and_max_timeout int)","insertText":"wait_for_module","insertTextFormat":1},{"label":"Matrix","kind":22,"detail":"pub struct Matrix","insertText":"Matrix","insertTextFormat":1},{"label":"Vec2","kind":22,"detail":"pub struct Vec2","insertText":"Vec2","insertTextFormat":1},{"label":"op_vec","kind":3,"detail":"pub fn op_vec(with_op_val f32) Vec3","insertText":"op_vec","insertTextFormat":1},{"label":"new_angle","kind":3,"detail":"pub fn new_angle(x T, y T, z T) Angle","insertText":"new_angle","insertTextFormat":1},{"label":"new_vec3","kind":3,"detail":"pub fn new_vec3(x T, y T, z T) Vec3","insertText":"new_vec3","insertTextFormat":1},{"label":"new_vec2","kind":3,"detail":"pub fn new_vec2(x T, y T) Vec2","insertText":"new_vec2","insertTextFormat":1},{"label":"HResult","kind":22,"detail":"pub struct HResult","insertText":"HResult","insertTextFormat":1},{"label":"h_res","kind":3,"detail":"pub fn h_res(with_hres int) HResult","insertText":"h_res","insertTextFormat":1},{"label":"str_align","kind":3,"detail":"pub fn str_align(with_og_text string, with_spaces_count i32, and_final_sep string) string","insertText":"str_align","insertTextFormat":1},{"label":"load_unload_console","kind":3,"detail":"pub fn load_unload_console(with_switch bool, and_file &C.FILE)","insertText":"load_unload_console","insertTextFormat":1},{"label":"Color","kind":22,"detail":"pub struct Color","insertText":"Color","insertTextFormat":1},{"label":"pront","kind":3,"detail":"pub fn pront(with_text string)","insertText":"pront","insertTextFormat":1},{"label":"ColorRgbF","kind":22,"detail":"pub struct ColorRgbF","insertText":"ColorRgbF","insertTextFormat":1},{"label":"ColorRgbaF","kind":22,"detail":"pub struct ColorRgbaF","insertText":"ColorRgbaF","insertTextFormat":1},{"label":"color_rbga","kind":3,"detail":"pub fn color_rbga(r_ T, g_ T, b_ T, a_ T) Color","insertText":"color_rbga","insertTextFormat":1},{"label":"color_f_rbga","kind":3,"detail":"pub fn color_f_rbga(r_ T, g_ T, b_ T, a_ T) Color","insertText":"color_f_rbga","insertTextFormat":1},{"label":"color_hex","kind":3,"detail":"pub fn color_hex(withHex u32) Color","insertText":"color_hex","insertTextFormat":1},{"label":"error_critical","kind":3,"detail":"pub fn error_critical(with_error string, and_error_complement string)","insertText":"error_critical","insertTextFormat":1},{"label":"client_error","kind":3,"detail":"pub fn client_error(with_error string)","insertText":"client_error","insertTextFormat":1}]},"timestamp":1664331925}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331925}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":217,"method":"textDocument/completion","params":{"position":{"line":28,"character":7},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v"},"context":{"triggerKind":1}}},"timestamp":1664331925}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":217,"result":[{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"i","kind":6,"detail":"mut i Interfaces","insertText":"i","insertTextFormat":1},{"label":"withName","kind":6,"detail":"withName string","insertText":"withName","insertTextFormat":1},{"label":"inModule","kind":6,"detail":"inModule string","insertText":"inModule","insertTextFormat":1},{"label":"h_mod","kind":6,"detail":"h_mod","insertText":"h_mod","insertTextFormat":1},{"label":"crt_itfc_add","kind":6,"detail":"crt_itfc_add","insertText":"crt_itfc_add","insertTextFormat":1},{"label":"o_create_interface","kind":6,"detail":"o_create_interface","insertText":"o_create_interface","insertTextFormat":1},{"label":"itfc_add","kind":6,"detail":"itfc_add","insertText":"itfc_add","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, unsafe:$2}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"force_attack","kind":6,"detail":"mut force_attack Value","insertText":"force_attack","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"weapon","kind":6,"detail":"weapon &Weapon_t","insertText":"weapon","insertTextFormat":1},{"label":"prob_weapon","kind":6,"detail":"prob_weapon voidptr","insertText":"prob_weapon","insertTextFormat":1},{"label":"- %p\", for_ent.active_weapon()","kind":6,"detail":"- %p\", for_ent.active_weapon() voidptr","insertText":"- %p\", for_ent.active_weapon()","insertTextFormat":1},{"label":"&T {\n\th_mod","kind":6,"detail":"&T {\n\th_mod","insertText":"&T {\n\th_mod","insertTextFormat":1},{"label":"crt_itfc_add","kind":6,"detail":"crt_itfc_add","insertText":"crt_itfc_add","insertTextFormat":1},{"label":"o_create_interface","kind":6,"detail":"o_create_interface","insertText":"o_create_interface","insertTextFormat":1},{"label":"itfc_add","kind":6,"detail":"itfc_add","insertText":"itfc_add","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664331925}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331925}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":218,"method":"textDocument/completion","params":{"position":{"line":28,"character":4},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664331926}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":218,"result":[{"label":"radian","kind":6,"detail":"pub const radian f32","insertText":"radian","insertTextFormat":1},{"label":"Vec3","kind":22,"detail":"pub struct Vec3","insertText":"Vec3","insertTextFormat":1},{"label":"distance_from","kind":3,"detail":"pub fn distance_from(from_ent Vec3, to_ent Vec3) f32","insertText":"distance_from","insertTextFormat":1},{"label":"sin_cos","kind":3,"detail":"pub fn sin_cos(with_radion f32) (f32, f32)","insertText":"sin_cos","insertTextFormat":1},{"label":"Angle","kind":22,"detail":"pub struct Angle","insertText":"Angle","insertTextFormat":1},{"label":"angle_to_vectors","kind":3,"detail":"pub fn angle_to_vectors(with_angle Angle) (Vec3, Vec3, Vec3)","insertText":"angle_to_vectors","insertTextFormat":1},{"label":"get_val_offset","kind":3,"detail":"pub fn get_val_offset(in_this_obj voidptr, at_offset usize) &T","insertText":"get_val_offset","insertTextFormat":1},{"label":"pattern_scan","kind":3,"detail":"pub fn pattern_scan(in_module string, with_sig string) ?voidptr","insertText":"pattern_scan","insertTextFormat":1},{"label":"wait_for_module","kind":3,"detail":"pub fn wait_for_module(mut with_modules []string, and_max_timeout int)","insertText":"wait_for_module","insertTextFormat":1},{"label":"Matrix","kind":22,"detail":"pub struct Matrix","insertText":"Matrix","insertTextFormat":1},{"label":"Vec2","kind":22,"detail":"pub struct Vec2","insertText":"Vec2","insertTextFormat":1},{"label":"op_vec","kind":3,"detail":"pub fn op_vec(with_op_val f32) Vec3","insertText":"op_vec","insertTextFormat":1},{"label":"new_angle","kind":3,"detail":"pub fn new_angle(x T, y T, z T) Angle","insertText":"new_angle","insertTextFormat":1},{"label":"new_vec3","kind":3,"detail":"pub fn new_vec3(x T, y T, z T) Vec3","insertText":"new_vec3","insertTextFormat":1},{"label":"new_vec2","kind":3,"detail":"pub fn new_vec2(x T, y T) Vec2","insertText":"new_vec2","insertTextFormat":1},{"label":"HResult","kind":22,"detail":"pub struct HResult","insertText":"HResult","insertTextFormat":1},{"label":"h_res","kind":3,"detail":"pub fn h_res(with_hres int) HResult","insertText":"h_res","insertTextFormat":1},{"label":"str_align","kind":3,"detail":"pub fn str_align(with_og_text string, with_spaces_count i32, and_final_sep string) string","insertText":"str_align","insertTextFormat":1},{"label":"load_unload_console","kind":3,"detail":"pub fn load_unload_console(with_switch bool, and_file &C.FILE)","insertText":"load_unload_console","insertTextFormat":1},{"label":"Color","kind":22,"detail":"pub struct Color","insertText":"Color","insertTextFormat":1},{"label":"pront","kind":3,"detail":"pub fn pront(with_text string)","insertText":"pront","insertTextFormat":1},{"label":"ColorRgbF","kind":22,"detail":"pub struct ColorRgbF","insertText":"ColorRgbF","insertTextFormat":1},{"label":"ColorRgbaF","kind":22,"detail":"pub struct ColorRgbaF","insertText":"ColorRgbaF","insertTextFormat":1},{"label":"color_rbga","kind":3,"detail":"pub fn color_rbga(r_ T, g_ T, b_ T, a_ T) Color","insertText":"color_rbga","insertTextFormat":1},{"label":"color_f_rbga","kind":3,"detail":"pub fn color_f_rbga(r_ T, g_ T, b_ T, a_ T) Color","insertText":"color_f_rbga","insertTextFormat":1},{"label":"color_hex","kind":3,"detail":"pub fn color_hex(withHex u32) Color","insertText":"color_hex","insertTextFormat":1},{"label":"error_critical","kind":3,"detail":"pub fn error_critical(with_error string, and_error_complement string)","insertText":"error_critical","insertTextFormat":1},{"label":"client_error","kind":3,"detail":"pub fn client_error(with_error string)","insertText":"client_error","insertTextFormat":1}]},"timestamp":1664331926}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331926}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331927}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331927}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331927}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331928}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331928}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331928}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":219,"method":"textDocument/completion","params":{"position":{"line":28,"character":11},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v"},"context":{"triggerKind":2,"triggerCharacter":"("}}},"timestamp":1664331928}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":219,"result":[]},"timestamp":1664331928}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331929}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":220,"method":"textDocument/completion","params":{"position":{"line":28,"character":12},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v"},"context":{"triggerKind":1}}},"timestamp":1664331929}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":220,"result":[{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"i","kind":6,"detail":"mut i Interfaces","insertText":"i","insertTextFormat":1},{"label":"withName","kind":6,"detail":"withName string","insertText":"withName","insertTextFormat":1},{"label":"inModule","kind":6,"detail":"inModule string","insertText":"inModule","insertTextFormat":1},{"label":"h_mod","kind":6,"detail":"h_mod","insertText":"h_mod","insertTextFormat":1},{"label":"crt_itfc_add","kind":6,"detail":"crt_itfc_add","insertText":"crt_itfc_add","insertTextFormat":1},{"label":"o_create_interface","kind":6,"detail":"o_create_interface","insertText":"o_create_interface","insertTextFormat":1},{"label":"itfc_add","kind":6,"detail":"itfc_add","insertText":"itfc_add","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, unsafe:$2}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"force_attack","kind":6,"detail":"mut force_attack Value","insertText":"force_attack","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"weapon","kind":6,"detail":"weapon &Weapon_t","insertText":"weapon","insertTextFormat":1},{"label":"prob_weapon","kind":6,"detail":"prob_weapon voidptr","insertText":"prob_weapon","insertTextFormat":1},{"label":"- %p\", for_ent.active_weapon()","kind":6,"detail":"- %p\", for_ent.active_weapon() voidptr","insertText":"- %p\", for_ent.active_weapon()","insertTextFormat":1},{"label":"&T {\n\th_mod","kind":6,"detail":"&T {\n\th_mod","insertText":"&T {\n\th_mod","insertTextFormat":1},{"label":"crt_itfc_add","kind":6,"detail":"crt_itfc_add","insertText":"crt_itfc_add","insertTextFormat":1},{"label":"o_create_interface","kind":6,"detail":"o_create_interface","insertText":"o_create_interface","insertTextFormat":1},{"label":"itfc_add","kind":6,"detail":"itfc_add","insertText":"itfc_add","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664331929}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331929}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331930}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331931}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331931}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/d3d/d3d.v","diagnostics":[]}},"timestamp":1664331945}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/d3d/d3d.v","diagnostics":[]}},"timestamp":1664331945}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":221,"method":"textDocument/completion","params":{"position":{"line":28,"character":6},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v"},"context":{"triggerKind":1}}},"timestamp":1664331958}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":221,"result":[{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"i","kind":6,"detail":"mut i Interfaces","insertText":"i","insertTextFormat":1},{"label":"withName","kind":6,"detail":"withName string","insertText":"withName","insertTextFormat":1},{"label":"inModule","kind":6,"detail":"inModule string","insertText":"inModule","insertTextFormat":1},{"label":"h_mod","kind":6,"detail":"h_mod","insertText":"h_mod","insertTextFormat":1},{"label":"crt_itfc_add","kind":6,"detail":"crt_itfc_add","insertText":"crt_itfc_add","insertTextFormat":1},{"label":"o_create_interface","kind":6,"detail":"o_create_interface","insertText":"o_create_interface","insertTextFormat":1},{"label":"itfc_add","kind":6,"detail":"itfc_add","insertText":"itfc_add","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, unsafe:$2}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"force_attack","kind":6,"detail":"mut force_attack Value","insertText":"force_attack","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"weapon","kind":6,"detail":"weapon &Weapon_t","insertText":"weapon","insertTextFormat":1},{"label":"prob_weapon","kind":6,"detail":"prob_weapon voidptr","insertText":"prob_weapon","insertTextFormat":1},{"label":"- %p\", for_ent.active_weapon()","kind":6,"detail":"- %p\", for_ent.active_weapon() voidptr","insertText":"- %p\", for_ent.active_weapon()","insertTextFormat":1},{"label":"&T {\n\th_mod","kind":6,"detail":"&T {\n\th_mod","insertText":"&T {\n\th_mod","insertTextFormat":1},{"label":"crt_itfc_add","kind":6,"detail":"crt_itfc_add","insertText":"crt_itfc_add","insertTextFormat":1},{"label":"o_create_interface","kind":6,"detail":"o_create_interface","insertText":"o_create_interface","insertTextFormat":1},{"label":"itfc_add","kind":6,"detail":"itfc_add","insertText":"itfc_add","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664331958}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331958}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":222,"method":"textDocument/completion","params":{"position":{"line":32,"character":36},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664331969}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":222,"result":[]},"timestamp":1664331969}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331969}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":223,"method":"textDocument/completion","params":{"position":{"line":32,"character":32},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664331969}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":223,"result":[]},"timestamp":1664331969}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331969}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":224,"method":"textDocument/completion","params":{"position":{"line":32,"character":30},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664331970}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":224,"result":[]},"timestamp":1664331970}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331970}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":225,"method":"textDocument/completion","params":{"position":{"line":32,"character":23},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v"},"context":{"triggerKind":2,"triggerCharacter":"="}}},"timestamp":1664331970}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":225,"result":[]},"timestamp":1664331970}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331970}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":226,"method":"textDocument/completion","params":{"position":{"line":32,"character":22},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664331971}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":226,"result":[]},"timestamp":1664331971}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331971}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":227,"method":"textDocument/completion","params":{"position":{"line":32,"character":20},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v"},"context":{"triggerKind":1}}},"timestamp":1664331971}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":227,"result":[{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"i","kind":6,"detail":"mut i Interfaces","insertText":"i","insertTextFormat":1},{"label":"withName","kind":6,"detail":"withName string","insertText":"withName","insertTextFormat":1},{"label":"inModule","kind":6,"detail":"inModule string","insertText":"inModule","insertTextFormat":1},{"label":"h_mod","kind":6,"detail":"h_mod","insertText":"h_mod","insertTextFormat":1},{"label":"crt_itfc_add","kind":6,"detail":"crt_itfc_add","insertText":"crt_itfc_add","insertTextFormat":1},{"label":"o_create_interface","kind":6,"detail":"o_create_interface","insertText":"o_create_interface","insertTextFormat":1},{"label":"itfc_add","kind":6,"detail":"itfc_add","insertText":"itfc_add","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, unsafe:$2}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"force_attack","kind":6,"detail":"mut force_attack Value","insertText":"force_attack","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"weapon","kind":6,"detail":"weapon &Weapon_t","insertText":"weapon","insertTextFormat":1},{"label":"prob_weapon","kind":6,"detail":"prob_weapon voidptr","insertText":"prob_weapon","insertTextFormat":1},{"label":"- %p\", for_ent.active_weapon()","kind":6,"detail":"- %p\", for_ent.active_weapon() voidptr","insertText":"- %p\", for_ent.active_weapon()","insertTextFormat":1},{"label":"&T {\n\th_mod","kind":6,"detail":"&T {\n\th_mod","insertText":"&T {\n\th_mod","insertTextFormat":1},{"label":"crt_itfc_add","kind":6,"detail":"crt_itfc_add","insertText":"crt_itfc_add","insertTextFormat":1},{"label":"o_create_interface","kind":6,"detail":"o_create_interface","insertText":"o_create_interface","insertTextFormat":1},{"label":"itfc_add","kind":6,"detail":"itfc_add","insertText":"itfc_add","insertTextFormat":1},{"label":"ptn_res","kind":6,"detail":"ptn_res voidptr","insertText":"ptn_res","insertTextFormat":1},{"label":"if_add","kind":6,"detail":"if_add","insertText":"if_add","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664331971}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331971}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":228,"method":"textDocument/completion","params":{"position":{"line":32,"character":8},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v"},"context":{"triggerKind":2,"triggerCharacter":"("}}},"timestamp":1664331971}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":228,"result":[{"label":"radian","kind":6,"detail":"pub const radian f32","insertText":"radian","insertTextFormat":1},{"label":"Vec3","kind":22,"detail":"pub struct Vec3","insertText":"Vec3","insertTextFormat":1},{"label":"distance_from","kind":3,"detail":"pub fn distance_from(from_ent Vec3, to_ent Vec3) f32","insertText":"distance_from","insertTextFormat":1},{"label":"sin_cos","kind":3,"detail":"pub fn sin_cos(with_radion f32) (f32, f32)","insertText":"sin_cos","insertTextFormat":1},{"label":"Angle","kind":22,"detail":"pub struct Angle","insertText":"Angle","insertTextFormat":1},{"label":"angle_to_vectors","kind":3,"detail":"pub fn angle_to_vectors(with_angle Angle) (Vec3, Vec3, Vec3)","insertText":"angle_to_vectors","insertTextFormat":1},{"label":"get_val_offset","kind":3,"detail":"pub fn get_val_offset(in_this_obj voidptr, at_offset usize) &T","insertText":"get_val_offset","insertTextFormat":1},{"label":"pattern_scan","kind":3,"detail":"pub fn pattern_scan(in_module string, with_sig string) ?voidptr","insertText":"pattern_scan","insertTextFormat":1},{"label":"wait_for_module","kind":3,"detail":"pub fn wait_for_module(mut with_modules []string, and_max_timeout int)","insertText":"wait_for_module","insertTextFormat":1},{"label":"Matrix","kind":22,"detail":"pub struct Matrix","insertText":"Matrix","insertTextFormat":1},{"label":"Vec2","kind":22,"detail":"pub struct Vec2","insertText":"Vec2","insertTextFormat":1},{"label":"op_vec","kind":3,"detail":"pub fn op_vec(with_op_val f32) Vec3","insertText":"op_vec","insertTextFormat":1},{"label":"new_angle","kind":3,"detail":"pub fn new_angle(x T, y T, z T) Angle","insertText":"new_angle","insertTextFormat":1},{"label":"new_vec3","kind":3,"detail":"pub fn new_vec3(x T, y T, z T) Vec3","insertText":"new_vec3","insertTextFormat":1},{"label":"new_vec2","kind":3,"detail":"pub fn new_vec2(x T, y T) Vec2","insertText":"new_vec2","insertTextFormat":1},{"label":"HResult","kind":22,"detail":"pub struct HResult","insertText":"HResult","insertTextFormat":1},{"label":"h_res","kind":3,"detail":"pub fn h_res(with_hres int) HResult","insertText":"h_res","insertTextFormat":1},{"label":"str_align","kind":3,"detail":"pub fn str_align(with_og_text string, with_spaces_count i32, and_final_sep string) string","insertText":"str_align","insertTextFormat":1},{"label":"load_unload_console","kind":3,"detail":"pub fn load_unload_console(with_switch bool, and_file &C.FILE)","insertText":"load_unload_console","insertTextFormat":1},{"label":"Color","kind":22,"detail":"pub struct Color","insertText":"Color","insertTextFormat":1},{"label":"pront","kind":3,"detail":"pub fn pront(with_text string)","insertText":"pront","insertTextFormat":1},{"label":"ColorRgbF","kind":22,"detail":"pub struct ColorRgbF","insertText":"ColorRgbF","insertTextFormat":1},{"label":"ColorRgbaF","kind":22,"detail":"pub struct ColorRgbaF","insertText":"ColorRgbaF","insertTextFormat":1},{"label":"color_rbga","kind":3,"detail":"pub fn color_rbga(r_ T, g_ T, b_ T, a_ T) Color","insertText":"color_rbga","insertTextFormat":1},{"label":"color_f_rbga","kind":3,"detail":"pub fn color_f_rbga(r_ T, g_ T, b_ T, a_ T) Color","insertText":"color_f_rbga","insertTextFormat":1},{"label":"color_hex","kind":3,"detail":"pub fn color_hex(withHex u32) Color","insertText":"color_hex","insertTextFormat":1},{"label":"error_critical","kind":3,"detail":"pub fn error_critical(with_error string, and_error_complement string)","insertText":"error_critical","insertTextFormat":1},{"label":"client_error","kind":3,"detail":"pub fn client_error(with_error string)","insertText":"client_error","insertTextFormat":1}]},"timestamp":1664331971}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331971}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":229,"method":"textDocument/completion","params":{"position":{"line":32,"character":7},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v"},"context":{"triggerKind":1}}},"timestamp":1664331971}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":229,"result":[{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"i","kind":6,"detail":"mut i Interfaces","insertText":"i","insertTextFormat":1},{"label":"withName","kind":6,"detail":"withName string","insertText":"withName","insertTextFormat":1},{"label":"inModule","kind":6,"detail":"inModule string","insertText":"inModule","insertTextFormat":1},{"label":"h_mod","kind":6,"detail":"h_mod","insertText":"h_mod","insertTextFormat":1},{"label":"crt_itfc_add","kind":6,"detail":"crt_itfc_add","insertText":"crt_itfc_add","insertTextFormat":1},{"label":"o_create_interface","kind":6,"detail":"o_create_interface","insertText":"o_create_interface","insertTextFormat":1},{"label":"itfc_add","kind":6,"detail":"itfc_add","insertText":"itfc_add","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, unsafe:$2}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"force_attack","kind":6,"detail":"mut force_attack Value","insertText":"force_attack","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"weapon","kind":6,"detail":"weapon &Weapon_t","insertText":"weapon","insertTextFormat":1},{"label":"prob_weapon","kind":6,"detail":"prob_weapon voidptr","insertText":"prob_weapon","insertTextFormat":1},{"label":"- %p\", for_ent.active_weapon()","kind":6,"detail":"- %p\", for_ent.active_weapon() voidptr","insertText":"- %p\", for_ent.active_weapon()","insertTextFormat":1},{"label":"&T {\n\th_mod","kind":6,"detail":"&T {\n\th_mod","insertText":"&T {\n\th_mod","insertTextFormat":1},{"label":"crt_itfc_add","kind":6,"detail":"crt_itfc_add","insertText":"crt_itfc_add","insertTextFormat":1},{"label":"o_create_interface","kind":6,"detail":"o_create_interface","insertText":"o_create_interface","insertTextFormat":1},{"label":"itfc_add","kind":6,"detail":"itfc_add","insertText":"itfc_add","insertTextFormat":1},{"label":"ptn_res","kind":6,"detail":"ptn_res voidptr","insertText":"ptn_res","insertTextFormat":1},{"label":"if_add","kind":6,"detail":"if_add","insertText":"if_add","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664331971}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331971}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331973}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331973}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331975}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331975}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":230,"method":"textDocument/completion","params":{"position":{"line":32,"character":19},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v"},"context":{"triggerKind":1}}},"timestamp":1664331978}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":230,"result":[{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"i","kind":6,"detail":"mut i Interfaces","insertText":"i","insertTextFormat":1},{"label":"withName","kind":6,"detail":"withName string","insertText":"withName","insertTextFormat":1},{"label":"inModule","kind":6,"detail":"inModule string","insertText":"inModule","insertTextFormat":1},{"label":"h_mod","kind":6,"detail":"h_mod","insertText":"h_mod","insertTextFormat":1},{"label":"crt_itfc_add","kind":6,"detail":"crt_itfc_add","insertText":"crt_itfc_add","insertTextFormat":1},{"label":"o_create_interface","kind":6,"detail":"o_create_interface","insertText":"o_create_interface","insertTextFormat":1},{"label":"itfc_add","kind":6,"detail":"itfc_add","insertText":"itfc_add","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, unsafe:$2}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"force_attack","kind":6,"detail":"mut force_attack Value","insertText":"force_attack","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"weapon","kind":6,"detail":"weapon &Weapon_t","insertText":"weapon","insertTextFormat":1},{"label":"prob_weapon","kind":6,"detail":"prob_weapon voidptr","insertText":"prob_weapon","insertTextFormat":1},{"label":"- %p\", for_ent.active_weapon()","kind":6,"detail":"- %p\", for_ent.active_weapon() voidptr","insertText":"- %p\", for_ent.active_weapon()","insertTextFormat":1},{"label":"&T {\n\th_mod","kind":6,"detail":"&T {\n\th_mod","insertText":"&T {\n\th_mod","insertTextFormat":1},{"label":"crt_itfc_add","kind":6,"detail":"crt_itfc_add","insertText":"crt_itfc_add","insertTextFormat":1},{"label":"o_create_interface","kind":6,"detail":"o_create_interface","insertText":"o_create_interface","insertTextFormat":1},{"label":"itfc_add","kind":6,"detail":"itfc_add","insertText":"itfc_add","insertTextFormat":1},{"label":"ptn_res","kind":6,"detail":"ptn_res voidptr","insertText":"ptn_res","insertTextFormat":1},{"label":"if_add","kind":6,"detail":"if_add","insertText":"if_add","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664331978}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331978}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331978}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331978}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331979}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331979}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331979}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331979}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":231,"method":"textDocument/completion","params":{"position":{"line":32,"character":8},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v"},"context":{"triggerKind":2,"triggerCharacter":"("}}},"timestamp":1664331979}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":231,"result":[{"label":"radian","kind":6,"detail":"pub const radian f32","insertText":"radian","insertTextFormat":1},{"label":"Vec3","kind":22,"detail":"pub struct Vec3","insertText":"Vec3","insertTextFormat":1},{"label":"distance_from","kind":3,"detail":"pub fn distance_from(from_ent Vec3, to_ent Vec3) f32","insertText":"distance_from","insertTextFormat":1},{"label":"sin_cos","kind":3,"detail":"pub fn sin_cos(with_radion f32) (f32, f32)","insertText":"sin_cos","insertTextFormat":1},{"label":"Angle","kind":22,"detail":"pub struct Angle","insertText":"Angle","insertTextFormat":1},{"label":"angle_to_vectors","kind":3,"detail":"pub fn angle_to_vectors(with_angle Angle) (Vec3, Vec3, Vec3)","insertText":"angle_to_vectors","insertTextFormat":1},{"label":"get_val_offset","kind":3,"detail":"pub fn get_val_offset(in_this_obj voidptr, at_offset usize) &T","insertText":"get_val_offset","insertTextFormat":1},{"label":"pattern_scan","kind":3,"detail":"pub fn pattern_scan(in_module string, with_sig string) ?voidptr","insertText":"pattern_scan","insertTextFormat":1},{"label":"wait_for_module","kind":3,"detail":"pub fn wait_for_module(mut with_modules []string, and_max_timeout int)","insertText":"wait_for_module","insertTextFormat":1},{"label":"Matrix","kind":22,"detail":"pub struct Matrix","insertText":"Matrix","insertTextFormat":1},{"label":"Vec2","kind":22,"detail":"pub struct Vec2","insertText":"Vec2","insertTextFormat":1},{"label":"op_vec","kind":3,"detail":"pub fn op_vec(with_op_val f32) Vec3","insertText":"op_vec","insertTextFormat":1},{"label":"new_angle","kind":3,"detail":"pub fn new_angle(x T, y T, z T) Angle","insertText":"new_angle","insertTextFormat":1},{"label":"new_vec3","kind":3,"detail":"pub fn new_vec3(x T, y T, z T) Vec3","insertText":"new_vec3","insertTextFormat":1},{"label":"new_vec2","kind":3,"detail":"pub fn new_vec2(x T, y T) Vec2","insertText":"new_vec2","insertTextFormat":1},{"label":"HResult","kind":22,"detail":"pub struct HResult","insertText":"HResult","insertTextFormat":1},{"label":"h_res","kind":3,"detail":"pub fn h_res(with_hres int) HResult","insertText":"h_res","insertTextFormat":1},{"label":"str_align","kind":3,"detail":"pub fn str_align(with_og_text string, with_spaces_count i32, and_final_sep string) string","insertText":"str_align","insertTextFormat":1},{"label":"load_unload_console","kind":3,"detail":"pub fn load_unload_console(with_switch bool, and_file &C.FILE)","insertText":"load_unload_console","insertTextFormat":1},{"label":"Color","kind":22,"detail":"pub struct Color","insertText":"Color","insertTextFormat":1},{"label":"pront","kind":3,"detail":"pub fn pront(with_text string)","insertText":"pront","insertTextFormat":1},{"label":"ColorRgbF","kind":22,"detail":"pub struct ColorRgbF","insertText":"ColorRgbF","insertTextFormat":1},{"label":"ColorRgbaF","kind":22,"detail":"pub struct ColorRgbaF","insertText":"ColorRgbaF","insertTextFormat":1},{"label":"color_rbga","kind":3,"detail":"pub fn color_rbga(r_ T, g_ T, b_ T, a_ T) Color","insertText":"color_rbga","insertTextFormat":1},{"label":"color_f_rbga","kind":3,"detail":"pub fn color_f_rbga(r_ T, g_ T, b_ T, a_ T) Color","insertText":"color_f_rbga","insertTextFormat":1},{"label":"color_hex","kind":3,"detail":"pub fn color_hex(withHex u32) Color","insertText":"color_hex","insertTextFormat":1},{"label":"error_critical","kind":3,"detail":"pub fn error_critical(with_error string, and_error_complement string)","insertText":"error_critical","insertTextFormat":1},{"label":"client_error","kind":3,"detail":"pub fn client_error(with_error string)","insertText":"client_error","insertTextFormat":1}]},"timestamp":1664331979}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331979}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331980}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331980}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331980}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331981}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":232,"method":"textDocument/completion","params":{"position":{"line":32,"character":23},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v"},"context":{"triggerKind":2,"triggerCharacter":"="}}},"timestamp":1664331985}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":232,"result":[]},"timestamp":1664331985}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331985}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":233,"method":"textDocument/completion","params":{"position":{"line":32,"character":22},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664331985}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":233,"result":[]},"timestamp":1664331985}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331985}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":234,"method":"textDocument/completion","params":{"position":{"line":32,"character":20},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v"},"context":{"triggerKind":1}}},"timestamp":1664331985}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":234,"result":[{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"i","kind":6,"detail":"mut i Interfaces","insertText":"i","insertTextFormat":1},{"label":"withName","kind":6,"detail":"withName string","insertText":"withName","insertTextFormat":1},{"label":"inModule","kind":6,"detail":"inModule string","insertText":"inModule","insertTextFormat":1},{"label":"h_mod","kind":6,"detail":"h_mod","insertText":"h_mod","insertTextFormat":1},{"label":"crt_itfc_add","kind":6,"detail":"crt_itfc_add","insertText":"crt_itfc_add","insertTextFormat":1},{"label":"o_create_interface","kind":6,"detail":"o_create_interface","insertText":"o_create_interface","insertTextFormat":1},{"label":"itfc_add","kind":6,"detail":"itfc_add","insertText":"itfc_add","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, unsafe:$2}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"force_attack","kind":6,"detail":"mut force_attack Value","insertText":"force_attack","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"weapon","kind":6,"detail":"weapon &Weapon_t","insertText":"weapon","insertTextFormat":1},{"label":"prob_weapon","kind":6,"detail":"prob_weapon voidptr","insertText":"prob_weapon","insertTextFormat":1},{"label":"- %p\", for_ent.active_weapon()","kind":6,"detail":"- %p\", for_ent.active_weapon() voidptr","insertText":"- %p\", for_ent.active_weapon()","insertTextFormat":1},{"label":"&T {\n\th_mod","kind":6,"detail":"&T {\n\th_mod","insertText":"&T {\n\th_mod","insertTextFormat":1},{"label":"crt_itfc_add","kind":6,"detail":"crt_itfc_add","insertText":"crt_itfc_add","insertTextFormat":1},{"label":"o_create_interface","kind":6,"detail":"o_create_interface","insertText":"o_create_interface","insertTextFormat":1},{"label":"itfc_add","kind":6,"detail":"itfc_add","insertText":"itfc_add","insertTextFormat":1},{"label":"ptn_res","kind":6,"detail":"ptn_res voidptr","insertText":"ptn_res","insertTextFormat":1},{"label":"if_add","kind":6,"detail":"if_add","insertText":"if_add","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664331985}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331985}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":235,"method":"textDocument/completion","params":{"position":{"line":32,"character":8},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v"},"context":{"triggerKind":2,"triggerCharacter":"("}}},"timestamp":1664331986}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":235,"result":[{"label":"radian","kind":6,"detail":"pub const radian f32","insertText":"radian","insertTextFormat":1},{"label":"Vec3","kind":22,"detail":"pub struct Vec3","insertText":"Vec3","insertTextFormat":1},{"label":"distance_from","kind":3,"detail":"pub fn distance_from(from_ent Vec3, to_ent Vec3) f32","insertText":"distance_from","insertTextFormat":1},{"label":"sin_cos","kind":3,"detail":"pub fn sin_cos(with_radion f32) (f32, f32)","insertText":"sin_cos","insertTextFormat":1},{"label":"Angle","kind":22,"detail":"pub struct Angle","insertText":"Angle","insertTextFormat":1},{"label":"angle_to_vectors","kind":3,"detail":"pub fn angle_to_vectors(with_angle Angle) (Vec3, Vec3, Vec3)","insertText":"angle_to_vectors","insertTextFormat":1},{"label":"get_val_offset","kind":3,"detail":"pub fn get_val_offset(in_this_obj voidptr, at_offset usize) &T","insertText":"get_val_offset","insertTextFormat":1},{"label":"pattern_scan","kind":3,"detail":"pub fn pattern_scan(in_module string, with_sig string) ?voidptr","insertText":"pattern_scan","insertTextFormat":1},{"label":"wait_for_module","kind":3,"detail":"pub fn wait_for_module(mut with_modules []string, and_max_timeout int)","insertText":"wait_for_module","insertTextFormat":1},{"label":"Matrix","kind":22,"detail":"pub struct Matrix","insertText":"Matrix","insertTextFormat":1},{"label":"Vec2","kind":22,"detail":"pub struct Vec2","insertText":"Vec2","insertTextFormat":1},{"label":"op_vec","kind":3,"detail":"pub fn op_vec(with_op_val f32) Vec3","insertText":"op_vec","insertTextFormat":1},{"label":"new_angle","kind":3,"detail":"pub fn new_angle(x T, y T, z T) Angle","insertText":"new_angle","insertTextFormat":1},{"label":"new_vec3","kind":3,"detail":"pub fn new_vec3(x T, y T, z T) Vec3","insertText":"new_vec3","insertTextFormat":1},{"label":"new_vec2","kind":3,"detail":"pub fn new_vec2(x T, y T) Vec2","insertText":"new_vec2","insertTextFormat":1},{"label":"HResult","kind":22,"detail":"pub struct HResult","insertText":"HResult","insertTextFormat":1},{"label":"h_res","kind":3,"detail":"pub fn h_res(with_hres int) HResult","insertText":"h_res","insertTextFormat":1},{"label":"str_align","kind":3,"detail":"pub fn str_align(with_og_text string, with_spaces_count i32, and_final_sep string) string","insertText":"str_align","insertTextFormat":1},{"label":"load_unload_console","kind":3,"detail":"pub fn load_unload_console(with_switch bool, and_file &C.FILE)","insertText":"load_unload_console","insertTextFormat":1},{"label":"Color","kind":22,"detail":"pub struct Color","insertText":"Color","insertTextFormat":1},{"label":"pront","kind":3,"detail":"pub fn pront(with_text string)","insertText":"pront","insertTextFormat":1},{"label":"ColorRgbF","kind":22,"detail":"pub struct ColorRgbF","insertText":"ColorRgbF","insertTextFormat":1},{"label":"ColorRgbaF","kind":22,"detail":"pub struct ColorRgbaF","insertText":"ColorRgbaF","insertTextFormat":1},{"label":"color_rbga","kind":3,"detail":"pub fn color_rbga(r_ T, g_ T, b_ T, a_ T) Color","insertText":"color_rbga","insertTextFormat":1},{"label":"color_f_rbga","kind":3,"detail":"pub fn color_f_rbga(r_ T, g_ T, b_ T, a_ T) Color","insertText":"color_f_rbga","insertTextFormat":1},{"label":"color_hex","kind":3,"detail":"pub fn color_hex(withHex u32) Color","insertText":"color_hex","insertTextFormat":1},{"label":"error_critical","kind":3,"detail":"pub fn error_critical(with_error string, and_error_complement string)","insertText":"error_critical","insertTextFormat":1},{"label":"client_error","kind":3,"detail":"pub fn client_error(with_error string)","insertText":"client_error","insertTextFormat":1}]},"timestamp":1664331986}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331986}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":236,"method":"textDocument/completion","params":{"position":{"line":32,"character":7},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v"},"context":{"triggerKind":1}}},"timestamp":1664331986}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":236,"result":[{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"i","kind":6,"detail":"mut i Interfaces","insertText":"i","insertTextFormat":1},{"label":"withName","kind":6,"detail":"withName string","insertText":"withName","insertTextFormat":1},{"label":"inModule","kind":6,"detail":"inModule string","insertText":"inModule","insertTextFormat":1},{"label":"h_mod","kind":6,"detail":"h_mod","insertText":"h_mod","insertTextFormat":1},{"label":"crt_itfc_add","kind":6,"detail":"crt_itfc_add","insertText":"crt_itfc_add","insertTextFormat":1},{"label":"o_create_interface","kind":6,"detail":"o_create_interface","insertText":"o_create_interface","insertTextFormat":1},{"label":"itfc_add","kind":6,"detail":"itfc_add","insertText":"itfc_add","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, unsafe:$2}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"force_attack","kind":6,"detail":"mut force_attack Value","insertText":"force_attack","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"weapon","kind":6,"detail":"weapon &Weapon_t","insertText":"weapon","insertTextFormat":1},{"label":"prob_weapon","kind":6,"detail":"prob_weapon voidptr","insertText":"prob_weapon","insertTextFormat":1},{"label":"- %p\", for_ent.active_weapon()","kind":6,"detail":"- %p\", for_ent.active_weapon() voidptr","insertText":"- %p\", for_ent.active_weapon()","insertTextFormat":1},{"label":"&T {\n\th_mod","kind":6,"detail":"&T {\n\th_mod","insertText":"&T {\n\th_mod","insertTextFormat":1},{"label":"crt_itfc_add","kind":6,"detail":"crt_itfc_add","insertText":"crt_itfc_add","insertTextFormat":1},{"label":"o_create_interface","kind":6,"detail":"o_create_interface","insertText":"o_create_interface","insertTextFormat":1},{"label":"itfc_add","kind":6,"detail":"itfc_add","insertText":"itfc_add","insertTextFormat":1},{"label":"ptn_res","kind":6,"detail":"ptn_res voidptr","insertText":"ptn_res","insertTextFormat":1},{"label":"if_add","kind":6,"detail":"if_add","insertText":"if_add","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664331986}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331986}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331987}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331987}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":237,"method":"textDocument/completion","params":{"position":{"line":32,"character":4},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664331987}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":237,"result":[{"label":"radian","kind":6,"detail":"pub const radian f32","insertText":"radian","insertTextFormat":1},{"label":"Vec3","kind":22,"detail":"pub struct Vec3","insertText":"Vec3","insertTextFormat":1},{"label":"distance_from","kind":3,"detail":"pub fn distance_from(from_ent Vec3, to_ent Vec3) f32","insertText":"distance_from","insertTextFormat":1},{"label":"sin_cos","kind":3,"detail":"pub fn sin_cos(with_radion f32) (f32, f32)","insertText":"sin_cos","insertTextFormat":1},{"label":"Angle","kind":22,"detail":"pub struct Angle","insertText":"Angle","insertTextFormat":1},{"label":"angle_to_vectors","kind":3,"detail":"pub fn angle_to_vectors(with_angle Angle) (Vec3, Vec3, Vec3)","insertText":"angle_to_vectors","insertTextFormat":1},{"label":"get_val_offset","kind":3,"detail":"pub fn get_val_offset(in_this_obj voidptr, at_offset usize) &T","insertText":"get_val_offset","insertTextFormat":1},{"label":"pattern_scan","kind":3,"detail":"pub fn pattern_scan(in_module string, with_sig string) ?voidptr","insertText":"pattern_scan","insertTextFormat":1},{"label":"wait_for_module","kind":3,"detail":"pub fn wait_for_module(mut with_modules []string, and_max_timeout int)","insertText":"wait_for_module","insertTextFormat":1},{"label":"Matrix","kind":22,"detail":"pub struct Matrix","insertText":"Matrix","insertTextFormat":1},{"label":"Vec2","kind":22,"detail":"pub struct Vec2","insertText":"Vec2","insertTextFormat":1},{"label":"op_vec","kind":3,"detail":"pub fn op_vec(with_op_val f32) Vec3","insertText":"op_vec","insertTextFormat":1},{"label":"new_angle","kind":3,"detail":"pub fn new_angle(x T, y T, z T) Angle","insertText":"new_angle","insertTextFormat":1},{"label":"new_vec3","kind":3,"detail":"pub fn new_vec3(x T, y T, z T) Vec3","insertText":"new_vec3","insertTextFormat":1},{"label":"new_vec2","kind":3,"detail":"pub fn new_vec2(x T, y T) Vec2","insertText":"new_vec2","insertTextFormat":1},{"label":"HResult","kind":22,"detail":"pub struct HResult","insertText":"HResult","insertTextFormat":1},{"label":"h_res","kind":3,"detail":"pub fn h_res(with_hres int) HResult","insertText":"h_res","insertTextFormat":1},{"label":"str_align","kind":3,"detail":"pub fn str_align(with_og_text string, with_spaces_count i32, and_final_sep string) string","insertText":"str_align","insertTextFormat":1},{"label":"load_unload_console","kind":3,"detail":"pub fn load_unload_console(with_switch bool, and_file &C.FILE)","insertText":"load_unload_console","insertTextFormat":1},{"label":"Color","kind":22,"detail":"pub struct Color","insertText":"Color","insertTextFormat":1},{"label":"pront","kind":3,"detail":"pub fn pront(with_text string)","insertText":"pront","insertTextFormat":1},{"label":"ColorRgbF","kind":22,"detail":"pub struct ColorRgbF","insertText":"ColorRgbF","insertTextFormat":1},{"label":"ColorRgbaF","kind":22,"detail":"pub struct ColorRgbaF","insertText":"ColorRgbaF","insertTextFormat":1},{"label":"color_rbga","kind":3,"detail":"pub fn color_rbga(r_ T, g_ T, b_ T, a_ T) Color","insertText":"color_rbga","insertTextFormat":1},{"label":"color_f_rbga","kind":3,"detail":"pub fn color_f_rbga(r_ T, g_ T, b_ T, a_ T) Color","insertText":"color_f_rbga","insertTextFormat":1},{"label":"color_hex","kind":3,"detail":"pub fn color_hex(withHex u32) Color","insertText":"color_hex","insertTextFormat":1},{"label":"error_critical","kind":3,"detail":"pub fn error_critical(with_error string, and_error_complement string)","insertText":"error_critical","insertTextFormat":1},{"label":"client_error","kind":3,"detail":"pub fn client_error(with_error string)","insertText":"client_error","insertTextFormat":1}]},"timestamp":1664331987}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331987}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331987}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331987}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331989}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331989}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331989}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":238,"method":"textDocument/completion","params":{"position":{"line":32,"character":10},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v"},"context":{"triggerKind":2,"triggerCharacter":"("}}},"timestamp":1664331989}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":238,"result":[{"label":"h_mod","kind":6,"detail":"h_mod","insertText":"h_mod","insertTextFormat":1},{"label":"crt_itfc_add","kind":6,"detail":"crt_itfc_add","insertText":"crt_itfc_add","insertTextFormat":1},{"label":"o_create_interface","kind":6,"detail":"o_create_interface","insertText":"o_create_interface","insertTextFormat":1},{"label":"itfc_add","kind":6,"detail":"itfc_add","insertText":"itfc_add","insertTextFormat":1},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, unsafe:$2}","insertTextFormat":2},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"prob_weapon","kind":6,"detail":"prob_weapon voidptr","insertText":"prob_weapon","insertTextFormat":1},{"label":"- %p\", for_ent.active_weapon()","kind":6,"detail":"- %p\", for_ent.active_weapon() voidptr","insertText":"- %p\", for_ent.active_weapon()","insertTextFormat":1},{"label":"&T {\n\th_mod","kind":6,"detail":"&T {\n\th_mod","insertText":"&T {\n\th_mod","insertTextFormat":1},{"label":"crt_itfc_add","kind":6,"detail":"crt_itfc_add","insertText":"crt_itfc_add","insertTextFormat":1},{"label":"o_create_interface","kind":6,"detail":"o_create_interface","insertText":"o_create_interface","insertTextFormat":1},{"label":"itfc_add","kind":6,"detail":"itfc_add","insertText":"itfc_add","insertTextFormat":1},{"label":"ptn_res","kind":6,"detail":"ptn_res voidptr","insertText":"ptn_res","insertTextFormat":1},{"label":"if_add","kind":6,"detail":"if_add","insertText":"if_add","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1}]},"timestamp":1664331989}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331989}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331990}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331990}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331991}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331991}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":239,"method":"textDocument/completion","params":{"position":{"line":37,"character":42},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664331997}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":239,"result":[]},"timestamp":1664331997}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331997}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":240,"method":"textDocument/completion","params":{"position":{"line":37,"character":38},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664331997}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":240,"result":[]},"timestamp":1664331997}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331997}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":241,"method":"textDocument/completion","params":{"position":{"line":37,"character":36},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664331997}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":241,"result":[]},"timestamp":1664331997}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331997}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":242,"method":"textDocument/completion","params":{"position":{"line":37,"character":29},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v"},"context":{"triggerKind":2,"triggerCharacter":"="}}},"timestamp":1664331998}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":242,"result":[]},"timestamp":1664331998}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331998}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":243,"method":"textDocument/completion","params":{"position":{"line":37,"character":28},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664331998}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":243,"result":[]},"timestamp":1664331998}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331998}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":244,"method":"textDocument/completion","params":{"position":{"line":37,"character":26},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v"},"context":{"triggerKind":1}}},"timestamp":1664331998}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":244,"result":[{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"i","kind":6,"detail":"mut i Interfaces","insertText":"i","insertTextFormat":1},{"label":"withName","kind":6,"detail":"withName string","insertText":"withName","insertTextFormat":1},{"label":"inModule","kind":6,"detail":"inModule string","insertText":"inModule","insertTextFormat":1},{"label":"h_mod","kind":6,"detail":"h_mod","insertText":"h_mod","insertTextFormat":1},{"label":"crt_itfc_add","kind":6,"detail":"crt_itfc_add","insertText":"crt_itfc_add","insertTextFormat":1},{"label":"o_create_interface","kind":6,"detail":"o_create_interface","insertText":"o_create_interface","insertTextFormat":1},{"label":"itfc_add","kind":6,"detail":"itfc_add","insertText":"itfc_add","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, unsafe:$2}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"force_attack","kind":6,"detail":"mut force_attack Value","insertText":"force_attack","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"weapon","kind":6,"detail":"weapon &Weapon_t","insertText":"weapon","insertTextFormat":1},{"label":"prob_weapon","kind":6,"detail":"prob_weapon voidptr","insertText":"prob_weapon","insertTextFormat":1},{"label":"- %p\", for_ent.active_weapon()","kind":6,"detail":"- %p\", for_ent.active_weapon() voidptr","insertText":"- %p\", for_ent.active_weapon()","insertTextFormat":1},{"label":"&T {\n\th_mod","kind":6,"detail":"&T {\n\th_mod","insertText":"&T {\n\th_mod","insertTextFormat":1},{"label":"crt_itfc_add","kind":6,"detail":"crt_itfc_add","insertText":"crt_itfc_add","insertTextFormat":1},{"label":"o_create_interface","kind":6,"detail":"o_create_interface","insertText":"o_create_interface","insertTextFormat":1},{"label":"itfc_add","kind":6,"detail":"itfc_add","insertText":"itfc_add","insertTextFormat":1},{"label":"ptn_res","kind":6,"detail":"ptn_res voidptr","insertText":"ptn_res","insertTextFormat":1},{"label":"if_add","kind":6,"detail":"if_add","insertText":"if_add","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664331998}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331998}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":245,"method":"textDocument/completion","params":{"position":{"line":37,"character":8},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v"},"context":{"triggerKind":2,"triggerCharacter":"("}}},"timestamp":1664331998}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":245,"result":[{"label":"radian","kind":6,"detail":"pub const radian f32","insertText":"radian","insertTextFormat":1},{"label":"Vec3","kind":22,"detail":"pub struct Vec3","insertText":"Vec3","insertTextFormat":1},{"label":"distance_from","kind":3,"detail":"pub fn distance_from(from_ent Vec3, to_ent Vec3) f32","insertText":"distance_from","insertTextFormat":1},{"label":"sin_cos","kind":3,"detail":"pub fn sin_cos(with_radion f32) (f32, f32)","insertText":"sin_cos","insertTextFormat":1},{"label":"Angle","kind":22,"detail":"pub struct Angle","insertText":"Angle","insertTextFormat":1},{"label":"angle_to_vectors","kind":3,"detail":"pub fn angle_to_vectors(with_angle Angle) (Vec3, Vec3, Vec3)","insertText":"angle_to_vectors","insertTextFormat":1},{"label":"get_val_offset","kind":3,"detail":"pub fn get_val_offset(in_this_obj voidptr, at_offset usize) &T","insertText":"get_val_offset","insertTextFormat":1},{"label":"pattern_scan","kind":3,"detail":"pub fn pattern_scan(in_module string, with_sig string) ?voidptr","insertText":"pattern_scan","insertTextFormat":1},{"label":"wait_for_module","kind":3,"detail":"pub fn wait_for_module(mut with_modules []string, and_max_timeout int)","insertText":"wait_for_module","insertTextFormat":1},{"label":"Matrix","kind":22,"detail":"pub struct Matrix","insertText":"Matrix","insertTextFormat":1},{"label":"Vec2","kind":22,"detail":"pub struct Vec2","insertText":"Vec2","insertTextFormat":1},{"label":"op_vec","kind":3,"detail":"pub fn op_vec(with_op_val f32) Vec3","insertText":"op_vec","insertTextFormat":1},{"label":"new_angle","kind":3,"detail":"pub fn new_angle(x T, y T, z T) Angle","insertText":"new_angle","insertTextFormat":1},{"label":"new_vec3","kind":3,"detail":"pub fn new_vec3(x T, y T, z T) Vec3","insertText":"new_vec3","insertTextFormat":1},{"label":"new_vec2","kind":3,"detail":"pub fn new_vec2(x T, y T) Vec2","insertText":"new_vec2","insertTextFormat":1},{"label":"HResult","kind":22,"detail":"pub struct HResult","insertText":"HResult","insertTextFormat":1},{"label":"h_res","kind":3,"detail":"pub fn h_res(with_hres int) HResult","insertText":"h_res","insertTextFormat":1},{"label":"str_align","kind":3,"detail":"pub fn str_align(with_og_text string, with_spaces_count i32, and_final_sep string) string","insertText":"str_align","insertTextFormat":1},{"label":"load_unload_console","kind":3,"detail":"pub fn load_unload_console(with_switch bool, and_file &C.FILE)","insertText":"load_unload_console","insertTextFormat":1},{"label":"Color","kind":22,"detail":"pub struct Color","insertText":"Color","insertTextFormat":1},{"label":"pront","kind":3,"detail":"pub fn pront(with_text string)","insertText":"pront","insertTextFormat":1},{"label":"ColorRgbF","kind":22,"detail":"pub struct ColorRgbF","insertText":"ColorRgbF","insertTextFormat":1},{"label":"ColorRgbaF","kind":22,"detail":"pub struct ColorRgbaF","insertText":"ColorRgbaF","insertTextFormat":1},{"label":"color_rbga","kind":3,"detail":"pub fn color_rbga(r_ T, g_ T, b_ T, a_ T) Color","insertText":"color_rbga","insertTextFormat":1},{"label":"color_f_rbga","kind":3,"detail":"pub fn color_f_rbga(r_ T, g_ T, b_ T, a_ T) Color","insertText":"color_f_rbga","insertTextFormat":1},{"label":"color_hex","kind":3,"detail":"pub fn color_hex(withHex u32) Color","insertText":"color_hex","insertTextFormat":1},{"label":"error_critical","kind":3,"detail":"pub fn error_critical(with_error string, and_error_complement string)","insertText":"error_critical","insertTextFormat":1},{"label":"client_error","kind":3,"detail":"pub fn client_error(with_error string)","insertText":"client_error","insertTextFormat":1}]},"timestamp":1664331998}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331998}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":246,"method":"textDocument/completion","params":{"position":{"line":37,"character":7},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v"},"context":{"triggerKind":1}}},"timestamp":1664331998}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":246,"result":[{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"i","kind":6,"detail":"mut i Interfaces","insertText":"i","insertTextFormat":1},{"label":"withName","kind":6,"detail":"withName string","insertText":"withName","insertTextFormat":1},{"label":"inModule","kind":6,"detail":"inModule string","insertText":"inModule","insertTextFormat":1},{"label":"h_mod","kind":6,"detail":"h_mod","insertText":"h_mod","insertTextFormat":1},{"label":"crt_itfc_add","kind":6,"detail":"crt_itfc_add","insertText":"crt_itfc_add","insertTextFormat":1},{"label":"o_create_interface","kind":6,"detail":"o_create_interface","insertText":"o_create_interface","insertTextFormat":1},{"label":"itfc_add","kind":6,"detail":"itfc_add","insertText":"itfc_add","insertTextFormat":1},{"label":"get_sound_for_kill","kind":3,"detail":"fn get_sound_for_kill(kills int) string","insertText":"get_sound_for_kill($0)","insertTextFormat":2},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"i_can_see_with_offset","kind":3,"detail":"pub fn i_can_see_with_offset(player &Player, bone usize, offset f32) bool","insertText":"i_can_see_with_offset($0, $1, $2)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"calculate_text","kind":3,"detail":"pub fn calculate_text(with_font int, with_text_len int, and_max_width f32) (u16, f32)","insertText":"calculate_text($0, $1, $2)","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"can_shoot","kind":3,"detail":"pub fn can_shoot() bool","insertText":"can_shoot()","insertTextFormat":1},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, unsafe:$2}","insertTextFormat":2},{"label":"menu_height","kind":6,"detail":"const menu_height f32","insertText":"menu_height","insertTextFormat":1},{"label":"menu_width","kind":6,"detail":"const menu_width f32","insertText":"menu_width","insertTextFormat":1},{"label":"item_height","kind":6,"detail":"const item_height int","insertText":"item_height","insertTextFormat":1},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_wnd_proc","kind":3,"detail":"fn hk_wnd_proc(with_hwnd C.HWND, with_msg u32, with_wparam u32, and_lparam int) bool","insertText":"hk_wnd_proc($0, $1, $2, $3)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"force_attack","kind":6,"detail":"mut force_attack Value","insertText":"force_attack","insertTextFormat":1},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"weapon","kind":6,"detail":"weapon &Weapon_t","insertText":"weapon","insertTextFormat":1},{"label":"prob_weapon","kind":6,"detail":"prob_weapon voidptr","insertText":"prob_weapon","insertTextFormat":1},{"label":"- %p\", for_ent.active_weapon()","kind":6,"detail":"- %p\", for_ent.active_weapon() voidptr","insertText":"- %p\", for_ent.active_weapon()","insertTextFormat":1},{"label":"&T {\n\th_mod","kind":6,"detail":"&T {\n\th_mod","insertText":"&T {\n\th_mod","insertTextFormat":1},{"label":"crt_itfc_add","kind":6,"detail":"crt_itfc_add","insertText":"crt_itfc_add","insertTextFormat":1},{"label":"o_create_interface","kind":6,"detail":"o_create_interface","insertText":"o_create_interface","insertTextFormat":1},{"label":"itfc_add","kind":6,"detail":"itfc_add","insertText":"itfc_add","insertTextFormat":1},{"label":"ptn_res","kind":6,"detail":"ptn_res voidptr","insertText":"ptn_res","insertTextFormat":1},{"label":"if_add","kind":6,"detail":"if_add","insertText":"if_add","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_getchar","kind":3,"detail":"pub fn utf8_getchar() int","insertText":"utf8_getchar","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1664331998}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331998}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331999}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331999}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":247,"method":"textDocument/completion","params":{"position":{"line":37,"character":4},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v"},"context":{"triggerKind":2,"triggerCharacter":" "}}},"timestamp":1664331999}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":247,"result":[{"label":"radian","kind":6,"detail":"pub const radian f32","insertText":"radian","insertTextFormat":1},{"label":"Vec3","kind":22,"detail":"pub struct Vec3","insertText":"Vec3","insertTextFormat":1},{"label":"distance_from","kind":3,"detail":"pub fn distance_from(from_ent Vec3, to_ent Vec3) f32","insertText":"distance_from","insertTextFormat":1},{"label":"sin_cos","kind":3,"detail":"pub fn sin_cos(with_radion f32) (f32, f32)","insertText":"sin_cos","insertTextFormat":1},{"label":"Angle","kind":22,"detail":"pub struct Angle","insertText":"Angle","insertTextFormat":1},{"label":"angle_to_vectors","kind":3,"detail":"pub fn angle_to_vectors(with_angle Angle) (Vec3, Vec3, Vec3)","insertText":"angle_to_vectors","insertTextFormat":1},{"label":"get_val_offset","kind":3,"detail":"pub fn get_val_offset(in_this_obj voidptr, at_offset usize) &T","insertText":"get_val_offset","insertTextFormat":1},{"label":"pattern_scan","kind":3,"detail":"pub fn pattern_scan(in_module string, with_sig string) ?voidptr","insertText":"pattern_scan","insertTextFormat":1},{"label":"wait_for_module","kind":3,"detail":"pub fn wait_for_module(mut with_modules []string, and_max_timeout int)","insertText":"wait_for_module","insertTextFormat":1},{"label":"Matrix","kind":22,"detail":"pub struct Matrix","insertText":"Matrix","insertTextFormat":1},{"label":"Vec2","kind":22,"detail":"pub struct Vec2","insertText":"Vec2","insertTextFormat":1},{"label":"op_vec","kind":3,"detail":"pub fn op_vec(with_op_val f32) Vec3","insertText":"op_vec","insertTextFormat":1},{"label":"new_angle","kind":3,"detail":"pub fn new_angle(x T, y T, z T) Angle","insertText":"new_angle","insertTextFormat":1},{"label":"new_vec3","kind":3,"detail":"pub fn new_vec3(x T, y T, z T) Vec3","insertText":"new_vec3","insertTextFormat":1},{"label":"new_vec2","kind":3,"detail":"pub fn new_vec2(x T, y T) Vec2","insertText":"new_vec2","insertTextFormat":1},{"label":"HResult","kind":22,"detail":"pub struct HResult","insertText":"HResult","insertTextFormat":1},{"label":"h_res","kind":3,"detail":"pub fn h_res(with_hres int) HResult","insertText":"h_res","insertTextFormat":1},{"label":"str_align","kind":3,"detail":"pub fn str_align(with_og_text string, with_spaces_count i32, and_final_sep string) string","insertText":"str_align","insertTextFormat":1},{"label":"load_unload_console","kind":3,"detail":"pub fn load_unload_console(with_switch bool, and_file &C.FILE)","insertText":"load_unload_console","insertTextFormat":1},{"label":"Color","kind":22,"detail":"pub struct Color","insertText":"Color","insertTextFormat":1},{"label":"pront","kind":3,"detail":"pub fn pront(with_text string)","insertText":"pront","insertTextFormat":1},{"label":"ColorRgbF","kind":22,"detail":"pub struct ColorRgbF","insertText":"ColorRgbF","insertTextFormat":1},{"label":"ColorRgbaF","kind":22,"detail":"pub struct ColorRgbaF","insertText":"ColorRgbaF","insertTextFormat":1},{"label":"color_rbga","kind":3,"detail":"pub fn color_rbga(r_ T, g_ T, b_ T, a_ T) Color","insertText":"color_rbga","insertTextFormat":1},{"label":"color_f_rbga","kind":3,"detail":"pub fn color_f_rbga(r_ T, g_ T, b_ T, a_ T) Color","insertText":"color_f_rbga","insertTextFormat":1},{"label":"color_hex","kind":3,"detail":"pub fn color_hex(withHex u32) Color","insertText":"color_hex","insertTextFormat":1},{"label":"error_critical","kind":3,"detail":"pub fn error_critical(with_error string, and_error_complement string)","insertText":"error_critical","insertTextFormat":1},{"label":"client_error","kind":3,"detail":"pub fn client_error(with_error string)","insertText":"client_error","insertTextFormat":1}]},"timestamp":1664331999}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664331999}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664332000}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664332000}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664332000}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664332000}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664332000}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664332001}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664332001}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664332001}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664332001}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664332002}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664332002}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":248,"method":"textDocument/completion","params":{"position":{"line":37,"character":10},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v"},"context":{"triggerKind":2,"triggerCharacter":"("}}},"timestamp":1664332002}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":248,"result":[{"label":"h_mod","kind":6,"detail":"h_mod","insertText":"h_mod","insertTextFormat":1},{"label":"crt_itfc_add","kind":6,"detail":"crt_itfc_add","insertText":"crt_itfc_add","insertTextFormat":1},{"label":"o_create_interface","kind":6,"detail":"o_create_interface","insertText":"o_create_interface","insertTextFormat":1},{"label":"itfc_add","kind":6,"detail":"itfc_add","insertText":"itfc_add","insertTextFormat":1},{"label":"KillSound","kind":22,"detail":"struct KillSound","insertText":"KillSound{old_kill:$1, old_kill_hs:$2, kill_streak:$3}","insertTextFormat":2},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"Chams","kind":22,"detail":"struct Chams","insertText":"Chams{current_material_name:$1, current_material:$2}","insertTextFormat":2},{"label":"Bone","kind":22,"detail":"struct Bone","insertText":"Bone{pos:$1, id:$2}","insertTextFormat":2},{"label":"TargetedEntity","kind":22,"detail":"struct TargetedEntity","insertText":"TargetedEntity{ent:$1, bones_on_screen:$2, closest_bone:$3}","insertTextFormat":2},{"label":"Engine","kind":22,"detail":"struct Engine","insertText":"Engine{do_a_shoot:$1, do_force_bone:$2, do_force_awal:$3, targeted_entities:$4, fov:$5, is_spraying:$6}","insertTextFormat":2},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, unsafe:$2}","insertTextFormat":2},{"label":"NMenu","kind":22,"detail":"struct NMenu","insertText":"NMenu{nk_ctx:$1, is_opened:$2, tabs:$3, current_tab:$4, tmp_check:$5, killsounds:$6, configs:$7, engine_keys:$8, engine_bones:$9, chams_materials:$10, weapons_names:$11, knifes:$12, item_quality:$13, tmp_rename_buff:$14, tmp_rename_len:$15}","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins_changer:$16, skins:$17, glow:$18, glow_color_if_visible:$19, glow_color_if_not_visible:$20, box:$21, box_color_if_visible:$22, box_color_if_not_visible:$23, names:$24, hp:$25, names_color_if_visible:$26, names_color_if_not_visible:$27, weapon_name:$28, weapon_clip:$29, weapon_name_color_if_visible:$30, weapon_name_color_if_not_visible:$31, snapline:$32, snapline_color_if_visible:$33, snapline_color_if_not_visible:$34, radar:$35, watermark:$36, watermark_color:$37, indicator:$38, indicator_color_if_on:$39, indicator_color_if_off:$40, fov_circle:$41, fov_circle_color:$42, chams:$43, chams_is_visible_only:$44, chams_material:$45, chams_color_if_visible:$46, chams_color_if_not_visible:$47, engine:$48, fov:$49, engine_adjust_fov_scope:$50, engine_bones_list:$51, engine_force_bone_id:$52, engine_pref_bone_id:$53, engine_automatic_fire_key:$54, engine_force_bone_key:$55, engine_force_awall_key:$56, engine_automatic_fire_key_toggle:$57, engine_force_awall_key_toggle:$58, engine_force_bone_key_toggle:$59, engine_vhv_mode:$60, engine_vhv_aw_factor:$61}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"no_flash","kind":3,"detail":"pub fn no_flash()","insertText":"no_flash()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_lock_cursor","kind":3,"detail":"fn hk_lock_cursor(ecx voidptr, edx voidptr)","insertText":"hk_lock_cursor($0, $1)","insertTextFormat":2},{"label":"hk_draw_model","kind":3,"detail":"fn hk_draw_model(ecx voidptr, edx voidptr, result voidptr, info &CDrawModelInfo, bones voidptr, flex_weights &f32, flex_deleyed_weight &f32, model_origin &Vec3, flags int)","insertText":"hk_draw_model($0, $1, $2, $3, $4, $5, $6, $7, $8)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, engine:$14, visuals:$15, menu:$16, chams:$17, kill_sound:$18, skins:$19, is_ok:$20}","insertTextFormat":2},{"label":"closest_target","kind":6,"detail":"mut closest_target voidptr","insertText":"closest_target","insertTextFormat":1},{"label":"prob_weapon","kind":6,"detail":"prob_weapon voidptr","insertText":"prob_weapon","insertTextFormat":1},{"label":"- %p\", for_ent.active_weapon()","kind":6,"detail":"- %p\", for_ent.active_weapon() voidptr","insertText":"- %p\", for_ent.active_weapon()","insertTextFormat":1},{"label":"&T {\n\th_mod","kind":6,"detail":"&T {\n\th_mod","insertText":"&T {\n\th_mod","insertTextFormat":1},{"label":"crt_itfc_add","kind":6,"detail":"crt_itfc_add","insertText":"crt_itfc_add","insertTextFormat":1},{"label":"o_create_interface","kind":6,"detail":"o_create_interface","insertText":"o_create_interface","insertTextFormat":1},{"label":"itfc_add","kind":6,"detail":"itfc_add","insertText":"itfc_add","insertTextFormat":1},{"label":"ptn_res","kind":6,"detail":"ptn_res voidptr","insertText":"ptn_res","insertTextFormat":1},{"label":"if_add","kind":6,"detail":"if_add","insertText":"if_add","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1}]},"timestamp":1664332002}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664332002}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664332005}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664332005}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664332006}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1664332006}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":null,"result":null},"timestamp":1664335007}
