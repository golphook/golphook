{"kind":"send-response","message":{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"VLS Version: 0.0.1.d914108, OS: macos 64"}},"timestamp":1667338215}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"VLS executable path: /Users/fleur/.local/share/nvim/lsp_servers/vls/vls"}},"timestamp":1667338215}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"VLS build with V 4b3c3d9"}},"timestamp":1667338215}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Client / Editor: Neovim 0.7.2 (PID: 70687)"}},"timestamp":1667338215}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"window/logMessage","params":{"type":3,"message":"Using V path (VROOT): /Users/fleur/Documents/prod/ressources/v"}},"timestamp":1667338215}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":1,"result":{"capabilities":{"textDocumentSync":2,"hoverProvider":true,"completionProvider":{"resolveProvider":false,"triggerCharacters":["=",".",":","{",",","("," "]},"signatureHelpProvider":{"triggerCharacters":["("],"retriggerCharacters":[","," "]},"definitionProvider":true,"typeDefinitionProvider":false,"implementationProvider":true,"referencesProvider":false,"documentHightlightProvider":false,"documentSymbolProvider":true,"workspaceSymbolProvider":true,"codeActionProvider":false,"codeLensProvider":{"resolveProvider":false},"documentFormattingProvider":true,"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"","moreTriggerCharacter":[]},"renameProvider":false,"documentLinkProvider":false,"colorProvider":false,"declarationProvider":false,"executeCommandProvider":"","foldingRangeProvider":true,"experimental":{}}}},"timestamp":1667338215}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/skins.v","diagnostics":[]}},"timestamp":1667338215}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_cacher.v","diagnostics":[]}},"timestamp":1667338215}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/entity_fns.v","diagnostics":[]}},"timestamp":1667338216}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/visuals.v","diagnostics":[]}},"timestamp":1667338216}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/interfaces.v","diagnostics":[]}},"timestamp":1667338216}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/config.v","diagnostics":[]}},"timestamp":1667338216}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/others.v","diagnostics":[]}},"timestamp":1667338216}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/drawable.v","diagnostics":[]}},"timestamp":1667338216}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338216}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/render_queue.v","diagnostics":[]}},"timestamp":1667338216}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/win_defs.v","diagnostics":[]}},"timestamp":1667338216}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1667338216}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338216}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":2,"method":"textDocument/completion","params":{"position":{"line":23,"character":69},"context":{"triggerKind":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v"}}},"timestamp":1667338233}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":2,"result":[{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"trace_from_to_pos","kind":3,"detail":"pub fn trace_from_to_pos(from_pos Vec3, to_pos Vec3) CGameTrace","insertText":"trace_from_to_pos($0, $1)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"EngineWeaponConfigEntry","kind":22,"detail":"struct EngineWeaponConfigEntry","insertText":"EngineWeaponConfigEntry{def_idx:$1, engine_bones_list:$2, engine_force_bone_id:$3, engine_pref_bone_id:$4, engine_vhv_mode:$5, engine_vhv_aw_factor:$6, engine_vhv_egs_factor:$7}","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins:$16, glow:$17, glow_color_if_visible:$18, glow_color_if_not_visible:$19, box:$20, box_color_if_visible:$21, box_color_if_not_visible:$22, names:$23, hp:$24, names_color_if_visible:$25, names_color_if_not_visible:$26, weapon_name:$27, weapon_clip:$28, weapon_name_color_if_visible:$29, weapon_name_color_if_not_visible:$30, snapline:$31, snapline_color_if_visible:$32, snapline_color_if_not_visible:$33, crosshair:$34, crosshair_color:$35, radar:$36, watermark:$37, watermark_color:$38, indicator:$39, indicator_color_if_on:$40, indicator_color_if_off:$41, fov_circle:$42, fov_circle_color:$43, chams:$44, chams_is_visible_only:$45, chams_material:$46, chams_color_if_visible:$47, chams_color_if_not_visible:$48, engine:$49, fov:$50, engine_adjust_fov_scope:$51, engine_bones_list:$52, engine_force_bone_id:$53, engine_pref_bone_id:$54, engine_automatic_fire_key:$55, engine_force_bone_key:$56, engine_force_awall_key:$57, engine_automatic_fire_key_toggle:$58, engine_force_awall_key_toggle:$59, engine_force_bone_key_toggle:$60, engine_vhv_mode:$61, engine_vhv_aw_factor:$62, engine_vhv_egs_factor:$63, chockers:$64, chockers_limit:$65}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8, ret_add_check:$9}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_ret_add_check","kind":3,"detail":"fn hk_ret_add_check(ecx voidptr, edx voidptr, mod_name &u8) bool","insertText":"hk_ret_add_check($0, $1, $2)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, skins:$14, visuals:$15, is_ok:$16}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1667338233}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338233}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338234}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338341}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338341}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338342}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":3,"method":"textDocument/completion","params":{"position":{"line":101,"character":11},"context":{"triggerKind":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v"}}},"timestamp":1667338348}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":3,"result":[{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"err","kind":6,"detail":"err IError","insertText":"err","insertTextFormat":1},{"label":"h","kind":6,"detail":"mut h Hooks","insertText":"h","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx","insertText":"app_ctx","insertTextFormat":1},{"label":"retadd_check_add_client","kind":6,"detail":"retadd_check_add_client voidptr","insertText":"retadd_check_add_client","insertTextFormat":1},{"label":"retadd_check_add_studio","kind":6,"detail":"retadd_check_add_studio voidptr","insertText":"retadd_check_add_studio","insertTextFormat":1},{"label":"retadd_check_add_mat","kind":6,"detail":"retadd_check_add_mat voidptr","insertText":"retadd_check_add_mat","insertTextFormat":1},{"label":"retadd_check_add_engine","kind":6,"detail":"retadd_check_add_engine voidptr","insertText":"retadd_check_add_engine","insertTextFormat":1},{"label":"set_viewmodel_offets_add","kind":6,"detail":"set_viewmodel_offets_add voidptr","insertText":"set_viewmodel_offets_add","insertTextFormat":1},{"label":"get_viewmodel_fov_add","kind":6,"detail":"get_viewmodel_fov_add voidptr","insertText":"get_viewmodel_fov_add","insertTextFormat":1},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"trace_from_to_pos","kind":3,"detail":"pub fn trace_from_to_pos(from_pos Vec3, to_pos Vec3) CGameTrace","insertText":"trace_from_to_pos($0, $1)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"EngineWeaponConfigEntry","kind":22,"detail":"struct EngineWeaponConfigEntry","insertText":"EngineWeaponConfigEntry{def_idx:$1, engine_bones_list:$2, engine_force_bone_id:$3, engine_pref_bone_id:$4, engine_vhv_mode:$5, engine_vhv_aw_factor:$6, engine_vhv_egs_factor:$7}","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins:$16, glow:$17, glow_color_if_visible:$18, glow_color_if_not_visible:$19, box:$20, box_color_if_visible:$21, box_color_if_not_visible:$22, names:$23, hp:$24, names_color_if_visible:$25, names_color_if_not_visible:$26, weapon_name:$27, weapon_clip:$28, weapon_name_color_if_visible:$29, weapon_name_color_if_not_visible:$30, snapline:$31, snapline_color_if_visible:$32, snapline_color_if_not_visible:$33, crosshair:$34, crosshair_color:$35, radar:$36, watermark:$37, watermark_color:$38, indicator:$39, indicator_color_if_on:$40, indicator_color_if_off:$41, fov_circle:$42, fov_circle_color:$43, chams:$44, chams_is_visible_only:$45, chams_material:$46, chams_color_if_visible:$47, chams_color_if_not_visible:$48, engine:$49, fov:$50, engine_adjust_fov_scope:$51, engine_bones_list:$52, engine_force_bone_id:$53, engine_pref_bone_id:$54, engine_automatic_fire_key:$55, engine_force_bone_key:$56, engine_force_awall_key:$57, engine_automatic_fire_key_toggle:$58, engine_force_awall_key_toggle:$59, engine_force_bone_key_toggle:$60, engine_vhv_mode:$61, engine_vhv_aw_factor:$62, engine_vhv_egs_factor:$63, chockers:$64, chockers_limit:$65}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8, ret_add_check:$9}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_ret_add_check","kind":3,"detail":"fn hk_ret_add_check(ecx voidptr, edx voidptr, mod_name &u8) bool","insertText":"hk_ret_add_check($0, $1, $2)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, skins:$14, visuals:$15, is_ok:$16}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1667338348}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338348}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338349}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338349}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338349}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338349}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338349}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338349}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338349}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":4,"method":"textDocument/completion","params":{"position":{"line":101,"character":3},"context":{"triggerCharacter":".","triggerKind":2},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v"}}},"timestamp":1667338350}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":4,"result":[]},"timestamp":1667338350}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338350}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":5,"method":"textDocument/completion","params":{"position":{"line":101,"character":4},"context":{"triggerKind":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v"}}},"timestamp":1667338350}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":5,"result":[{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"err","kind":6,"detail":"err IError","insertText":"err","insertTextFormat":1},{"label":"h","kind":6,"detail":"mut h Hooks","insertText":"h","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx","insertText":"app_ctx","insertTextFormat":1},{"label":"retadd_check_add_client","kind":6,"detail":"retadd_check_add_client voidptr","insertText":"retadd_check_add_client","insertTextFormat":1},{"label":"retadd_check_add_studio","kind":6,"detail":"retadd_check_add_studio voidptr","insertText":"retadd_check_add_studio","insertTextFormat":1},{"label":"retadd_check_add_mat","kind":6,"detail":"retadd_check_add_mat voidptr","insertText":"retadd_check_add_mat","insertTextFormat":1},{"label":"retadd_check_add_engine","kind":6,"detail":"retadd_check_add_engine voidptr","insertText":"retadd_check_add_engine","insertTextFormat":1},{"label":"set_viewmodel_offets_add","kind":6,"detail":"set_viewmodel_offets_add voidptr","insertText":"set_viewmodel_offets_add","insertTextFormat":1},{"label":"get_viewmodel_fov_add","kind":6,"detail":"get_viewmodel_fov_add voidptr","insertText":"get_viewmodel_fov_add","insertTextFormat":1},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"trace_from_to_pos","kind":3,"detail":"pub fn trace_from_to_pos(from_pos Vec3, to_pos Vec3) CGameTrace","insertText":"trace_from_to_pos($0, $1)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"EngineWeaponConfigEntry","kind":22,"detail":"struct EngineWeaponConfigEntry","insertText":"EngineWeaponConfigEntry{def_idx:$1, engine_bones_list:$2, engine_force_bone_id:$3, engine_pref_bone_id:$4, engine_vhv_mode:$5, engine_vhv_aw_factor:$6, engine_vhv_egs_factor:$7}","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins:$16, glow:$17, glow_color_if_visible:$18, glow_color_if_not_visible:$19, box:$20, box_color_if_visible:$21, box_color_if_not_visible:$22, names:$23, hp:$24, names_color_if_visible:$25, names_color_if_not_visible:$26, weapon_name:$27, weapon_clip:$28, weapon_name_color_if_visible:$29, weapon_name_color_if_not_visible:$30, snapline:$31, snapline_color_if_visible:$32, snapline_color_if_not_visible:$33, crosshair:$34, crosshair_color:$35, radar:$36, watermark:$37, watermark_color:$38, indicator:$39, indicator_color_if_on:$40, indicator_color_if_off:$41, fov_circle:$42, fov_circle_color:$43, chams:$44, chams_is_visible_only:$45, chams_material:$46, chams_color_if_visible:$47, chams_color_if_not_visible:$48, engine:$49, fov:$50, engine_adjust_fov_scope:$51, engine_bones_list:$52, engine_force_bone_id:$53, engine_pref_bone_id:$54, engine_automatic_fire_key:$55, engine_force_bone_key:$56, engine_force_awall_key:$57, engine_automatic_fire_key_toggle:$58, engine_force_awall_key_toggle:$59, engine_force_bone_key_toggle:$60, engine_vhv_mode:$61, engine_vhv_aw_factor:$62, engine_vhv_egs_factor:$63, chockers:$64, chockers_limit:$65}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8, ret_add_check:$9}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_ret_add_check","kind":3,"detail":"fn hk_ret_add_check(ecx voidptr, edx voidptr, mod_name &u8) bool","insertText":"hk_ret_add_check($0, $1, $2)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, skins:$14, visuals:$15, is_ok:$16}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1667338350}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338350}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338350}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338350}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338351}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338351}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338351}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338351}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338354}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338354}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":6,"method":"textDocument/completion","params":{"position":{"line":101,"character":37},"context":{"triggerKind":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v"}}},"timestamp":1667338354}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":6,"result":[{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"err","kind":6,"detail":"err IError","insertText":"err","insertTextFormat":1},{"label":"h","kind":6,"detail":"mut h Hooks","insertText":"h","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx","insertText":"app_ctx","insertTextFormat":1},{"label":"retadd_check_add_client","kind":6,"detail":"retadd_check_add_client voidptr","insertText":"retadd_check_add_client","insertTextFormat":1},{"label":"retadd_check_add_studio","kind":6,"detail":"retadd_check_add_studio voidptr","insertText":"retadd_check_add_studio","insertTextFormat":1},{"label":"retadd_check_add_mat","kind":6,"detail":"retadd_check_add_mat voidptr","insertText":"retadd_check_add_mat","insertTextFormat":1},{"label":"retadd_check_add_engine","kind":6,"detail":"retadd_check_add_engine voidptr","insertText":"retadd_check_add_engine","insertTextFormat":1},{"label":"set_viewmodel_offets_add","kind":6,"detail":"set_viewmodel_offets_add voidptr","insertText":"set_viewmodel_offets_add","insertTextFormat":1},{"label":"get_viewmodel_fov_add","kind":6,"detail":"get_viewmodel_fov_add voidptr","insertText":"get_viewmodel_fov_add","insertTextFormat":1},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"trace_from_to_pos","kind":3,"detail":"pub fn trace_from_to_pos(from_pos Vec3, to_pos Vec3) CGameTrace","insertText":"trace_from_to_pos($0, $1)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"EngineWeaponConfigEntry","kind":22,"detail":"struct EngineWeaponConfigEntry","insertText":"EngineWeaponConfigEntry{def_idx:$1, engine_bones_list:$2, engine_force_bone_id:$3, engine_pref_bone_id:$4, engine_vhv_mode:$5, engine_vhv_aw_factor:$6, engine_vhv_egs_factor:$7}","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins:$16, glow:$17, glow_color_if_visible:$18, glow_color_if_not_visible:$19, box:$20, box_color_if_visible:$21, box_color_if_not_visible:$22, names:$23, hp:$24, names_color_if_visible:$25, names_color_if_not_visible:$26, weapon_name:$27, weapon_clip:$28, weapon_name_color_if_visible:$29, weapon_name_color_if_not_visible:$30, snapline:$31, snapline_color_if_visible:$32, snapline_color_if_not_visible:$33, crosshair:$34, crosshair_color:$35, radar:$36, watermark:$37, watermark_color:$38, indicator:$39, indicator_color_if_on:$40, indicator_color_if_off:$41, fov_circle:$42, fov_circle_color:$43, chams:$44, chams_is_visible_only:$45, chams_material:$46, chams_color_if_visible:$47, chams_color_if_not_visible:$48, engine:$49, fov:$50, engine_adjust_fov_scope:$51, engine_bones_list:$52, engine_force_bone_id:$53, engine_pref_bone_id:$54, engine_automatic_fire_key:$55, engine_force_bone_key:$56, engine_force_awall_key:$57, engine_automatic_fire_key_toggle:$58, engine_force_awall_key_toggle:$59, engine_force_bone_key_toggle:$60, engine_vhv_mode:$61, engine_vhv_aw_factor:$62, engine_vhv_egs_factor:$63, chockers:$64, chockers_limit:$65}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8, ret_add_check:$9}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_ret_add_check","kind":3,"detail":"fn hk_ret_add_check(ecx voidptr, edx voidptr, mod_name &u8) bool","insertText":"hk_ret_add_check($0, $1, $2)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, skins:$14, visuals:$15, is_ok:$16}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1667338354}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338354}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338354}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338355}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338355}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338355}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338355}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338355}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338356}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338356}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":7,"method":"textDocument/completion","params":{"position":{"line":101,"character":14},"context":{"triggerKind":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v"}}},"timestamp":1667338362}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":7,"result":[{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"err","kind":6,"detail":"err IError","insertText":"err","insertTextFormat":1},{"label":"h","kind":6,"detail":"mut h Hooks","insertText":"h","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx","insertText":"app_ctx","insertTextFormat":1},{"label":"retadd_check_add_client","kind":6,"detail":"retadd_check_add_client voidptr","insertText":"retadd_check_add_client","insertTextFormat":1},{"label":"retadd_check_add_studio","kind":6,"detail":"retadd_check_add_studio voidptr","insertText":"retadd_check_add_studio","insertTextFormat":1},{"label":"retadd_check_add_mat","kind":6,"detail":"retadd_check_add_mat voidptr","insertText":"retadd_check_add_mat","insertTextFormat":1},{"label":"retadd_check_add_engine","kind":6,"detail":"retadd_check_add_engine voidptr","insertText":"retadd_check_add_engine","insertTextFormat":1},{"label":"set_viewmodel_offets_add","kind":6,"detail":"set_viewmodel_offets_add voidptr","insertText":"set_viewmodel_offets_add","insertTextFormat":1},{"label":"get_viewmodel_fov_add","kind":6,"detail":"get_viewmodel_fov_add voidptr","insertText":"get_viewmodel_fov_add","insertTextFormat":1},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"trace_from_to_pos","kind":3,"detail":"pub fn trace_from_to_pos(from_pos Vec3, to_pos Vec3) CGameTrace","insertText":"trace_from_to_pos($0, $1)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"EngineWeaponConfigEntry","kind":22,"detail":"struct EngineWeaponConfigEntry","insertText":"EngineWeaponConfigEntry{def_idx:$1, engine_bones_list:$2, engine_force_bone_id:$3, engine_pref_bone_id:$4, engine_vhv_mode:$5, engine_vhv_aw_factor:$6, engine_vhv_egs_factor:$7}","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins:$16, glow:$17, glow_color_if_visible:$18, glow_color_if_not_visible:$19, box:$20, box_color_if_visible:$21, box_color_if_not_visible:$22, names:$23, hp:$24, names_color_if_visible:$25, names_color_if_not_visible:$26, weapon_name:$27, weapon_clip:$28, weapon_name_color_if_visible:$29, weapon_name_color_if_not_visible:$30, snapline:$31, snapline_color_if_visible:$32, snapline_color_if_not_visible:$33, crosshair:$34, crosshair_color:$35, radar:$36, watermark:$37, watermark_color:$38, indicator:$39, indicator_color_if_on:$40, indicator_color_if_off:$41, fov_circle:$42, fov_circle_color:$43, chams:$44, chams_is_visible_only:$45, chams_material:$46, chams_color_if_visible:$47, chams_color_if_not_visible:$48, engine:$49, fov:$50, engine_adjust_fov_scope:$51, engine_bones_list:$52, engine_force_bone_id:$53, engine_pref_bone_id:$54, engine_automatic_fire_key:$55, engine_force_bone_key:$56, engine_force_awall_key:$57, engine_automatic_fire_key_toggle:$58, engine_force_awall_key_toggle:$59, engine_force_bone_key_toggle:$60, engine_vhv_mode:$61, engine_vhv_aw_factor:$62, engine_vhv_egs_factor:$63, chockers:$64, chockers_limit:$65}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8, ret_add_check:$9}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_ret_add_check","kind":3,"detail":"fn hk_ret_add_check(ecx voidptr, edx voidptr, mod_name &u8) bool","insertText":"hk_ret_add_check($0, $1, $2)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, skins:$14, visuals:$15, is_ok:$16}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1667338362}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338362}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338364}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338365}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338371}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338371}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338371}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":8,"method":"textDocument/completion","params":{"position":{"line":111,"character":17},"context":{"triggerCharacter":"(","triggerKind":2},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v"}}},"timestamp":1667338410}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":8,"result":[]},"timestamp":1667338410}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338410}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":9,"method":"textDocument/completion","params":{"position":{"line":112,"character":88},"context":{"triggerKind":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v"}}},"timestamp":1667338420}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":9,"result":[{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"err","kind":6,"detail":"err IError","insertText":"err","insertTextFormat":1},{"label":"err","kind":6,"detail":"err IError","insertText":"err","insertTextFormat":1},{"label":"h","kind":6,"detail":"mut h Hooks","insertText":"h","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx","insertText":"app_ctx","insertTextFormat":1},{"label":"retadd_check_add_client","kind":6,"detail":"retadd_check_add_client voidptr","insertText":"retadd_check_add_client","insertTextFormat":1},{"label":"retadd_check_add_studio","kind":6,"detail":"retadd_check_add_studio voidptr","insertText":"retadd_check_add_studio","insertTextFormat":1},{"label":"retadd_check_add_mat","kind":6,"detail":"retadd_check_add_mat voidptr","insertText":"retadd_check_add_mat","insertTextFormat":1},{"label":"retadd_check_add_engine","kind":6,"detail":"retadd_check_add_engine voidptr","insertText":"retadd_check_add_engine","insertTextFormat":1},{"label":"set_viewmodel_offets_add","kind":6,"detail":"set_viewmodel_offets_add voidptr","insertText":"set_viewmodel_offets_add","insertTextFormat":1},{"label":"get_viewmodel_fov_add","kind":6,"detail":"get_viewmodel_fov_add voidptr","insertText":"get_viewmodel_fov_add","insertTextFormat":1},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"trace_from_to_pos","kind":3,"detail":"pub fn trace_from_to_pos(from_pos Vec3, to_pos Vec3) CGameTrace","insertText":"trace_from_to_pos($0, $1)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"EngineWeaponConfigEntry","kind":22,"detail":"struct EngineWeaponConfigEntry","insertText":"EngineWeaponConfigEntry{def_idx:$1, engine_bones_list:$2, engine_force_bone_id:$3, engine_pref_bone_id:$4, engine_vhv_mode:$5, engine_vhv_aw_factor:$6, engine_vhv_egs_factor:$7}","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins:$16, glow:$17, glow_color_if_visible:$18, glow_color_if_not_visible:$19, box:$20, box_color_if_visible:$21, box_color_if_not_visible:$22, names:$23, hp:$24, names_color_if_visible:$25, names_color_if_not_visible:$26, weapon_name:$27, weapon_clip:$28, weapon_name_color_if_visible:$29, weapon_name_color_if_not_visible:$30, snapline:$31, snapline_color_if_visible:$32, snapline_color_if_not_visible:$33, crosshair:$34, crosshair_color:$35, radar:$36, watermark:$37, watermark_color:$38, indicator:$39, indicator_color_if_on:$40, indicator_color_if_off:$41, fov_circle:$42, fov_circle_color:$43, chams:$44, chams_is_visible_only:$45, chams_material:$46, chams_color_if_visible:$47, chams_color_if_not_visible:$48, engine:$49, fov:$50, engine_adjust_fov_scope:$51, engine_bones_list:$52, engine_force_bone_id:$53, engine_pref_bone_id:$54, engine_automatic_fire_key:$55, engine_force_bone_key:$56, engine_force_awall_key:$57, engine_automatic_fire_key_toggle:$58, engine_force_awall_key_toggle:$59, engine_force_bone_key_toggle:$60, engine_vhv_mode:$61, engine_vhv_aw_factor:$62, engine_vhv_egs_factor:$63, chockers:$64, chockers_limit:$65}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8, ret_add_check:$9}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_ret_add_check","kind":3,"detail":"fn hk_ret_add_check(ecx voidptr, edx voidptr, mod_name &u8) bool","insertText":"hk_ret_add_check($0, $1, $2)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, skins:$14, visuals:$15, is_ok:$16}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1667338420}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338420}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":10,"method":"textDocument/completion","params":{"position":{"line":112,"character":86},"context":{"triggerCharacter":" ","triggerKind":2},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v"}}},"timestamp":1667338420}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":10,"result":[]},"timestamp":1667338420}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338420}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":11,"method":"textDocument/completion","params":{"position":{"line":112,"character":84},"context":{"triggerKind":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v"}}},"timestamp":1667338420}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":11,"result":[{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"err","kind":6,"detail":"err IError","insertText":"err","insertTextFormat":1},{"label":"err","kind":6,"detail":"err IError","insertText":"err","insertTextFormat":1},{"label":"h","kind":6,"detail":"mut h Hooks","insertText":"h","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx","insertText":"app_ctx","insertTextFormat":1},{"label":"retadd_check_add_client","kind":6,"detail":"retadd_check_add_client voidptr","insertText":"retadd_check_add_client","insertTextFormat":1},{"label":"retadd_check_add_studio","kind":6,"detail":"retadd_check_add_studio voidptr","insertText":"retadd_check_add_studio","insertTextFormat":1},{"label":"retadd_check_add_mat","kind":6,"detail":"retadd_check_add_mat voidptr","insertText":"retadd_check_add_mat","insertTextFormat":1},{"label":"retadd_check_add_engine","kind":6,"detail":"retadd_check_add_engine voidptr","insertText":"retadd_check_add_engine","insertTextFormat":1},{"label":"set_viewmodel_offets_add","kind":6,"detail":"set_viewmodel_offets_add voidptr","insertText":"set_viewmodel_offets_add","insertTextFormat":1},{"label":"get_viewmodel_fov_add","kind":6,"detail":"get_viewmodel_fov_add voidptr","insertText":"get_viewmodel_fov_add","insertTextFormat":1},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"trace_from_to_pos","kind":3,"detail":"pub fn trace_from_to_pos(from_pos Vec3, to_pos Vec3) CGameTrace","insertText":"trace_from_to_pos($0, $1)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"EngineWeaponConfigEntry","kind":22,"detail":"struct EngineWeaponConfigEntry","insertText":"EngineWeaponConfigEntry{def_idx:$1, engine_bones_list:$2, engine_force_bone_id:$3, engine_pref_bone_id:$4, engine_vhv_mode:$5, engine_vhv_aw_factor:$6, engine_vhv_egs_factor:$7}","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins:$16, glow:$17, glow_color_if_visible:$18, glow_color_if_not_visible:$19, box:$20, box_color_if_visible:$21, box_color_if_not_visible:$22, names:$23, hp:$24, names_color_if_visible:$25, names_color_if_not_visible:$26, weapon_name:$27, weapon_clip:$28, weapon_name_color_if_visible:$29, weapon_name_color_if_not_visible:$30, snapline:$31, snapline_color_if_visible:$32, snapline_color_if_not_visible:$33, crosshair:$34, crosshair_color:$35, radar:$36, watermark:$37, watermark_color:$38, indicator:$39, indicator_color_if_on:$40, indicator_color_if_off:$41, fov_circle:$42, fov_circle_color:$43, chams:$44, chams_is_visible_only:$45, chams_material:$46, chams_color_if_visible:$47, chams_color_if_not_visible:$48, engine:$49, fov:$50, engine_adjust_fov_scope:$51, engine_bones_list:$52, engine_force_bone_id:$53, engine_pref_bone_id:$54, engine_automatic_fire_key:$55, engine_force_bone_key:$56, engine_force_awall_key:$57, engine_automatic_fire_key_toggle:$58, engine_force_awall_key_toggle:$59, engine_force_bone_key_toggle:$60, engine_vhv_mode:$61, engine_vhv_aw_factor:$62, engine_vhv_egs_factor:$63, chockers:$64, chockers_limit:$65}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8, ret_add_check:$9}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_ret_add_check","kind":3,"detail":"fn hk_ret_add_check(ecx voidptr, edx voidptr, mod_name &u8) bool","insertText":"hk_ret_add_check($0, $1, $2)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, skins:$14, visuals:$15, is_ok:$16}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1667338420}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338420}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":12,"method":"textDocument/completion","params":{"position":{"line":112,"character":78},"context":{"triggerCharacter":".","triggerKind":2},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v"}}},"timestamp":1667338420}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":12,"result":[]},"timestamp":1667338420}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338421}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":13,"method":"textDocument/completion","params":{"position":{"line":112,"character":77},"context":{"triggerKind":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v"}}},"timestamp":1667338421}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":13,"result":[{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"err","kind":6,"detail":"err IError","insertText":"err","insertTextFormat":1},{"label":"err","kind":6,"detail":"err IError","insertText":"err","insertTextFormat":1},{"label":"h","kind":6,"detail":"mut h Hooks","insertText":"h","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx","insertText":"app_ctx","insertTextFormat":1},{"label":"retadd_check_add_client","kind":6,"detail":"retadd_check_add_client voidptr","insertText":"retadd_check_add_client","insertTextFormat":1},{"label":"retadd_check_add_studio","kind":6,"detail":"retadd_check_add_studio voidptr","insertText":"retadd_check_add_studio","insertTextFormat":1},{"label":"retadd_check_add_mat","kind":6,"detail":"retadd_check_add_mat voidptr","insertText":"retadd_check_add_mat","insertTextFormat":1},{"label":"retadd_check_add_engine","kind":6,"detail":"retadd_check_add_engine voidptr","insertText":"retadd_check_add_engine","insertTextFormat":1},{"label":"set_viewmodel_offets_add","kind":6,"detail":"set_viewmodel_offets_add voidptr","insertText":"set_viewmodel_offets_add","insertTextFormat":1},{"label":"get_viewmodel_fov_add","kind":6,"detail":"get_viewmodel_fov_add voidptr","insertText":"get_viewmodel_fov_add","insertTextFormat":1},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"trace_from_to_pos","kind":3,"detail":"pub fn trace_from_to_pos(from_pos Vec3, to_pos Vec3) CGameTrace","insertText":"trace_from_to_pos($0, $1)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"EngineWeaponConfigEntry","kind":22,"detail":"struct EngineWeaponConfigEntry","insertText":"EngineWeaponConfigEntry{def_idx:$1, engine_bones_list:$2, engine_force_bone_id:$3, engine_pref_bone_id:$4, engine_vhv_mode:$5, engine_vhv_aw_factor:$6, engine_vhv_egs_factor:$7}","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins:$16, glow:$17, glow_color_if_visible:$18, glow_color_if_not_visible:$19, box:$20, box_color_if_visible:$21, box_color_if_not_visible:$22, names:$23, hp:$24, names_color_if_visible:$25, names_color_if_not_visible:$26, weapon_name:$27, weapon_clip:$28, weapon_name_color_if_visible:$29, weapon_name_color_if_not_visible:$30, snapline:$31, snapline_color_if_visible:$32, snapline_color_if_not_visible:$33, crosshair:$34, crosshair_color:$35, radar:$36, watermark:$37, watermark_color:$38, indicator:$39, indicator_color_if_on:$40, indicator_color_if_off:$41, fov_circle:$42, fov_circle_color:$43, chams:$44, chams_is_visible_only:$45, chams_material:$46, chams_color_if_visible:$47, chams_color_if_not_visible:$48, engine:$49, fov:$50, engine_adjust_fov_scope:$51, engine_bones_list:$52, engine_force_bone_id:$53, engine_pref_bone_id:$54, engine_automatic_fire_key:$55, engine_force_bone_key:$56, engine_force_awall_key:$57, engine_automatic_fire_key_toggle:$58, engine_force_awall_key_toggle:$59, engine_force_bone_key_toggle:$60, engine_vhv_mode:$61, engine_vhv_aw_factor:$62, engine_vhv_egs_factor:$63, chockers:$64, chockers_limit:$65}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8, ret_add_check:$9}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_ret_add_check","kind":3,"detail":"fn hk_ret_add_check(ecx voidptr, edx voidptr, mod_name &u8) bool","insertText":"hk_ret_add_check($0, $1, $2)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, skins:$14, visuals:$15, is_ok:$16}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1667338421}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338421}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":14,"method":"textDocument/completion","params":{"position":{"line":112,"character":74},"context":{"triggerCharacter":".","triggerKind":2},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v"}}},"timestamp":1667338421}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":14,"result":[]},"timestamp":1667338421}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338421}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":15,"method":"textDocument/completion","params":{"position":{"line":112,"character":73},"context":{"triggerKind":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v"}}},"timestamp":1667338421}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":15,"result":[{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"err","kind":6,"detail":"err IError","insertText":"err","insertTextFormat":1},{"label":"err","kind":6,"detail":"err IError","insertText":"err","insertTextFormat":1},{"label":"h","kind":6,"detail":"mut h Hooks","insertText":"h","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx","insertText":"app_ctx","insertTextFormat":1},{"label":"retadd_check_add_client","kind":6,"detail":"retadd_check_add_client voidptr","insertText":"retadd_check_add_client","insertTextFormat":1},{"label":"retadd_check_add_studio","kind":6,"detail":"retadd_check_add_studio voidptr","insertText":"retadd_check_add_studio","insertTextFormat":1},{"label":"retadd_check_add_mat","kind":6,"detail":"retadd_check_add_mat voidptr","insertText":"retadd_check_add_mat","insertTextFormat":1},{"label":"retadd_check_add_engine","kind":6,"detail":"retadd_check_add_engine voidptr","insertText":"retadd_check_add_engine","insertTextFormat":1},{"label":"set_viewmodel_offets_add","kind":6,"detail":"set_viewmodel_offets_add voidptr","insertText":"set_viewmodel_offets_add","insertTextFormat":1},{"label":"get_viewmodel_fov_add","kind":6,"detail":"get_viewmodel_fov_add voidptr","insertText":"get_viewmodel_fov_add","insertTextFormat":1},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"trace_from_to_pos","kind":3,"detail":"pub fn trace_from_to_pos(from_pos Vec3, to_pos Vec3) CGameTrace","insertText":"trace_from_to_pos($0, $1)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"EngineWeaponConfigEntry","kind":22,"detail":"struct EngineWeaponConfigEntry","insertText":"EngineWeaponConfigEntry{def_idx:$1, engine_bones_list:$2, engine_force_bone_id:$3, engine_pref_bone_id:$4, engine_vhv_mode:$5, engine_vhv_aw_factor:$6, engine_vhv_egs_factor:$7}","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins:$16, glow:$17, glow_color_if_visible:$18, glow_color_if_not_visible:$19, box:$20, box_color_if_visible:$21, box_color_if_not_visible:$22, names:$23, hp:$24, names_color_if_visible:$25, names_color_if_not_visible:$26, weapon_name:$27, weapon_clip:$28, weapon_name_color_if_visible:$29, weapon_name_color_if_not_visible:$30, snapline:$31, snapline_color_if_visible:$32, snapline_color_if_not_visible:$33, crosshair:$34, crosshair_color:$35, radar:$36, watermark:$37, watermark_color:$38, indicator:$39, indicator_color_if_on:$40, indicator_color_if_off:$41, fov_circle:$42, fov_circle_color:$43, chams:$44, chams_is_visible_only:$45, chams_material:$46, chams_color_if_visible:$47, chams_color_if_not_visible:$48, engine:$49, fov:$50, engine_adjust_fov_scope:$51, engine_bones_list:$52, engine_force_bone_id:$53, engine_pref_bone_id:$54, engine_automatic_fire_key:$55, engine_force_bone_key:$56, engine_force_awall_key:$57, engine_automatic_fire_key_toggle:$58, engine_force_awall_key_toggle:$59, engine_force_bone_key_toggle:$60, engine_vhv_mode:$61, engine_vhv_aw_factor:$62, engine_vhv_egs_factor:$63, chockers:$64, chockers_limit:$65}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8, ret_add_check:$9}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_ret_add_check","kind":3,"detail":"fn hk_ret_add_check(ecx voidptr, edx voidptr, mod_name &u8) bool","insertText":"hk_ret_add_check($0, $1, $2)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, skins:$14, visuals:$15, is_ok:$16}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1667338421}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338421}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":16,"method":"textDocument/completion","params":{"position":{"line":112,"character":66},"context":{"triggerCharacter":"(","triggerKind":2},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v"}}},"timestamp":1667338421}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":16,"result":[]},"timestamp":1667338421}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338421}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":17,"method":"textDocument/completion","params":{"position":{"line":112,"character":65},"context":{"triggerKind":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v"}}},"timestamp":1667338421}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":17,"result":[{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"err","kind":6,"detail":"err IError","insertText":"err","insertTextFormat":1},{"label":"err","kind":6,"detail":"err IError","insertText":"err","insertTextFormat":1},{"label":"h","kind":6,"detail":"mut h Hooks","insertText":"h","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx","insertText":"app_ctx","insertTextFormat":1},{"label":"retadd_check_add_client","kind":6,"detail":"retadd_check_add_client voidptr","insertText":"retadd_check_add_client","insertTextFormat":1},{"label":"retadd_check_add_studio","kind":6,"detail":"retadd_check_add_studio voidptr","insertText":"retadd_check_add_studio","insertTextFormat":1},{"label":"retadd_check_add_mat","kind":6,"detail":"retadd_check_add_mat voidptr","insertText":"retadd_check_add_mat","insertTextFormat":1},{"label":"retadd_check_add_engine","kind":6,"detail":"retadd_check_add_engine voidptr","insertText":"retadd_check_add_engine","insertTextFormat":1},{"label":"set_viewmodel_offets_add","kind":6,"detail":"set_viewmodel_offets_add voidptr","insertText":"set_viewmodel_offets_add","insertTextFormat":1},{"label":"get_viewmodel_fov_add","kind":6,"detail":"get_viewmodel_fov_add voidptr","insertText":"get_viewmodel_fov_add","insertTextFormat":1},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"trace_from_to_pos","kind":3,"detail":"pub fn trace_from_to_pos(from_pos Vec3, to_pos Vec3) CGameTrace","insertText":"trace_from_to_pos($0, $1)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"EngineWeaponConfigEntry","kind":22,"detail":"struct EngineWeaponConfigEntry","insertText":"EngineWeaponConfigEntry{def_idx:$1, engine_bones_list:$2, engine_force_bone_id:$3, engine_pref_bone_id:$4, engine_vhv_mode:$5, engine_vhv_aw_factor:$6, engine_vhv_egs_factor:$7}","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins:$16, glow:$17, glow_color_if_visible:$18, glow_color_if_not_visible:$19, box:$20, box_color_if_visible:$21, box_color_if_not_visible:$22, names:$23, hp:$24, names_color_if_visible:$25, names_color_if_not_visible:$26, weapon_name:$27, weapon_clip:$28, weapon_name_color_if_visible:$29, weapon_name_color_if_not_visible:$30, snapline:$31, snapline_color_if_visible:$32, snapline_color_if_not_visible:$33, crosshair:$34, crosshair_color:$35, radar:$36, watermark:$37, watermark_color:$38, indicator:$39, indicator_color_if_on:$40, indicator_color_if_off:$41, fov_circle:$42, fov_circle_color:$43, chams:$44, chams_is_visible_only:$45, chams_material:$46, chams_color_if_visible:$47, chams_color_if_not_visible:$48, engine:$49, fov:$50, engine_adjust_fov_scope:$51, engine_bones_list:$52, engine_force_bone_id:$53, engine_pref_bone_id:$54, engine_automatic_fire_key:$55, engine_force_bone_key:$56, engine_force_awall_key:$57, engine_automatic_fire_key_toggle:$58, engine_force_awall_key_toggle:$59, engine_force_bone_key_toggle:$60, engine_vhv_mode:$61, engine_vhv_aw_factor:$62, engine_vhv_egs_factor:$63, chockers:$64, chockers_limit:$65}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8, ret_add_check:$9}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_ret_add_check","kind":3,"detail":"fn hk_ret_add_check(ecx voidptr, edx voidptr, mod_name &u8) bool","insertText":"hk_ret_add_check($0, $1, $2)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, skins:$14, visuals:$15, is_ok:$16}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1667338421}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338421}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":18,"method":"textDocument/completion","params":{"position":{"line":112,"character":54},"context":{"triggerCharacter":".","triggerKind":2},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v"}}},"timestamp":1667338422}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":18,"result":[]},"timestamp":1667338422}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338422}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":19,"method":"textDocument/completion","params":{"position":{"line":112,"character":53},"context":{"triggerKind":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v"}}},"timestamp":1667338422}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":19,"result":[{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"err","kind":6,"detail":"err IError","insertText":"err","insertTextFormat":1},{"label":"err","kind":6,"detail":"err IError","insertText":"err","insertTextFormat":1},{"label":"h","kind":6,"detail":"mut h Hooks","insertText":"h","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx","insertText":"app_ctx","insertTextFormat":1},{"label":"retadd_check_add_client","kind":6,"detail":"retadd_check_add_client voidptr","insertText":"retadd_check_add_client","insertTextFormat":1},{"label":"retadd_check_add_studio","kind":6,"detail":"retadd_check_add_studio voidptr","insertText":"retadd_check_add_studio","insertTextFormat":1},{"label":"retadd_check_add_mat","kind":6,"detail":"retadd_check_add_mat voidptr","insertText":"retadd_check_add_mat","insertTextFormat":1},{"label":"retadd_check_add_engine","kind":6,"detail":"retadd_check_add_engine voidptr","insertText":"retadd_check_add_engine","insertTextFormat":1},{"label":"set_viewmodel_offets_add","kind":6,"detail":"set_viewmodel_offets_add voidptr","insertText":"set_viewmodel_offets_add","insertTextFormat":1},{"label":"get_viewmodel_fov_add","kind":6,"detail":"get_viewmodel_fov_add voidptr","insertText":"get_viewmodel_fov_add","insertTextFormat":1},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"trace_from_to_pos","kind":3,"detail":"pub fn trace_from_to_pos(from_pos Vec3, to_pos Vec3) CGameTrace","insertText":"trace_from_to_pos($0, $1)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"EngineWeaponConfigEntry","kind":22,"detail":"struct EngineWeaponConfigEntry","insertText":"EngineWeaponConfigEntry{def_idx:$1, engine_bones_list:$2, engine_force_bone_id:$3, engine_pref_bone_id:$4, engine_vhv_mode:$5, engine_vhv_aw_factor:$6, engine_vhv_egs_factor:$7}","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins:$16, glow:$17, glow_color_if_visible:$18, glow_color_if_not_visible:$19, box:$20, box_color_if_visible:$21, box_color_if_not_visible:$22, names:$23, hp:$24, names_color_if_visible:$25, names_color_if_not_visible:$26, weapon_name:$27, weapon_clip:$28, weapon_name_color_if_visible:$29, weapon_name_color_if_not_visible:$30, snapline:$31, snapline_color_if_visible:$32, snapline_color_if_not_visible:$33, crosshair:$34, crosshair_color:$35, radar:$36, watermark:$37, watermark_color:$38, indicator:$39, indicator_color_if_on:$40, indicator_color_if_off:$41, fov_circle:$42, fov_circle_color:$43, chams:$44, chams_is_visible_only:$45, chams_material:$46, chams_color_if_visible:$47, chams_color_if_not_visible:$48, engine:$49, fov:$50, engine_adjust_fov_scope:$51, engine_bones_list:$52, engine_force_bone_id:$53, engine_pref_bone_id:$54, engine_automatic_fire_key:$55, engine_force_bone_key:$56, engine_force_awall_key:$57, engine_automatic_fire_key_toggle:$58, engine_force_awall_key_toggle:$59, engine_force_bone_key_toggle:$60, engine_vhv_mode:$61, engine_vhv_aw_factor:$62, engine_vhv_egs_factor:$63, chockers:$64, chockers_limit:$65}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8, ret_add_check:$9}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_ret_add_check","kind":3,"detail":"fn hk_ret_add_check(ecx voidptr, edx voidptr, mod_name &u8) bool","insertText":"hk_ret_add_check($0, $1, $2)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, skins:$14, visuals:$15, is_ok:$16}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\"","kind":6,"detail":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\" voidptr","insertText":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\"","insertTextFormat":1},{"label":"retadd_check_add_studio","kind":6,"detail":"retadd_check_add_studio voidptr","insertText":"retadd_check_add_studio","insertTextFormat":1},{"label":"retadd_check_add_mat","kind":6,"detail":"retadd_check_add_mat voidptr","insertText":"retadd_check_add_mat","insertTextFormat":1},{"label":"retadd_check_add_engine","kind":6,"detail":"retadd_check_add_engine voidptr","insertText":"retadd_check_add_engine","insertTextFormat":1},{"label":"dsc_base","kind":6,"detail":"dsc_base","insertText":"dsc_base","insertTextFormat":1},{"label":"a","kind":6,"detail":"a","insertText":"a","insertTextFormat":1},{"label":"b","kind":6,"detail":"mut b","insertText":"b","insertTextFormat":1},{"label":"c","kind":6,"detail":"c","insertText":"c","insertTextFormat":1},{"label":"set_viewmodel_offets_add","kind":6,"detail":"set_viewmodel_offets_add voidptr","insertText":"set_viewmodel_offets_add","insertTextFormat":1},{"label":"get_viewmodel_fov_add","kind":6,"detail":"get_viewmodel_fov_add voidptr","insertText":"get_viewmodel_fov_add","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1667338422}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338422}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":20,"method":"textDocument/completion","params":{"position":{"line":112,"character":48},"context":{"triggerCharacter":" ","triggerKind":2},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v"}}},"timestamp":1667338422}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":20,"result":[]},"timestamp":1667338422}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338422}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338423}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338427}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338428}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338430}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338433}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":21,"method":"textDocument/completion","params":{"position":{"line":109,"character":74},"context":{"triggerKind":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v"}}},"timestamp":1667338435}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":21,"result":[{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"err","kind":6,"detail":"err IError","insertText":"err","insertTextFormat":1},{"label":"h","kind":6,"detail":"mut h Hooks","insertText":"h","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx","insertText":"app_ctx","insertTextFormat":1},{"label":"retadd_check_add_client","kind":6,"detail":"retadd_check_add_client voidptr","insertText":"retadd_check_add_client","insertTextFormat":1},{"label":"retadd_check_add_studio","kind":6,"detail":"retadd_check_add_studio voidptr","insertText":"retadd_check_add_studio","insertTextFormat":1},{"label":"retadd_check_add_mat","kind":6,"detail":"retadd_check_add_mat voidptr","insertText":"retadd_check_add_mat","insertTextFormat":1},{"label":"retadd_check_add_engine","kind":6,"detail":"retadd_check_add_engine voidptr","insertText":"retadd_check_add_engine","insertTextFormat":1},{"label":"set_viewmodel_offets_add","kind":6,"detail":"set_viewmodel_offets_add voidptr","insertText":"set_viewmodel_offets_add","insertTextFormat":1},{"label":"get_viewmodel_fov_add","kind":6,"detail":"get_viewmodel_fov_add voidptr","insertText":"get_viewmodel_fov_add","insertTextFormat":1},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"trace_from_to_pos","kind":3,"detail":"pub fn trace_from_to_pos(from_pos Vec3, to_pos Vec3) CGameTrace","insertText":"trace_from_to_pos($0, $1)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"EngineWeaponConfigEntry","kind":22,"detail":"struct EngineWeaponConfigEntry","insertText":"EngineWeaponConfigEntry{def_idx:$1, engine_bones_list:$2, engine_force_bone_id:$3, engine_pref_bone_id:$4, engine_vhv_mode:$5, engine_vhv_aw_factor:$6, engine_vhv_egs_factor:$7}","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins:$16, glow:$17, glow_color_if_visible:$18, glow_color_if_not_visible:$19, box:$20, box_color_if_visible:$21, box_color_if_not_visible:$22, names:$23, hp:$24, names_color_if_visible:$25, names_color_if_not_visible:$26, weapon_name:$27, weapon_clip:$28, weapon_name_color_if_visible:$29, weapon_name_color_if_not_visible:$30, snapline:$31, snapline_color_if_visible:$32, snapline_color_if_not_visible:$33, crosshair:$34, crosshair_color:$35, radar:$36, watermark:$37, watermark_color:$38, indicator:$39, indicator_color_if_on:$40, indicator_color_if_off:$41, fov_circle:$42, fov_circle_color:$43, chams:$44, chams_is_visible_only:$45, chams_material:$46, chams_color_if_visible:$47, chams_color_if_not_visible:$48, engine:$49, fov:$50, engine_adjust_fov_scope:$51, engine_bones_list:$52, engine_force_bone_id:$53, engine_pref_bone_id:$54, engine_automatic_fire_key:$55, engine_force_bone_key:$56, engine_force_awall_key:$57, engine_automatic_fire_key_toggle:$58, engine_force_awall_key_toggle:$59, engine_force_bone_key_toggle:$60, engine_vhv_mode:$61, engine_vhv_aw_factor:$62, engine_vhv_egs_factor:$63, chockers:$64, chockers_limit:$65}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8, ret_add_check:$9}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_ret_add_check","kind":3,"detail":"fn hk_ret_add_check(ecx voidptr, edx voidptr, mod_name &u8) bool","insertText":"hk_ret_add_check($0, $1, $2)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, skins:$14, visuals:$15, is_ok:$16}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\"","kind":6,"detail":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\" voidptr","insertText":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\"","insertTextFormat":1},{"label":"retadd_check_add_studio","kind":6,"detail":"retadd_check_add_studio voidptr","insertText":"retadd_check_add_studio","insertTextFormat":1},{"label":"retadd_check_add_mat","kind":6,"detail":"retadd_check_add_mat voidptr","insertText":"retadd_check_add_mat","insertTextFormat":1},{"label":"retadd_check_add_engine","kind":6,"detail":"retadd_check_add_engine voidptr","insertText":"retadd_check_add_engine","insertTextFormat":1},{"label":"dsc_base","kind":6,"detail":"dsc_base","insertText":"dsc_base","insertTextFormat":1},{"label":"a","kind":6,"detail":"a","insertText":"a","insertTextFormat":1},{"label":"b","kind":6,"detail":"mut b","insertText":"b","insertTextFormat":1},{"label":"c","kind":6,"detail":"c","insertText":"c","insertTextFormat":1},{"label":"set_viewmodel_offets_add","kind":6,"detail":"set_viewmodel_offets_add voidptr","insertText":"set_viewmodel_offets_add","insertTextFormat":1},{"label":"get_viewmodel_fov_add","kind":6,"detail":"get_viewmodel_fov_add voidptr","insertText":"get_viewmodel_fov_add","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"retadd_check_add_client","kind":6,"detail":"retadd_check_add_client voidptr","insertText":"retadd_check_add_client","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1667338435}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338435}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338435}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338435}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338435}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338435}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338435}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338435}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338436}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338436}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338436}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338436}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338437}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338437}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338437}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338437}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338438}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":22,"method":"textDocument/completion","params":{"position":{"line":105,"character":7},"context":{"triggerKind":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v"}}},"timestamp":1667338447}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":22,"result":[{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"err","kind":6,"detail":"err IError","insertText":"err","insertTextFormat":1},{"label":"h","kind":6,"detail":"mut h Hooks","insertText":"h","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx","insertText":"app_ctx","insertTextFormat":1},{"label":"retadd_check_add_client","kind":6,"detail":"retadd_check_add_client voidptr","insertText":"retadd_check_add_client","insertTextFormat":1},{"label":"retadd_check_add_studio","kind":6,"detail":"retadd_check_add_studio voidptr","insertText":"retadd_check_add_studio","insertTextFormat":1},{"label":"retadd_check_add_mat","kind":6,"detail":"retadd_check_add_mat voidptr","insertText":"retadd_check_add_mat","insertTextFormat":1},{"label":"retadd_check_add_engine","kind":6,"detail":"retadd_check_add_engine voidptr","insertText":"retadd_check_add_engine","insertTextFormat":1},{"label":"set_viewmodel_offets_add","kind":6,"detail":"set_viewmodel_offets_add voidptr","insertText":"set_viewmodel_offets_add","insertTextFormat":1},{"label":"get_viewmodel_fov_add","kind":6,"detail":"get_viewmodel_fov_add voidptr","insertText":"get_viewmodel_fov_add","insertTextFormat":1},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"trace_from_to_pos","kind":3,"detail":"pub fn trace_from_to_pos(from_pos Vec3, to_pos Vec3) CGameTrace","insertText":"trace_from_to_pos($0, $1)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"EngineWeaponConfigEntry","kind":22,"detail":"struct EngineWeaponConfigEntry","insertText":"EngineWeaponConfigEntry{def_idx:$1, engine_bones_list:$2, engine_force_bone_id:$3, engine_pref_bone_id:$4, engine_vhv_mode:$5, engine_vhv_aw_factor:$6, engine_vhv_egs_factor:$7}","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins:$16, glow:$17, glow_color_if_visible:$18, glow_color_if_not_visible:$19, box:$20, box_color_if_visible:$21, box_color_if_not_visible:$22, names:$23, hp:$24, names_color_if_visible:$25, names_color_if_not_visible:$26, weapon_name:$27, weapon_clip:$28, weapon_name_color_if_visible:$29, weapon_name_color_if_not_visible:$30, snapline:$31, snapline_color_if_visible:$32, snapline_color_if_not_visible:$33, crosshair:$34, crosshair_color:$35, radar:$36, watermark:$37, watermark_color:$38, indicator:$39, indicator_color_if_on:$40, indicator_color_if_off:$41, fov_circle:$42, fov_circle_color:$43, chams:$44, chams_is_visible_only:$45, chams_material:$46, chams_color_if_visible:$47, chams_color_if_not_visible:$48, engine:$49, fov:$50, engine_adjust_fov_scope:$51, engine_bones_list:$52, engine_force_bone_id:$53, engine_pref_bone_id:$54, engine_automatic_fire_key:$55, engine_force_bone_key:$56, engine_force_awall_key:$57, engine_automatic_fire_key_toggle:$58, engine_force_awall_key_toggle:$59, engine_force_bone_key_toggle:$60, engine_vhv_mode:$61, engine_vhv_aw_factor:$62, engine_vhv_egs_factor:$63, chockers:$64, chockers_limit:$65}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8, ret_add_check:$9}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_ret_add_check","kind":3,"detail":"fn hk_ret_add_check(ecx voidptr, edx voidptr, mod_name &u8) bool","insertText":"hk_ret_add_check($0, $1, $2)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, skins:$14, visuals:$15, is_ok:$16}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\"","kind":6,"detail":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\" voidptr","insertText":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\"","insertTextFormat":1},{"label":"retadd_check_add_studio","kind":6,"detail":"retadd_check_add_studio voidptr","insertText":"retadd_check_add_studio","insertTextFormat":1},{"label":"retadd_check_add_mat","kind":6,"detail":"retadd_check_add_mat voidptr","insertText":"retadd_check_add_mat","insertTextFormat":1},{"label":"retadd_check_add_engine","kind":6,"detail":"retadd_check_add_engine voidptr","insertText":"retadd_check_add_engine","insertTextFormat":1},{"label":"dsc_base","kind":6,"detail":"dsc_base","insertText":"dsc_base","insertTextFormat":1},{"label":"a","kind":6,"detail":"a","insertText":"a","insertTextFormat":1},{"label":"b","kind":6,"detail":"mut b","insertText":"b","insertTextFormat":1},{"label":"c","kind":6,"detail":"c","insertText":"c","insertTextFormat":1},{"label":"set_viewmodel_offets_add","kind":6,"detail":"set_viewmodel_offets_add voidptr","insertText":"set_viewmodel_offets_add","insertTextFormat":1},{"label":"get_viewmodel_fov_add","kind":6,"detail":"get_viewmodel_fov_add voidptr","insertText":"get_viewmodel_fov_add","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"retadd_check_add_client","kind":6,"detail":"retadd_check_add_client voidptr","insertText":"retadd_check_add_client","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1667338447}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338447}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338447}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338448}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338448}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338448}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":23,"method":"textDocument/completion","params":{"position":{"line":105,"character":12},"context":{"triggerCharacter":".","triggerKind":2},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v"}}},"timestamp":1667338449}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":23,"result":[{"label":"radian","kind":6,"detail":"pub const radian f32","insertText":"radian","insertTextFormat":1},{"label":"Vec3","kind":22,"detail":"pub struct Vec3","insertText":"Vec3{x:$1, y:$2, z:$3}","insertTextFormat":2},{"label":"distance_from","kind":3,"detail":"pub fn distance_from(from_ent Vec3, to_ent Vec3) f32","insertText":"distance_from($0, $1)","insertTextFormat":2},{"label":"sin_cos","kind":3,"detail":"pub fn sin_cos(with_radion f32) (f32, f32)","insertText":"sin_cos($0)","insertTextFormat":2},{"label":"Angle","kind":22,"detail":"pub struct Angle","insertText":"Angle{pitch:$1, yaw:$2, roll:$3}","insertTextFormat":2},{"label":"angle_to_vectors","kind":3,"detail":"pub fn angle_to_vectors(with_angle Angle) (Vec3, Vec3, Vec3)","insertText":"angle_to_vectors($0)","insertTextFormat":2},{"label":"get_val_offset","kind":3,"detail":"pub fn get_val_offset(in_this_obj voidptr, at_offset usize) &T","insertText":"get_val_offset($0, $1)","insertTextFormat":2},{"label":"pattern_scan","kind":3,"detail":"pub fn pattern_scan(in_module string, with_sig string) ?voidptr","insertText":"pattern_scan($0, $1)","insertTextFormat":2},{"label":"wait_for_module","kind":3,"detail":"pub fn wait_for_module(mut with_modules []string, and_max_timeout int)","insertText":"wait_for_module($0, $1)","insertTextFormat":2},{"label":"Matrix","kind":22,"detail":"pub struct Matrix","insertText":"Matrix{m:$1}","insertTextFormat":2},{"label":"Vec2","kind":22,"detail":"pub struct Vec2","insertText":"Vec2{x:$1, y:$2}","insertTextFormat":2},{"label":"op_vec","kind":3,"detail":"pub fn op_vec(with_op_val f32) Vec3","insertText":"op_vec($0)","insertTextFormat":2},{"label":"new_angle","kind":3,"detail":"pub fn new_angle(x T, y T, z T) Angle","insertText":"new_angle($0, $1, $2)","insertTextFormat":2},{"label":"new_vec3","kind":3,"detail":"pub fn new_vec3(x T, y T, z T) Vec3","insertText":"new_vec3($0, $1, $2)","insertTextFormat":2},{"label":"new_vec2","kind":3,"detail":"pub fn new_vec2(x T, y T) Vec2","insertText":"new_vec2($0, $1)","insertTextFormat":2},{"label":"HResult","kind":22,"detail":"pub struct HResult","insertText":"HResult{val:$1}","insertTextFormat":2},{"label":"h_res","kind":3,"detail":"pub fn h_res(with_hres int) HResult","insertText":"h_res($0)","insertTextFormat":2},{"label":"str_align","kind":3,"detail":"pub fn str_align(with_og_text string, with_spaces_count i32, and_final_sep string) string","insertText":"str_align($0, $1, $2)","insertTextFormat":2},{"label":"load_unload_console","kind":3,"detail":"pub fn load_unload_console(with_switch bool, and_file &C.FILE)","insertText":"load_unload_console($0, $1)","insertTextFormat":2},{"label":"Color","kind":22,"detail":"pub struct Color","insertText":"Color{, rgba:$1}","insertTextFormat":2},{"label":"pront","kind":3,"detail":"pub fn pront(with_text string)","insertText":"pront($0)","insertTextFormat":2},{"label":"ColorRgbF","kind":22,"detail":"pub struct ColorRgbF","insertText":"ColorRgbF{r:$1, g:$2, b:$3}","insertTextFormat":2},{"label":"ColorRgbaF","kind":22,"detail":"pub struct ColorRgbaF","insertText":"ColorRgbaF{r:$1, g:$2, b:$3, a:$4}","insertTextFormat":2},{"label":"color_rbga","kind":3,"detail":"pub fn color_rbga(r_ T, g_ T, b_ T, a_ T) Color","insertText":"color_rbga($0, $1, $2, $3)","insertTextFormat":2},{"label":"color_f_rbga","kind":3,"detail":"pub fn color_f_rbga(r_ T, g_ T, b_ T, a_ T) Color","insertText":"color_f_rbga($0, $1, $2, $3)","insertTextFormat":2},{"label":"color_hex","kind":3,"detail":"pub fn color_hex(withHex u32) Color","insertText":"color_hex($0)","insertTextFormat":2},{"label":"error_critical","kind":3,"detail":"pub fn error_critical(with_error string, and_error_complement string)","insertText":"error_critical($0, $1)","insertTextFormat":2},{"label":"client_error","kind":3,"detail":"pub fn client_error(with_error string)","insertText":"client_error($0)","insertTextFormat":2}]},"timestamp":1667338449}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338449}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338450}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338480}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338480}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338488}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338500}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338500}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338500}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338501}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":24,"method":"textDocument/completion","params":{"position":{"line":105,"character":31},"context":{"triggerKind":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v"}}},"timestamp":1667338501}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":24,"result":[{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"err","kind":6,"detail":"err IError","insertText":"err","insertTextFormat":1},{"label":"err","kind":6,"detail":"err IError","insertText":"err","insertTextFormat":1},{"label":"err","kind":6,"detail":"err IError","insertText":"err","insertTextFormat":1},{"label":"err","kind":6,"detail":"err IError","insertText":"err","insertTextFormat":1},{"label":"h","kind":6,"detail":"mut h Hooks","insertText":"h","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx","insertText":"app_ctx","insertTextFormat":1},{"label":"retadd_check_add_client","kind":6,"detail":"retadd_check_add_client voidptr","insertText":"retadd_check_add_client","insertTextFormat":1},{"label":"retadd_check_add_studio","kind":6,"detail":"retadd_check_add_studio voidptr","insertText":"retadd_check_add_studio","insertTextFormat":1},{"label":"retadd_check_add_mat","kind":6,"detail":"retadd_check_add_mat voidptr","insertText":"retadd_check_add_mat","insertTextFormat":1},{"label":"retadd_check_add_engine","kind":6,"detail":"retadd_check_add_engine voidptr","insertText":"retadd_check_add_engine","insertTextFormat":1},{"label":"set_viewmodel_offets_add","kind":6,"detail":"set_viewmodel_offets_add voidptr","insertText":"set_viewmodel_offets_add","insertTextFormat":1},{"label":"get_viewmodel_fov_add","kind":6,"detail":"get_viewmodel_fov_add voidptr","insertText":"get_viewmodel_fov_add","insertTextFormat":1},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"trace_from_to_pos","kind":3,"detail":"pub fn trace_from_to_pos(from_pos Vec3, to_pos Vec3) CGameTrace","insertText":"trace_from_to_pos($0, $1)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"EngineWeaponConfigEntry","kind":22,"detail":"struct EngineWeaponConfigEntry","insertText":"EngineWeaponConfigEntry{def_idx:$1, engine_bones_list:$2, engine_force_bone_id:$3, engine_pref_bone_id:$4, engine_vhv_mode:$5, engine_vhv_aw_factor:$6, engine_vhv_egs_factor:$7}","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins:$16, glow:$17, glow_color_if_visible:$18, glow_color_if_not_visible:$19, box:$20, box_color_if_visible:$21, box_color_if_not_visible:$22, names:$23, hp:$24, names_color_if_visible:$25, names_color_if_not_visible:$26, weapon_name:$27, weapon_clip:$28, weapon_name_color_if_visible:$29, weapon_name_color_if_not_visible:$30, snapline:$31, snapline_color_if_visible:$32, snapline_color_if_not_visible:$33, crosshair:$34, crosshair_color:$35, radar:$36, watermark:$37, watermark_color:$38, indicator:$39, indicator_color_if_on:$40, indicator_color_if_off:$41, fov_circle:$42, fov_circle_color:$43, chams:$44, chams_is_visible_only:$45, chams_material:$46, chams_color_if_visible:$47, chams_color_if_not_visible:$48, engine:$49, fov:$50, engine_adjust_fov_scope:$51, engine_bones_list:$52, engine_force_bone_id:$53, engine_pref_bone_id:$54, engine_automatic_fire_key:$55, engine_force_bone_key:$56, engine_force_awall_key:$57, engine_automatic_fire_key_toggle:$58, engine_force_awall_key_toggle:$59, engine_force_bone_key_toggle:$60, engine_vhv_mode:$61, engine_vhv_aw_factor:$62, engine_vhv_egs_factor:$63, chockers:$64, chockers_limit:$65}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8, ret_add_check:$9}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_ret_add_check","kind":3,"detail":"fn hk_ret_add_check(ecx voidptr, edx voidptr, mod_name &u8) bool","insertText":"hk_ret_add_check($0, $1, $2)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, skins:$14, visuals:$15, is_ok:$16}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\"","kind":6,"detail":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\" voidptr","insertText":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\"","insertTextFormat":1},{"label":"retadd_check_add_studio","kind":6,"detail":"retadd_check_add_studio voidptr","insertText":"retadd_check_add_studio","insertTextFormat":1},{"label":"retadd_check_add_mat","kind":6,"detail":"retadd_check_add_mat voidptr","insertText":"retadd_check_add_mat","insertTextFormat":1},{"label":"retadd_check_add_engine","kind":6,"detail":"retadd_check_add_engine voidptr","insertText":"retadd_check_add_engine","insertTextFormat":1},{"label":"dsc_base","kind":6,"detail":"dsc_base","insertText":"dsc_base","insertTextFormat":1},{"label":"a","kind":6,"detail":"a","insertText":"a","insertTextFormat":1},{"label":"b","kind":6,"detail":"mut b","insertText":"b","insertTextFormat":1},{"label":"c","kind":6,"detail":"c","insertText":"c","insertTextFormat":1},{"label":"set_viewmodel_offets_add","kind":6,"detail":"set_viewmodel_offets_add voidptr","insertText":"set_viewmodel_offets_add","insertTextFormat":1},{"label":"get_viewmodel_fov_add","kind":6,"detail":"get_viewmodel_fov_add voidptr","insertText":"get_viewmodel_fov_add","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"retadd_check_add_client","kind":6,"detail":"retadd_check_add_client voidptr","insertText":"retadd_check_add_client","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1667338501}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338501}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338502}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338504}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338504}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338505}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338535}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338555}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338555}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":25,"method":"textDocument/completion","params":{"position":{"line":66,"character":22},"context":{"triggerKind":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v"}}},"timestamp":1667338555}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":25,"result":[{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"trace_from_to_pos","kind":3,"detail":"pub fn trace_from_to_pos(from_pos Vec3, to_pos Vec3) CGameTrace","insertText":"trace_from_to_pos($0, $1)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"EngineWeaponConfigEntry","kind":22,"detail":"struct EngineWeaponConfigEntry","insertText":"EngineWeaponConfigEntry{def_idx:$1, engine_bones_list:$2, engine_force_bone_id:$3, engine_pref_bone_id:$4, engine_vhv_mode:$5, engine_vhv_aw_factor:$6, engine_vhv_egs_factor:$7}","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins:$16, glow:$17, glow_color_if_visible:$18, glow_color_if_not_visible:$19, box:$20, box_color_if_visible:$21, box_color_if_not_visible:$22, names:$23, hp:$24, names_color_if_visible:$25, names_color_if_not_visible:$26, weapon_name:$27, weapon_clip:$28, weapon_name_color_if_visible:$29, weapon_name_color_if_not_visible:$30, snapline:$31, snapline_color_if_visible:$32, snapline_color_if_not_visible:$33, crosshair:$34, crosshair_color:$35, radar:$36, watermark:$37, watermark_color:$38, indicator:$39, indicator_color_if_on:$40, indicator_color_if_off:$41, fov_circle:$42, fov_circle_color:$43, chams:$44, chams_is_visible_only:$45, chams_material:$46, chams_color_if_visible:$47, chams_color_if_not_visible:$48, engine:$49, fov:$50, engine_adjust_fov_scope:$51, engine_bones_list:$52, engine_force_bone_id:$53, engine_pref_bone_id:$54, engine_automatic_fire_key:$55, engine_force_bone_key:$56, engine_force_awall_key:$57, engine_automatic_fire_key_toggle:$58, engine_force_awall_key_toggle:$59, engine_force_bone_key_toggle:$60, engine_vhv_mode:$61, engine_vhv_aw_factor:$62, engine_vhv_egs_factor:$63, chockers:$64, chockers_limit:$65}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, end_scene:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8, ret_add_check:$9}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_ret_add_check","kind":3,"detail":"fn hk_ret_add_check(ecx voidptr, edx voidptr, mod_name &u8) bool","insertText":"hk_ret_add_check($0, $1, $2)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, skins:$14, visuals:$15, is_ok:$16}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\"","kind":6,"detail":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\" voidptr","insertText":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\"","insertTextFormat":1},{"label":"retadd_check_add_studio","kind":6,"detail":"retadd_check_add_studio voidptr","insertText":"retadd_check_add_studio","insertTextFormat":1},{"label":"retadd_check_add_mat","kind":6,"detail":"retadd_check_add_mat voidptr","insertText":"retadd_check_add_mat","insertTextFormat":1},{"label":"retadd_check_add_engine","kind":6,"detail":"retadd_check_add_engine voidptr","insertText":"retadd_check_add_engine","insertTextFormat":1},{"label":"dsc_base","kind":6,"detail":"dsc_base","insertText":"dsc_base","insertTextFormat":1},{"label":"a","kind":6,"detail":"a","insertText":"a","insertTextFormat":1},{"label":"b","kind":6,"detail":"mut b","insertText":"b","insertTextFormat":1},{"label":"c","kind":6,"detail":"c","insertText":"c","insertTextFormat":1},{"label":"set_viewmodel_offets_add","kind":6,"detail":"set_viewmodel_offets_add voidptr","insertText":"set_viewmodel_offets_add","insertTextFormat":1},{"label":"get_viewmodel_fov_add","kind":6,"detail":"get_viewmodel_fov_add voidptr","insertText":"get_viewmodel_fov_add","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"retadd_check_add_client","kind":6,"detail":"retadd_check_add_client voidptr","insertText":"retadd_check_add_client","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1667338555}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338555}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338556}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338556}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338556}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338556}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338557}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338557}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338557}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338557}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338559}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338559}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":26,"method":"textDocument/completion","params":{"position":{"line":66,"character":2},"context":{"triggerKind":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v"}}},"timestamp":1667338559}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":26,"result":[{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"trace_from_to_pos","kind":3,"detail":"pub fn trace_from_to_pos(from_pos Vec3, to_pos Vec3) CGameTrace","insertText":"trace_from_to_pos($0, $1)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"EngineWeaponConfigEntry","kind":22,"detail":"struct EngineWeaponConfigEntry","insertText":"EngineWeaponConfigEntry{def_idx:$1, engine_bones_list:$2, engine_force_bone_id:$3, engine_pref_bone_id:$4, engine_vhv_mode:$5, engine_vhv_aw_factor:$6, engine_vhv_egs_factor:$7}","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins:$16, glow:$17, glow_color_if_visible:$18, glow_color_if_not_visible:$19, box:$20, box_color_if_visible:$21, box_color_if_not_visible:$22, names:$23, hp:$24, names_color_if_visible:$25, names_color_if_not_visible:$26, weapon_name:$27, weapon_clip:$28, weapon_name_color_if_visible:$29, weapon_name_color_if_not_visible:$30, snapline:$31, snapline_color_if_visible:$32, snapline_color_if_not_visible:$33, crosshair:$34, crosshair_color:$35, radar:$36, watermark:$37, watermark_color:$38, indicator:$39, indicator_color_if_on:$40, indicator_color_if_off:$41, fov_circle:$42, fov_circle_color:$43, chams:$44, chams_is_visible_only:$45, chams_material:$46, chams_color_if_visible:$47, chams_color_if_not_visible:$48, engine:$49, fov:$50, engine_adjust_fov_scope:$51, engine_bones_list:$52, engine_force_bone_id:$53, engine_pref_bone_id:$54, engine_automatic_fire_key:$55, engine_force_bone_key:$56, engine_force_awall_key:$57, engine_automatic_fire_key_toggle:$58, engine_force_awall_key_toggle:$59, engine_force_bone_key_toggle:$60, engine_vhv_mode:$61, engine_vhv_aw_factor:$62, engine_vhv_egs_factor:$63, chockers:$64, chockers_limit:$65}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_ret_add_check","kind":3,"detail":"fn hk_ret_add_check(ecx voidptr, edx voidptr, mod_name &u8) bool","insertText":"hk_ret_add_check($0, $1, $2)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, skins:$14, visuals:$15, is_ok:$16}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\"","kind":6,"detail":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\" voidptr","insertText":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\"","insertTextFormat":1},{"label":"retadd_check_add_studio","kind":6,"detail":"retadd_check_add_studio voidptr","insertText":"retadd_check_add_studio","insertTextFormat":1},{"label":"retadd_check_add_mat","kind":6,"detail":"retadd_check_add_mat voidptr","insertText":"retadd_check_add_mat","insertTextFormat":1},{"label":"retadd_check_add_engine","kind":6,"detail":"retadd_check_add_engine voidptr","insertText":"retadd_check_add_engine","insertTextFormat":1},{"label":"dsc_base","kind":6,"detail":"dsc_base","insertText":"dsc_base","insertTextFormat":1},{"label":"a","kind":6,"detail":"a","insertText":"a","insertTextFormat":1},{"label":"b","kind":6,"detail":"mut b","insertText":"b","insertTextFormat":1},{"label":"c","kind":6,"detail":"c","insertText":"c","insertTextFormat":1},{"label":"set_viewmodel_offets_add","kind":6,"detail":"set_viewmodel_offets_add voidptr","insertText":"set_viewmodel_offets_add","insertTextFormat":1},{"label":"get_viewmodel_fov_add","kind":6,"detail":"get_viewmodel_fov_add voidptr","insertText":"get_viewmodel_fov_add","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"retadd_check_add_client","kind":6,"detail":"retadd_check_add_client voidptr","insertText":"retadd_check_add_client","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1667338559}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338560}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338560}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338560}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338561}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338561}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338561}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338561}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338562}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338572}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338573}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338580}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338580}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338587}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338588}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338609}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338615}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338615}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338615}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338615}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338616}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338625}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338625}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338626}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338627}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338627}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338628}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338628}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338628}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338628}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":27,"method":"textDocument/completion","params":{"position":{"line":176,"character":35},"context":{"triggerCharacter":" ","triggerKind":2},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v"}}},"timestamp":1667338632}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":27,"result":[]},"timestamp":1667338632}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338632}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":28,"method":"textDocument/completion","params":{"position":{"line":176,"character":36},"context":{"triggerKind":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v"}}},"timestamp":1667338637}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":28,"result":[{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"dev","kind":6,"detail":"dev voidptr","insertText":"dev","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx","insertText":"app_ctx","insertTextFormat":1},{"label":"is_called_once","kind":6,"detail":"mut is_called_once bool","insertText":"is_called_once","insertTextFormat":1},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"trace_from_to_pos","kind":3,"detail":"pub fn trace_from_to_pos(from_pos Vec3, to_pos Vec3) CGameTrace","insertText":"trace_from_to_pos($0, $1)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"EngineWeaponConfigEntry","kind":22,"detail":"struct EngineWeaponConfigEntry","insertText":"EngineWeaponConfigEntry{def_idx:$1, engine_bones_list:$2, engine_force_bone_id:$3, engine_pref_bone_id:$4, engine_vhv_mode:$5, engine_vhv_aw_factor:$6, engine_vhv_egs_factor:$7}","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins:$16, glow:$17, glow_color_if_visible:$18, glow_color_if_not_visible:$19, box:$20, box_color_if_visible:$21, box_color_if_not_visible:$22, names:$23, hp:$24, names_color_if_visible:$25, names_color_if_not_visible:$26, weapon_name:$27, weapon_clip:$28, weapon_name_color_if_visible:$29, weapon_name_color_if_not_visible:$30, snapline:$31, snapline_color_if_visible:$32, snapline_color_if_not_visible:$33, crosshair:$34, crosshair_color:$35, radar:$36, watermark:$37, watermark_color:$38, indicator:$39, indicator_color_if_on:$40, indicator_color_if_off:$41, fov_circle:$42, fov_circle_color:$43, chams:$44, chams_is_visible_only:$45, chams_material:$46, chams_color_if_visible:$47, chams_color_if_not_visible:$48, engine:$49, fov:$50, engine_adjust_fov_scope:$51, engine_bones_list:$52, engine_force_bone_id:$53, engine_pref_bone_id:$54, engine_automatic_fire_key:$55, engine_force_bone_key:$56, engine_force_awall_key:$57, engine_automatic_fire_key_toggle:$58, engine_force_awall_key_toggle:$59, engine_force_bone_key_toggle:$60, engine_vhv_mode:$61, engine_vhv_aw_factor:$62, engine_vhv_egs_factor:$63, chockers:$64, chockers_limit:$65}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, present:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8, ret_add_check:$9}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_ret_add_check","kind":3,"detail":"fn hk_ret_add_check(ecx voidptr, edx voidptr, mod_name &u8) bool","insertText":"hk_ret_add_check($0, $1, $2)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, skins:$14, visuals:$15, is_ok:$16}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\"","kind":6,"detail":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\" voidptr","insertText":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\"","insertTextFormat":1},{"label":"retadd_check_add_studio","kind":6,"detail":"retadd_check_add_studio voidptr","insertText":"retadd_check_add_studio","insertTextFormat":1},{"label":"retadd_check_add_mat","kind":6,"detail":"retadd_check_add_mat voidptr","insertText":"retadd_check_add_mat","insertTextFormat":1},{"label":"retadd_check_add_engine","kind":6,"detail":"retadd_check_add_engine voidptr","insertText":"retadd_check_add_engine","insertTextFormat":1},{"label":"dsc_base","kind":6,"detail":"dsc_base","insertText":"dsc_base","insertTextFormat":1},{"label":"a","kind":6,"detail":"a","insertText":"a","insertTextFormat":1},{"label":"b","kind":6,"detail":"mut b","insertText":"b","insertTextFormat":1},{"label":"c","kind":6,"detail":"c","insertText":"c","insertTextFormat":1},{"label":"set_viewmodel_offets_add","kind":6,"detail":"set_viewmodel_offets_add voidptr","insertText":"set_viewmodel_offets_add","insertTextFormat":1},{"label":"get_viewmodel_fov_add","kind":6,"detail":"get_viewmodel_fov_add voidptr","insertText":"get_viewmodel_fov_add","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"retadd_check_add_client","kind":6,"detail":"retadd_check_add_client voidptr","insertText":"retadd_check_add_client","insertTextFormat":1},{"label":"called_once","kind":6,"detail":"mut called_once bool","insertText":"called_once","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1667338637}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338637}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338638}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338638}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338638}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338638}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338638}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338640}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338644}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":29,"method":"textDocument/completion","params":{"position":{"line":179,"character":10},"context":{"triggerKind":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v"}}},"timestamp":1667338648}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":29,"result":[{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"dev","kind":6,"detail":"dev voidptr","insertText":"dev","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"is_called_once","kind":6,"detail":"mut is_called_once bool","insertText":"is_called_once","insertTextFormat":1},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"trace_from_to_pos","kind":3,"detail":"pub fn trace_from_to_pos(from_pos Vec3, to_pos Vec3) CGameTrace","insertText":"trace_from_to_pos($0, $1)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"EngineWeaponConfigEntry","kind":22,"detail":"struct EngineWeaponConfigEntry","insertText":"EngineWeaponConfigEntry{def_idx:$1, engine_bones_list:$2, engine_force_bone_id:$3, engine_pref_bone_id:$4, engine_vhv_mode:$5, engine_vhv_aw_factor:$6, engine_vhv_egs_factor:$7}","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins:$16, glow:$17, glow_color_if_visible:$18, glow_color_if_not_visible:$19, box:$20, box_color_if_visible:$21, box_color_if_not_visible:$22, names:$23, hp:$24, names_color_if_visible:$25, names_color_if_not_visible:$26, weapon_name:$27, weapon_clip:$28, weapon_name_color_if_visible:$29, weapon_name_color_if_not_visible:$30, snapline:$31, snapline_color_if_visible:$32, snapline_color_if_not_visible:$33, crosshair:$34, crosshair_color:$35, radar:$36, watermark:$37, watermark_color:$38, indicator:$39, indicator_color_if_on:$40, indicator_color_if_off:$41, fov_circle:$42, fov_circle_color:$43, chams:$44, chams_is_visible_only:$45, chams_material:$46, chams_color_if_visible:$47, chams_color_if_not_visible:$48, engine:$49, fov:$50, engine_adjust_fov_scope:$51, engine_bones_list:$52, engine_force_bone_id:$53, engine_pref_bone_id:$54, engine_automatic_fire_key:$55, engine_force_bone_key:$56, engine_force_awall_key:$57, engine_automatic_fire_key_toggle:$58, engine_force_awall_key_toggle:$59, engine_force_bone_key_toggle:$60, engine_vhv_mode:$61, engine_vhv_aw_factor:$62, engine_vhv_egs_factor:$63, chockers:$64, chockers_limit:$65}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, present:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8, ret_add_check:$9}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_ret_add_check","kind":3,"detail":"fn hk_ret_add_check(ecx voidptr, edx voidptr, mod_name &u8) bool","insertText":"hk_ret_add_check($0, $1, $2)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, skins:$14, visuals:$15, is_ok:$16}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\"","kind":6,"detail":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\" voidptr","insertText":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\"","insertTextFormat":1},{"label":"retadd_check_add_studio","kind":6,"detail":"retadd_check_add_studio voidptr","insertText":"retadd_check_add_studio","insertTextFormat":1},{"label":"retadd_check_add_mat","kind":6,"detail":"retadd_check_add_mat voidptr","insertText":"retadd_check_add_mat","insertTextFormat":1},{"label":"retadd_check_add_engine","kind":6,"detail":"retadd_check_add_engine voidptr","insertText":"retadd_check_add_engine","insertTextFormat":1},{"label":"dsc_base","kind":6,"detail":"dsc_base","insertText":"dsc_base","insertTextFormat":1},{"label":"a","kind":6,"detail":"a","insertText":"a","insertTextFormat":1},{"label":"b","kind":6,"detail":"mut b","insertText":"b","insertTextFormat":1},{"label":"c","kind":6,"detail":"c","insertText":"c","insertTextFormat":1},{"label":"set_viewmodel_offets_add","kind":6,"detail":"set_viewmodel_offets_add voidptr","insertText":"set_viewmodel_offets_add","insertTextFormat":1},{"label":"get_viewmodel_fov_add","kind":6,"detail":"get_viewmodel_fov_add voidptr","insertText":"get_viewmodel_fov_add","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"retadd_check_add_client","kind":6,"detail":"retadd_check_add_client voidptr","insertText":"retadd_check_add_client","insertTextFormat":1},{"label":"called_once","kind":6,"detail":"mut called_once bool","insertText":"called_once","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1667338648}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338648}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338649}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":30,"method":"textDocument/completion","params":{"position":{"line":179,"character":8},"context":{"triggerCharacter":" ","triggerKind":2},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v"}}},"timestamp":1667338649}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":30,"result":[]},"timestamp":1667338649}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338649}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":31,"method":"textDocument/completion","params":{"position":{"line":179,"character":9},"context":{"triggerKind":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v"}}},"timestamp":1667338649}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":31,"result":[{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"dev","kind":6,"detail":"dev voidptr","insertText":"dev","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"is_called_once","kind":6,"detail":"mut is_called_once bool","insertText":"is_called_once","insertTextFormat":1},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"trace_from_to_pos","kind":3,"detail":"pub fn trace_from_to_pos(from_pos Vec3, to_pos Vec3) CGameTrace","insertText":"trace_from_to_pos($0, $1)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"EngineWeaponConfigEntry","kind":22,"detail":"struct EngineWeaponConfigEntry","insertText":"EngineWeaponConfigEntry{def_idx:$1, engine_bones_list:$2, engine_force_bone_id:$3, engine_pref_bone_id:$4, engine_vhv_mode:$5, engine_vhv_aw_factor:$6, engine_vhv_egs_factor:$7}","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins:$16, glow:$17, glow_color_if_visible:$18, glow_color_if_not_visible:$19, box:$20, box_color_if_visible:$21, box_color_if_not_visible:$22, names:$23, hp:$24, names_color_if_visible:$25, names_color_if_not_visible:$26, weapon_name:$27, weapon_clip:$28, weapon_name_color_if_visible:$29, weapon_name_color_if_not_visible:$30, snapline:$31, snapline_color_if_visible:$32, snapline_color_if_not_visible:$33, crosshair:$34, crosshair_color:$35, radar:$36, watermark:$37, watermark_color:$38, indicator:$39, indicator_color_if_on:$40, indicator_color_if_off:$41, fov_circle:$42, fov_circle_color:$43, chams:$44, chams_is_visible_only:$45, chams_material:$46, chams_color_if_visible:$47, chams_color_if_not_visible:$48, engine:$49, fov:$50, engine_adjust_fov_scope:$51, engine_bones_list:$52, engine_force_bone_id:$53, engine_pref_bone_id:$54, engine_automatic_fire_key:$55, engine_force_bone_key:$56, engine_force_awall_key:$57, engine_automatic_fire_key_toggle:$58, engine_force_awall_key_toggle:$59, engine_force_bone_key_toggle:$60, engine_vhv_mode:$61, engine_vhv_aw_factor:$62, engine_vhv_egs_factor:$63, chockers:$64, chockers_limit:$65}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, present:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8, ret_add_check:$9}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_ret_add_check","kind":3,"detail":"fn hk_ret_add_check(ecx voidptr, edx voidptr, mod_name &u8) bool","insertText":"hk_ret_add_check($0, $1, $2)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, skins:$14, visuals:$15, is_ok:$16}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\"","kind":6,"detail":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\" voidptr","insertText":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\"","insertTextFormat":1},{"label":"retadd_check_add_studio","kind":6,"detail":"retadd_check_add_studio voidptr","insertText":"retadd_check_add_studio","insertTextFormat":1},{"label":"retadd_check_add_mat","kind":6,"detail":"retadd_check_add_mat voidptr","insertText":"retadd_check_add_mat","insertTextFormat":1},{"label":"retadd_check_add_engine","kind":6,"detail":"retadd_check_add_engine voidptr","insertText":"retadd_check_add_engine","insertTextFormat":1},{"label":"dsc_base","kind":6,"detail":"dsc_base","insertText":"dsc_base","insertTextFormat":1},{"label":"a","kind":6,"detail":"a","insertText":"a","insertTextFormat":1},{"label":"b","kind":6,"detail":"mut b","insertText":"b","insertTextFormat":1},{"label":"c","kind":6,"detail":"c","insertText":"c","insertTextFormat":1},{"label":"set_viewmodel_offets_add","kind":6,"detail":"set_viewmodel_offets_add voidptr","insertText":"set_viewmodel_offets_add","insertTextFormat":1},{"label":"get_viewmodel_fov_add","kind":6,"detail":"get_viewmodel_fov_add voidptr","insertText":"get_viewmodel_fov_add","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"retadd_check_add_client","kind":6,"detail":"retadd_check_add_client voidptr","insertText":"retadd_check_add_client","insertTextFormat":1},{"label":"called_once","kind":6,"detail":"mut called_once bool","insertText":"called_once","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1667338649}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338649}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338649}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338649}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338650}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338650}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338650}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338651}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338651}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338651}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338651}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338652}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338652}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338652}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338652}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338653}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338653}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338653}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338653}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338654}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338654}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":32,"method":"textDocument/completion","params":{"position":{"line":179,"character":15},"context":{"triggerKind":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v"}}},"timestamp":1667338654}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":32,"result":[{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"dev","kind":6,"detail":"dev voidptr","insertText":"dev","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"is_called_once","kind":6,"detail":"mut is_called_once bool","insertText":"is_called_once","insertTextFormat":1},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"trace_from_to_pos","kind":3,"detail":"pub fn trace_from_to_pos(from_pos Vec3, to_pos Vec3) CGameTrace","insertText":"trace_from_to_pos($0, $1)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"EngineWeaponConfigEntry","kind":22,"detail":"struct EngineWeaponConfigEntry","insertText":"EngineWeaponConfigEntry{def_idx:$1, engine_bones_list:$2, engine_force_bone_id:$3, engine_pref_bone_id:$4, engine_vhv_mode:$5, engine_vhv_aw_factor:$6, engine_vhv_egs_factor:$7}","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins:$16, glow:$17, glow_color_if_visible:$18, glow_color_if_not_visible:$19, box:$20, box_color_if_visible:$21, box_color_if_not_visible:$22, names:$23, hp:$24, names_color_if_visible:$25, names_color_if_not_visible:$26, weapon_name:$27, weapon_clip:$28, weapon_name_color_if_visible:$29, weapon_name_color_if_not_visible:$30, snapline:$31, snapline_color_if_visible:$32, snapline_color_if_not_visible:$33, crosshair:$34, crosshair_color:$35, radar:$36, watermark:$37, watermark_color:$38, indicator:$39, indicator_color_if_on:$40, indicator_color_if_off:$41, fov_circle:$42, fov_circle_color:$43, chams:$44, chams_is_visible_only:$45, chams_material:$46, chams_color_if_visible:$47, chams_color_if_not_visible:$48, engine:$49, fov:$50, engine_adjust_fov_scope:$51, engine_bones_list:$52, engine_force_bone_id:$53, engine_pref_bone_id:$54, engine_automatic_fire_key:$55, engine_force_bone_key:$56, engine_force_awall_key:$57, engine_automatic_fire_key_toggle:$58, engine_force_awall_key_toggle:$59, engine_force_bone_key_toggle:$60, engine_vhv_mode:$61, engine_vhv_aw_factor:$62, engine_vhv_egs_factor:$63, chockers:$64, chockers_limit:$65}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, present:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8, ret_add_check:$9}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_ret_add_check","kind":3,"detail":"fn hk_ret_add_check(ecx voidptr, edx voidptr, mod_name &u8) bool","insertText":"hk_ret_add_check($0, $1, $2)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, skins:$14, visuals:$15, is_ok:$16}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\"","kind":6,"detail":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\" voidptr","insertText":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\"","insertTextFormat":1},{"label":"retadd_check_add_studio","kind":6,"detail":"retadd_check_add_studio voidptr","insertText":"retadd_check_add_studio","insertTextFormat":1},{"label":"retadd_check_add_mat","kind":6,"detail":"retadd_check_add_mat voidptr","insertText":"retadd_check_add_mat","insertTextFormat":1},{"label":"retadd_check_add_engine","kind":6,"detail":"retadd_check_add_engine voidptr","insertText":"retadd_check_add_engine","insertTextFormat":1},{"label":"dsc_base","kind":6,"detail":"dsc_base","insertText":"dsc_base","insertTextFormat":1},{"label":"a","kind":6,"detail":"a","insertText":"a","insertTextFormat":1},{"label":"b","kind":6,"detail":"mut b","insertText":"b","insertTextFormat":1},{"label":"c","kind":6,"detail":"c","insertText":"c","insertTextFormat":1},{"label":"set_viewmodel_offets_add","kind":6,"detail":"set_viewmodel_offets_add voidptr","insertText":"set_viewmodel_offets_add","insertTextFormat":1},{"label":"get_viewmodel_fov_add","kind":6,"detail":"get_viewmodel_fov_add voidptr","insertText":"get_viewmodel_fov_add","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"retadd_check_add_client","kind":6,"detail":"retadd_check_add_client voidptr","insertText":"retadd_check_add_client","insertTextFormat":1},{"label":"called_once","kind":6,"detail":"mut called_once bool","insertText":"called_once","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1667338654}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338655}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338655}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338655}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338655}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338655}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":33,"method":"textDocument/completion","params":{"position":{"line":179,"character":16},"context":{"triggerCharacter":".","triggerKind":2},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v"}}},"timestamp":1667338656}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":33,"result":[]},"timestamp":1667338656}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338656}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":34,"method":"textDocument/completion","params":{"position":{"line":179,"character":17},"context":{"triggerKind":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v"}}},"timestamp":1667338662}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":34,"result":[{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"dev","kind":6,"detail":"dev voidptr","insertText":"dev","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"is_called_once","kind":6,"detail":"mut is_called_once bool","insertText":"is_called_once","insertTextFormat":1},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"trace_from_to_pos","kind":3,"detail":"pub fn trace_from_to_pos(from_pos Vec3, to_pos Vec3) CGameTrace","insertText":"trace_from_to_pos($0, $1)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"EngineWeaponConfigEntry","kind":22,"detail":"struct EngineWeaponConfigEntry","insertText":"EngineWeaponConfigEntry{def_idx:$1, engine_bones_list:$2, engine_force_bone_id:$3, engine_pref_bone_id:$4, engine_vhv_mode:$5, engine_vhv_aw_factor:$6, engine_vhv_egs_factor:$7}","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins:$16, glow:$17, glow_color_if_visible:$18, glow_color_if_not_visible:$19, box:$20, box_color_if_visible:$21, box_color_if_not_visible:$22, names:$23, hp:$24, names_color_if_visible:$25, names_color_if_not_visible:$26, weapon_name:$27, weapon_clip:$28, weapon_name_color_if_visible:$29, weapon_name_color_if_not_visible:$30, snapline:$31, snapline_color_if_visible:$32, snapline_color_if_not_visible:$33, crosshair:$34, crosshair_color:$35, radar:$36, watermark:$37, watermark_color:$38, indicator:$39, indicator_color_if_on:$40, indicator_color_if_off:$41, fov_circle:$42, fov_circle_color:$43, chams:$44, chams_is_visible_only:$45, chams_material:$46, chams_color_if_visible:$47, chams_color_if_not_visible:$48, engine:$49, fov:$50, engine_adjust_fov_scope:$51, engine_bones_list:$52, engine_force_bone_id:$53, engine_pref_bone_id:$54, engine_automatic_fire_key:$55, engine_force_bone_key:$56, engine_force_awall_key:$57, engine_automatic_fire_key_toggle:$58, engine_force_awall_key_toggle:$59, engine_force_bone_key_toggle:$60, engine_vhv_mode:$61, engine_vhv_aw_factor:$62, engine_vhv_egs_factor:$63, chockers:$64, chockers_limit:$65}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, present:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8, ret_add_check:$9}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_ret_add_check","kind":3,"detail":"fn hk_ret_add_check(ecx voidptr, edx voidptr, mod_name &u8) bool","insertText":"hk_ret_add_check($0, $1, $2)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, skins:$14, visuals:$15, is_ok:$16}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\"","kind":6,"detail":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\" voidptr","insertText":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\"","insertTextFormat":1},{"label":"retadd_check_add_studio","kind":6,"detail":"retadd_check_add_studio voidptr","insertText":"retadd_check_add_studio","insertTextFormat":1},{"label":"retadd_check_add_mat","kind":6,"detail":"retadd_check_add_mat voidptr","insertText":"retadd_check_add_mat","insertTextFormat":1},{"label":"retadd_check_add_engine","kind":6,"detail":"retadd_check_add_engine voidptr","insertText":"retadd_check_add_engine","insertTextFormat":1},{"label":"dsc_base","kind":6,"detail":"dsc_base","insertText":"dsc_base","insertTextFormat":1},{"label":"a","kind":6,"detail":"a","insertText":"a","insertTextFormat":1},{"label":"b","kind":6,"detail":"mut b","insertText":"b","insertTextFormat":1},{"label":"c","kind":6,"detail":"c","insertText":"c","insertTextFormat":1},{"label":"set_viewmodel_offets_add","kind":6,"detail":"set_viewmodel_offets_add voidptr","insertText":"set_viewmodel_offets_add","insertTextFormat":1},{"label":"get_viewmodel_fov_add","kind":6,"detail":"get_viewmodel_fov_add voidptr","insertText":"get_viewmodel_fov_add","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"retadd_check_add_client","kind":6,"detail":"retadd_check_add_client voidptr","insertText":"retadd_check_add_client","insertTextFormat":1},{"label":"called_once","kind":6,"detail":"mut called_once bool","insertText":"called_once","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1667338662}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338662}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338662}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338662}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338662}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338663}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":35,"method":"textDocument/completion","params":{"position":{"line":179,"character":22},"context":{"triggerCharacter":".","triggerKind":2},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v"}}},"timestamp":1667338663}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":35,"result":[]},"timestamp":1667338663}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338663}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338687}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338718}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/d3d/d3d.v","diagnostics":[]}},"timestamp":1667338726}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/d3d/d3d.v","diagnostics":[]}},"timestamp":1667338726}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338758}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338758}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338758}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338759}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":36,"method":"textDocument/completion","params":{"position":{"line":176,"character":3},"context":{"triggerKind":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v"}}},"timestamp":1667338759}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":36,"result":[{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"dev","kind":6,"detail":"dev voidptr","insertText":"dev","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx","insertText":"app_ctx","insertTextFormat":1},{"label":"is_called_once","kind":6,"detail":"mut is_called_once bool","insertText":"is_called_once","insertTextFormat":1},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"trace_from_to_pos","kind":3,"detail":"pub fn trace_from_to_pos(from_pos Vec3, to_pos Vec3) CGameTrace","insertText":"trace_from_to_pos($0, $1)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"EngineWeaponConfigEntry","kind":22,"detail":"struct EngineWeaponConfigEntry","insertText":"EngineWeaponConfigEntry{def_idx:$1, engine_bones_list:$2, engine_force_bone_id:$3, engine_pref_bone_id:$4, engine_vhv_mode:$5, engine_vhv_aw_factor:$6, engine_vhv_egs_factor:$7}","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins:$16, glow:$17, glow_color_if_visible:$18, glow_color_if_not_visible:$19, box:$20, box_color_if_visible:$21, box_color_if_not_visible:$22, names:$23, hp:$24, names_color_if_visible:$25, names_color_if_not_visible:$26, weapon_name:$27, weapon_clip:$28, weapon_name_color_if_visible:$29, weapon_name_color_if_not_visible:$30, snapline:$31, snapline_color_if_visible:$32, snapline_color_if_not_visible:$33, crosshair:$34, crosshair_color:$35, radar:$36, watermark:$37, watermark_color:$38, indicator:$39, indicator_color_if_on:$40, indicator_color_if_off:$41, fov_circle:$42, fov_circle_color:$43, chams:$44, chams_is_visible_only:$45, chams_material:$46, chams_color_if_visible:$47, chams_color_if_not_visible:$48, engine:$49, fov:$50, engine_adjust_fov_scope:$51, engine_bones_list:$52, engine_force_bone_id:$53, engine_pref_bone_id:$54, engine_automatic_fire_key:$55, engine_force_bone_key:$56, engine_force_awall_key:$57, engine_automatic_fire_key_toggle:$58, engine_force_awall_key_toggle:$59, engine_force_bone_key_toggle:$60, engine_vhv_mode:$61, engine_vhv_aw_factor:$62, engine_vhv_egs_factor:$63, chockers:$64, chockers_limit:$65}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, present:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8, ret_add_check:$9}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_ret_add_check","kind":3,"detail":"fn hk_ret_add_check(ecx voidptr, edx voidptr, mod_name &u8) bool","insertText":"hk_ret_add_check($0, $1, $2)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, skins:$14, visuals:$15, is_ok:$16}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\"","kind":6,"detail":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\" voidptr","insertText":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\"","insertTextFormat":1},{"label":"retadd_check_add_studio","kind":6,"detail":"retadd_check_add_studio voidptr","insertText":"retadd_check_add_studio","insertTextFormat":1},{"label":"retadd_check_add_mat","kind":6,"detail":"retadd_check_add_mat voidptr","insertText":"retadd_check_add_mat","insertTextFormat":1},{"label":"retadd_check_add_engine","kind":6,"detail":"retadd_check_add_engine voidptr","insertText":"retadd_check_add_engine","insertTextFormat":1},{"label":"dsc_base","kind":6,"detail":"dsc_base","insertText":"dsc_base","insertTextFormat":1},{"label":"a","kind":6,"detail":"a","insertText":"a","insertTextFormat":1},{"label":"b","kind":6,"detail":"mut b","insertText":"b","insertTextFormat":1},{"label":"c","kind":6,"detail":"c","insertText":"c","insertTextFormat":1},{"label":"set_viewmodel_offets_add","kind":6,"detail":"set_viewmodel_offets_add voidptr","insertText":"set_viewmodel_offets_add","insertTextFormat":1},{"label":"get_viewmodel_fov_add","kind":6,"detail":"get_viewmodel_fov_add voidptr","insertText":"get_viewmodel_fov_add","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"retadd_check_add_client","kind":6,"detail":"retadd_check_add_client voidptr","insertText":"retadd_check_add_client","insertTextFormat":1},{"label":"called_once","kind":6,"detail":"mut called_once bool","insertText":"called_once","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1667338759}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338759}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338759}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338759}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338759}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338760}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338760}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":37,"method":"textDocument/completion","params":{"position":{"line":176,"character":10},"context":{"triggerCharacter":".","triggerKind":2},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v"}}},"timestamp":1667338760}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":37,"result":[]},"timestamp":1667338760}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338760}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":38,"method":"textDocument/completion","params":{"position":{"line":176,"character":11},"context":{"triggerKind":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v"}}},"timestamp":1667338762}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":38,"result":[{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"dev","kind":6,"detail":"dev voidptr","insertText":"dev","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx","insertText":"app_ctx","insertTextFormat":1},{"label":"is_called_once","kind":6,"detail":"mut is_called_once bool","insertText":"is_called_once","insertTextFormat":1},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"trace_from_to_pos","kind":3,"detail":"pub fn trace_from_to_pos(from_pos Vec3, to_pos Vec3) CGameTrace","insertText":"trace_from_to_pos($0, $1)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"EngineWeaponConfigEntry","kind":22,"detail":"struct EngineWeaponConfigEntry","insertText":"EngineWeaponConfigEntry{def_idx:$1, engine_bones_list:$2, engine_force_bone_id:$3, engine_pref_bone_id:$4, engine_vhv_mode:$5, engine_vhv_aw_factor:$6, engine_vhv_egs_factor:$7}","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins:$16, glow:$17, glow_color_if_visible:$18, glow_color_if_not_visible:$19, box:$20, box_color_if_visible:$21, box_color_if_not_visible:$22, names:$23, hp:$24, names_color_if_visible:$25, names_color_if_not_visible:$26, weapon_name:$27, weapon_clip:$28, weapon_name_color_if_visible:$29, weapon_name_color_if_not_visible:$30, snapline:$31, snapline_color_if_visible:$32, snapline_color_if_not_visible:$33, crosshair:$34, crosshair_color:$35, radar:$36, watermark:$37, watermark_color:$38, indicator:$39, indicator_color_if_on:$40, indicator_color_if_off:$41, fov_circle:$42, fov_circle_color:$43, chams:$44, chams_is_visible_only:$45, chams_material:$46, chams_color_if_visible:$47, chams_color_if_not_visible:$48, engine:$49, fov:$50, engine_adjust_fov_scope:$51, engine_bones_list:$52, engine_force_bone_id:$53, engine_pref_bone_id:$54, engine_automatic_fire_key:$55, engine_force_bone_key:$56, engine_force_awall_key:$57, engine_automatic_fire_key_toggle:$58, engine_force_awall_key_toggle:$59, engine_force_bone_key_toggle:$60, engine_vhv_mode:$61, engine_vhv_aw_factor:$62, engine_vhv_egs_factor:$63, chockers:$64, chockers_limit:$65}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, present:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8, ret_add_check:$9}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_ret_add_check","kind":3,"detail":"fn hk_ret_add_check(ecx voidptr, edx voidptr, mod_name &u8) bool","insertText":"hk_ret_add_check($0, $1, $2)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, skins:$14, visuals:$15, is_ok:$16}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\"","kind":6,"detail":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\" voidptr","insertText":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\"","insertTextFormat":1},{"label":"retadd_check_add_studio","kind":6,"detail":"retadd_check_add_studio voidptr","insertText":"retadd_check_add_studio","insertTextFormat":1},{"label":"retadd_check_add_mat","kind":6,"detail":"retadd_check_add_mat voidptr","insertText":"retadd_check_add_mat","insertTextFormat":1},{"label":"retadd_check_add_engine","kind":6,"detail":"retadd_check_add_engine voidptr","insertText":"retadd_check_add_engine","insertTextFormat":1},{"label":"dsc_base","kind":6,"detail":"dsc_base","insertText":"dsc_base","insertTextFormat":1},{"label":"a","kind":6,"detail":"a","insertText":"a","insertTextFormat":1},{"label":"b","kind":6,"detail":"mut b","insertText":"b","insertTextFormat":1},{"label":"c","kind":6,"detail":"c","insertText":"c","insertTextFormat":1},{"label":"set_viewmodel_offets_add","kind":6,"detail":"set_viewmodel_offets_add voidptr","insertText":"set_viewmodel_offets_add","insertTextFormat":1},{"label":"get_viewmodel_fov_add","kind":6,"detail":"get_viewmodel_fov_add voidptr","insertText":"get_viewmodel_fov_add","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"retadd_check_add_client","kind":6,"detail":"retadd_check_add_client voidptr","insertText":"retadd_check_add_client","insertTextFormat":1},{"label":"called_once","kind":6,"detail":"mut called_once bool","insertText":"called_once","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1667338762}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338762}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338763}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338763}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338763}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338764}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338764}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":39,"method":"textDocument/completion","params":{"position":{"line":176,"character":15},"context":{"triggerKind":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v"}}},"timestamp":1667338764}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":39,"result":[{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"dev","kind":6,"detail":"dev voidptr","insertText":"dev","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx","insertText":"app_ctx","insertTextFormat":1},{"label":"is_called_once","kind":6,"detail":"mut is_called_once bool","insertText":"is_called_once","insertTextFormat":1},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"trace_from_to_pos","kind":3,"detail":"pub fn trace_from_to_pos(from_pos Vec3, to_pos Vec3) CGameTrace","insertText":"trace_from_to_pos($0, $1)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"EngineWeaponConfigEntry","kind":22,"detail":"struct EngineWeaponConfigEntry","insertText":"EngineWeaponConfigEntry{def_idx:$1, engine_bones_list:$2, engine_force_bone_id:$3, engine_pref_bone_id:$4, engine_vhv_mode:$5, engine_vhv_aw_factor:$6, engine_vhv_egs_factor:$7}","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins:$16, glow:$17, glow_color_if_visible:$18, glow_color_if_not_visible:$19, box:$20, box_color_if_visible:$21, box_color_if_not_visible:$22, names:$23, hp:$24, names_color_if_visible:$25, names_color_if_not_visible:$26, weapon_name:$27, weapon_clip:$28, weapon_name_color_if_visible:$29, weapon_name_color_if_not_visible:$30, snapline:$31, snapline_color_if_visible:$32, snapline_color_if_not_visible:$33, crosshair:$34, crosshair_color:$35, radar:$36, watermark:$37, watermark_color:$38, indicator:$39, indicator_color_if_on:$40, indicator_color_if_off:$41, fov_circle:$42, fov_circle_color:$43, chams:$44, chams_is_visible_only:$45, chams_material:$46, chams_color_if_visible:$47, chams_color_if_not_visible:$48, engine:$49, fov:$50, engine_adjust_fov_scope:$51, engine_bones_list:$52, engine_force_bone_id:$53, engine_pref_bone_id:$54, engine_automatic_fire_key:$55, engine_force_bone_key:$56, engine_force_awall_key:$57, engine_automatic_fire_key_toggle:$58, engine_force_awall_key_toggle:$59, engine_force_bone_key_toggle:$60, engine_vhv_mode:$61, engine_vhv_aw_factor:$62, engine_vhv_egs_factor:$63, chockers:$64, chockers_limit:$65}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, present:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8, ret_add_check:$9}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_ret_add_check","kind":3,"detail":"fn hk_ret_add_check(ecx voidptr, edx voidptr, mod_name &u8) bool","insertText":"hk_ret_add_check($0, $1, $2)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, skins:$14, visuals:$15, is_ok:$16}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\"","kind":6,"detail":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\" voidptr","insertText":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\"","insertTextFormat":1},{"label":"retadd_check_add_studio","kind":6,"detail":"retadd_check_add_studio voidptr","insertText":"retadd_check_add_studio","insertTextFormat":1},{"label":"retadd_check_add_mat","kind":6,"detail":"retadd_check_add_mat voidptr","insertText":"retadd_check_add_mat","insertTextFormat":1},{"label":"retadd_check_add_engine","kind":6,"detail":"retadd_check_add_engine voidptr","insertText":"retadd_check_add_engine","insertTextFormat":1},{"label":"dsc_base","kind":6,"detail":"dsc_base","insertText":"dsc_base","insertTextFormat":1},{"label":"a","kind":6,"detail":"a","insertText":"a","insertTextFormat":1},{"label":"b","kind":6,"detail":"mut b","insertText":"b","insertTextFormat":1},{"label":"c","kind":6,"detail":"c","insertText":"c","insertTextFormat":1},{"label":"set_viewmodel_offets_add","kind":6,"detail":"set_viewmodel_offets_add voidptr","insertText":"set_viewmodel_offets_add","insertTextFormat":1},{"label":"get_viewmodel_fov_add","kind":6,"detail":"get_viewmodel_fov_add voidptr","insertText":"get_viewmodel_fov_add","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"retadd_check_add_client","kind":6,"detail":"retadd_check_add_client voidptr","insertText":"retadd_check_add_client","insertTextFormat":1},{"label":"called_once","kind":6,"detail":"mut called_once bool","insertText":"called_once","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1667338764}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338764}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338765}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338765}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338766}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338766}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338766}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":40,"method":"textDocument/completion","params":{"position":{"line":176,"character":13},"context":{"triggerKind":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v"}}},"timestamp":1667338766}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":40,"result":[{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"dev","kind":6,"detail":"dev voidptr","insertText":"dev","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx","insertText":"app_ctx","insertTextFormat":1},{"label":"is_called_once","kind":6,"detail":"mut is_called_once bool","insertText":"is_called_once","insertTextFormat":1},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"trace_from_to_pos","kind":3,"detail":"pub fn trace_from_to_pos(from_pos Vec3, to_pos Vec3) CGameTrace","insertText":"trace_from_to_pos($0, $1)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"EngineWeaponConfigEntry","kind":22,"detail":"struct EngineWeaponConfigEntry","insertText":"EngineWeaponConfigEntry{def_idx:$1, engine_bones_list:$2, engine_force_bone_id:$3, engine_pref_bone_id:$4, engine_vhv_mode:$5, engine_vhv_aw_factor:$6, engine_vhv_egs_factor:$7}","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins:$16, glow:$17, glow_color_if_visible:$18, glow_color_if_not_visible:$19, box:$20, box_color_if_visible:$21, box_color_if_not_visible:$22, names:$23, hp:$24, names_color_if_visible:$25, names_color_if_not_visible:$26, weapon_name:$27, weapon_clip:$28, weapon_name_color_if_visible:$29, weapon_name_color_if_not_visible:$30, snapline:$31, snapline_color_if_visible:$32, snapline_color_if_not_visible:$33, crosshair:$34, crosshair_color:$35, radar:$36, watermark:$37, watermark_color:$38, indicator:$39, indicator_color_if_on:$40, indicator_color_if_off:$41, fov_circle:$42, fov_circle_color:$43, chams:$44, chams_is_visible_only:$45, chams_material:$46, chams_color_if_visible:$47, chams_color_if_not_visible:$48, engine:$49, fov:$50, engine_adjust_fov_scope:$51, engine_bones_list:$52, engine_force_bone_id:$53, engine_pref_bone_id:$54, engine_automatic_fire_key:$55, engine_force_bone_key:$56, engine_force_awall_key:$57, engine_automatic_fire_key_toggle:$58, engine_force_awall_key_toggle:$59, engine_force_bone_key_toggle:$60, engine_vhv_mode:$61, engine_vhv_aw_factor:$62, engine_vhv_egs_factor:$63, chockers:$64, chockers_limit:$65}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, present:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8, ret_add_check:$9}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_ret_add_check","kind":3,"detail":"fn hk_ret_add_check(ecx voidptr, edx voidptr, mod_name &u8) bool","insertText":"hk_ret_add_check($0, $1, $2)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, skins:$14, visuals:$15, is_ok:$16}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\"","kind":6,"detail":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\" voidptr","insertText":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\"","insertTextFormat":1},{"label":"retadd_check_add_studio","kind":6,"detail":"retadd_check_add_studio voidptr","insertText":"retadd_check_add_studio","insertTextFormat":1},{"label":"retadd_check_add_mat","kind":6,"detail":"retadd_check_add_mat voidptr","insertText":"retadd_check_add_mat","insertTextFormat":1},{"label":"retadd_check_add_engine","kind":6,"detail":"retadd_check_add_engine voidptr","insertText":"retadd_check_add_engine","insertTextFormat":1},{"label":"dsc_base","kind":6,"detail":"dsc_base","insertText":"dsc_base","insertTextFormat":1},{"label":"a","kind":6,"detail":"a","insertText":"a","insertTextFormat":1},{"label":"b","kind":6,"detail":"mut b","insertText":"b","insertTextFormat":1},{"label":"c","kind":6,"detail":"c","insertText":"c","insertTextFormat":1},{"label":"set_viewmodel_offets_add","kind":6,"detail":"set_viewmodel_offets_add voidptr","insertText":"set_viewmodel_offets_add","insertTextFormat":1},{"label":"get_viewmodel_fov_add","kind":6,"detail":"get_viewmodel_fov_add voidptr","insertText":"get_viewmodel_fov_add","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"retadd_check_add_client","kind":6,"detail":"retadd_check_add_client voidptr","insertText":"retadd_check_add_client","insertTextFormat":1},{"label":"called_once","kind":6,"detail":"mut called_once bool","insertText":"called_once","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1667338766}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338766}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338767}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338767}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":41,"method":"textDocument/completion","params":{"position":{"line":176,"character":14},"context":{"triggerCharacter":".","triggerKind":2},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v"}}},"timestamp":1667338767}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":41,"result":[]},"timestamp":1667338767}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338767}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":42,"method":"textDocument/completion","params":{"position":{"line":176,"character":15},"context":{"triggerKind":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v"}}},"timestamp":1667338768}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":42,"result":[{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"dev","kind":6,"detail":"dev voidptr","insertText":"dev","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx","insertText":"app_ctx","insertTextFormat":1},{"label":"is_called_once","kind":6,"detail":"mut is_called_once bool","insertText":"is_called_once","insertTextFormat":1},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"trace_from_to_pos","kind":3,"detail":"pub fn trace_from_to_pos(from_pos Vec3, to_pos Vec3) CGameTrace","insertText":"trace_from_to_pos($0, $1)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"EngineWeaponConfigEntry","kind":22,"detail":"struct EngineWeaponConfigEntry","insertText":"EngineWeaponConfigEntry{def_idx:$1, engine_bones_list:$2, engine_force_bone_id:$3, engine_pref_bone_id:$4, engine_vhv_mode:$5, engine_vhv_aw_factor:$6, engine_vhv_egs_factor:$7}","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins:$16, glow:$17, glow_color_if_visible:$18, glow_color_if_not_visible:$19, box:$20, box_color_if_visible:$21, box_color_if_not_visible:$22, names:$23, hp:$24, names_color_if_visible:$25, names_color_if_not_visible:$26, weapon_name:$27, weapon_clip:$28, weapon_name_color_if_visible:$29, weapon_name_color_if_not_visible:$30, snapline:$31, snapline_color_if_visible:$32, snapline_color_if_not_visible:$33, crosshair:$34, crosshair_color:$35, radar:$36, watermark:$37, watermark_color:$38, indicator:$39, indicator_color_if_on:$40, indicator_color_if_off:$41, fov_circle:$42, fov_circle_color:$43, chams:$44, chams_is_visible_only:$45, chams_material:$46, chams_color_if_visible:$47, chams_color_if_not_visible:$48, engine:$49, fov:$50, engine_adjust_fov_scope:$51, engine_bones_list:$52, engine_force_bone_id:$53, engine_pref_bone_id:$54, engine_automatic_fire_key:$55, engine_force_bone_key:$56, engine_force_awall_key:$57, engine_automatic_fire_key_toggle:$58, engine_force_awall_key_toggle:$59, engine_force_bone_key_toggle:$60, engine_vhv_mode:$61, engine_vhv_aw_factor:$62, engine_vhv_egs_factor:$63, chockers:$64, chockers_limit:$65}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, present:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8, ret_add_check:$9}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_ret_add_check","kind":3,"detail":"fn hk_ret_add_check(ecx voidptr, edx voidptr, mod_name &u8) bool","insertText":"hk_ret_add_check($0, $1, $2)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, skins:$14, visuals:$15, is_ok:$16}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\"","kind":6,"detail":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\" voidptr","insertText":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\"","insertTextFormat":1},{"label":"retadd_check_add_studio","kind":6,"detail":"retadd_check_add_studio voidptr","insertText":"retadd_check_add_studio","insertTextFormat":1},{"label":"retadd_check_add_mat","kind":6,"detail":"retadd_check_add_mat voidptr","insertText":"retadd_check_add_mat","insertTextFormat":1},{"label":"retadd_check_add_engine","kind":6,"detail":"retadd_check_add_engine voidptr","insertText":"retadd_check_add_engine","insertTextFormat":1},{"label":"dsc_base","kind":6,"detail":"dsc_base","insertText":"dsc_base","insertTextFormat":1},{"label":"a","kind":6,"detail":"a","insertText":"a","insertTextFormat":1},{"label":"b","kind":6,"detail":"mut b","insertText":"b","insertTextFormat":1},{"label":"c","kind":6,"detail":"c","insertText":"c","insertTextFormat":1},{"label":"set_viewmodel_offets_add","kind":6,"detail":"set_viewmodel_offets_add voidptr","insertText":"set_viewmodel_offets_add","insertTextFormat":1},{"label":"get_viewmodel_fov_add","kind":6,"detail":"get_viewmodel_fov_add voidptr","insertText":"get_viewmodel_fov_add","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"retadd_check_add_client","kind":6,"detail":"retadd_check_add_client voidptr","insertText":"retadd_check_add_client","insertTextFormat":1},{"label":"called_once","kind":6,"detail":"mut called_once bool","insertText":"called_once","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1667338768}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338768}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338768}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338768}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338768}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338768}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338768}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":43,"method":"textDocument/completion","params":{"position":{"line":176,"character":21},"context":{"triggerCharacter":" ","triggerKind":2},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v"}}},"timestamp":1667338769}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":43,"result":[]},"timestamp":1667338769}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338769}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":44,"method":"textDocument/completion","params":{"position":{"line":176,"character":22},"context":{"triggerCharacter":"=","triggerKind":2},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v"}}},"timestamp":1667338769}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":44,"result":[]},"timestamp":1667338769}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338769}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":45,"method":"textDocument/completion","params":{"position":{"line":176,"character":23},"context":{"triggerCharacter":" ","triggerKind":2},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v"}}},"timestamp":1667338769}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":45,"result":[]},"timestamp":1667338769}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338769}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":46,"method":"textDocument/completion","params":{"position":{"line":176,"character":24},"context":{"triggerKind":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v"}}},"timestamp":1667338770}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":46,"result":[{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"dev","kind":6,"detail":"dev voidptr","insertText":"dev","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx","insertText":"app_ctx","insertTextFormat":1},{"label":"is_called_once","kind":6,"detail":"mut is_called_once bool","insertText":"is_called_once","insertTextFormat":1},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"trace_from_to_pos","kind":3,"detail":"pub fn trace_from_to_pos(from_pos Vec3, to_pos Vec3) CGameTrace","insertText":"trace_from_to_pos($0, $1)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"EngineWeaponConfigEntry","kind":22,"detail":"struct EngineWeaponConfigEntry","insertText":"EngineWeaponConfigEntry{def_idx:$1, engine_bones_list:$2, engine_force_bone_id:$3, engine_pref_bone_id:$4, engine_vhv_mode:$5, engine_vhv_aw_factor:$6, engine_vhv_egs_factor:$7}","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins:$16, glow:$17, glow_color_if_visible:$18, glow_color_if_not_visible:$19, box:$20, box_color_if_visible:$21, box_color_if_not_visible:$22, names:$23, hp:$24, names_color_if_visible:$25, names_color_if_not_visible:$26, weapon_name:$27, weapon_clip:$28, weapon_name_color_if_visible:$29, weapon_name_color_if_not_visible:$30, snapline:$31, snapline_color_if_visible:$32, snapline_color_if_not_visible:$33, crosshair:$34, crosshair_color:$35, radar:$36, watermark:$37, watermark_color:$38, indicator:$39, indicator_color_if_on:$40, indicator_color_if_off:$41, fov_circle:$42, fov_circle_color:$43, chams:$44, chams_is_visible_only:$45, chams_material:$46, chams_color_if_visible:$47, chams_color_if_not_visible:$48, engine:$49, fov:$50, engine_adjust_fov_scope:$51, engine_bones_list:$52, engine_force_bone_id:$53, engine_pref_bone_id:$54, engine_automatic_fire_key:$55, engine_force_bone_key:$56, engine_force_awall_key:$57, engine_automatic_fire_key_toggle:$58, engine_force_awall_key_toggle:$59, engine_force_bone_key_toggle:$60, engine_vhv_mode:$61, engine_vhv_aw_factor:$62, engine_vhv_egs_factor:$63, chockers:$64, chockers_limit:$65}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, present:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8, ret_add_check:$9}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_ret_add_check","kind":3,"detail":"fn hk_ret_add_check(ecx voidptr, edx voidptr, mod_name &u8) bool","insertText":"hk_ret_add_check($0, $1, $2)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, skins:$14, visuals:$15, is_ok:$16}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\"","kind":6,"detail":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\" voidptr","insertText":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\"","insertTextFormat":1},{"label":"retadd_check_add_studio","kind":6,"detail":"retadd_check_add_studio voidptr","insertText":"retadd_check_add_studio","insertTextFormat":1},{"label":"retadd_check_add_mat","kind":6,"detail":"retadd_check_add_mat voidptr","insertText":"retadd_check_add_mat","insertTextFormat":1},{"label":"retadd_check_add_engine","kind":6,"detail":"retadd_check_add_engine voidptr","insertText":"retadd_check_add_engine","insertTextFormat":1},{"label":"dsc_base","kind":6,"detail":"dsc_base","insertText":"dsc_base","insertTextFormat":1},{"label":"a","kind":6,"detail":"a","insertText":"a","insertTextFormat":1},{"label":"b","kind":6,"detail":"mut b","insertText":"b","insertTextFormat":1},{"label":"c","kind":6,"detail":"c","insertText":"c","insertTextFormat":1},{"label":"set_viewmodel_offets_add","kind":6,"detail":"set_viewmodel_offets_add voidptr","insertText":"set_viewmodel_offets_add","insertTextFormat":1},{"label":"get_viewmodel_fov_add","kind":6,"detail":"get_viewmodel_fov_add voidptr","insertText":"get_viewmodel_fov_add","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"retadd_check_add_client","kind":6,"detail":"retadd_check_add_client voidptr","insertText":"retadd_check_add_client","insertTextFormat":1},{"label":"called_once","kind":6,"detail":"mut called_once bool","insertText":"called_once","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1667338770}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338770}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338770}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338770}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338770}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338771}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338783}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1667338789}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1667338789}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1667338796}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1667338797}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/d3d/d3d.v","diagnostics":[]}},"timestamp":1667338814}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/d3d/d3d.v","diagnostics":[]}},"timestamp":1667338814}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/d3d/d3d.v","diagnostics":[]}},"timestamp":1667338815}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/d3d/d3d.v","diagnostics":[]}},"timestamp":1667338816}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/d3d/d3d.v","diagnostics":[{"range":{"start":{"line":274,"character":3},"end":{"line":274,"character":3}},"severity":1,"code":"","source":"","message":"unknown method or field: `golphook.d3d.D3d9.get_device`.","relatedInformation":[]}]}},"timestamp":1667338816}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/d3d/d3d.v","diagnostics":[]}},"timestamp":1667338817}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/d3d/d3d.v","diagnostics":[{"range":{"start":{"line":274,"character":3},"end":{"line":274,"character":3}},"severity":1,"code":"","source":"","message":"unknown method or field: `golphook.d3d.D3d9.get_device`.","relatedInformation":[]}]}},"timestamp":1667338817}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338834}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338834}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338836}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338837}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338838}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338845}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338845}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338846}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338847}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667338884}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339019}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/d3d/d3d.v","diagnostics":[]}},"timestamp":1667339032}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/d3d/d3d.v","diagnostics":[]}},"timestamp":1667339032}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/d3d/d3d.v","diagnostics":[]}},"timestamp":1667339033}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/d3d/d3d.v","diagnostics":[]}},"timestamp":1667339033}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/d3d/d3d.v","diagnostics":[]}},"timestamp":1667339036}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/d3d/d3d.v","diagnostics":[]}},"timestamp":1667339036}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/d3d/d3d.v","diagnostics":[]}},"timestamp":1667339036}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/d3d/d3d.v","diagnostics":[]}},"timestamp":1667339036}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/d3d/d3d.v","diagnostics":[]}},"timestamp":1667339038}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/d3d/d3d.v","diagnostics":[]}},"timestamp":1667339038}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1667339042}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1667339042}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1667339042}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":47,"method":"textDocument/completion","params":{"position":{"line":67,"character":2},"context":{"triggerKind":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v"}}},"timestamp":1667339042}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":47,"result":[{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"vmod","kind":9,"detail":"","insertText":"vmod","insertTextFormat":1},{"label":"d3d","kind":9,"detail":"","insertText":"d3d","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"a","kind":6,"detail":"mut a App","insertText":"a","insertTextFormat":1},{"label":"with_module_handle","kind":6,"detail":"with_module_handle voidptr","insertText":"with_module_handle","insertTextFormat":1},{"label":"modules","kind":6,"detail":"mut modules []string","insertText":"modules","insertTextFormat":1},{"label":"a","kind":6,"detail":"mut a App","insertText":"a","insertTextFormat":1},{"label":"with_module_handle","kind":6,"detail":"with_module_handle voidptr","insertText":"with_module_handle","insertTextFormat":1},{"label":"modules","kind":6,"detail":"mut modules []string","insertText":"modules","insertTextFormat":1},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"trace_from_to_pos","kind":3,"detail":"pub fn trace_from_to_pos(from_pos Vec3, to_pos Vec3) CGameTrace","insertText":"trace_from_to_pos($0, $1)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"EngineWeaponConfigEntry","kind":22,"detail":"struct EngineWeaponConfigEntry","insertText":"EngineWeaponConfigEntry{def_idx:$1, engine_bones_list:$2, engine_force_bone_id:$3, engine_pref_bone_id:$4, engine_vhv_mode:$5, engine_vhv_aw_factor:$6, engine_vhv_egs_factor:$7}","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins:$16, glow:$17, glow_color_if_visible:$18, glow_color_if_not_visible:$19, box:$20, box_color_if_visible:$21, box_color_if_not_visible:$22, names:$23, hp:$24, names_color_if_visible:$25, names_color_if_not_visible:$26, weapon_name:$27, weapon_clip:$28, weapon_name_color_if_visible:$29, weapon_name_color_if_not_visible:$30, snapline:$31, snapline_color_if_visible:$32, snapline_color_if_not_visible:$33, crosshair:$34, crosshair_color:$35, radar:$36, watermark:$37, watermark_color:$38, indicator:$39, indicator_color_if_on:$40, indicator_color_if_off:$41, fov_circle:$42, fov_circle_color:$43, chams:$44, chams_is_visible_only:$45, chams_material:$46, chams_color_if_visible:$47, chams_color_if_not_visible:$48, engine:$49, fov:$50, engine_adjust_fov_scope:$51, engine_bones_list:$52, engine_force_bone_id:$53, engine_pref_bone_id:$54, engine_automatic_fire_key:$55, engine_force_bone_key:$56, engine_force_awall_key:$57, engine_automatic_fire_key_toggle:$58, engine_force_awall_key_toggle:$59, engine_force_bone_key_toggle:$60, engine_vhv_mode:$61, engine_vhv_aw_factor:$62, engine_vhv_egs_factor:$63, chockers:$64, chockers_limit:$65}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, present:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8, ret_add_check:$9}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_ret_add_check","kind":3,"detail":"fn hk_ret_add_check(ecx voidptr, edx voidptr, mod_name &u8) bool","insertText":"hk_ret_add_check($0, $1, $2)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, skins:$14, visuals:$15, is_ok:$16}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\"","kind":6,"detail":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\" voidptr","insertText":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\"","insertTextFormat":1},{"label":"retadd_check_add_studio","kind":6,"detail":"retadd_check_add_studio voidptr","insertText":"retadd_check_add_studio","insertTextFormat":1},{"label":"retadd_check_add_mat","kind":6,"detail":"retadd_check_add_mat voidptr","insertText":"retadd_check_add_mat","insertTextFormat":1},{"label":"retadd_check_add_engine","kind":6,"detail":"retadd_check_add_engine voidptr","insertText":"retadd_check_add_engine","insertTextFormat":1},{"label":"dsc_base","kind":6,"detail":"dsc_base","insertText":"dsc_base","insertTextFormat":1},{"label":"a","kind":6,"detail":"a","insertText":"a","insertTextFormat":1},{"label":"b","kind":6,"detail":"mut b","insertText":"b","insertTextFormat":1},{"label":"c","kind":6,"detail":"c","insertText":"c","insertTextFormat":1},{"label":"set_viewmodel_offets_add","kind":6,"detail":"set_viewmodel_offets_add voidptr","insertText":"set_viewmodel_offets_add","insertTextFormat":1},{"label":"get_viewmodel_fov_add","kind":6,"detail":"get_viewmodel_fov_add voidptr","insertText":"get_viewmodel_fov_add","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"retadd_check_add_client","kind":6,"detail":"retadd_check_add_client voidptr","insertText":"retadd_check_add_client","insertTextFormat":1},{"label":"called_once","kind":6,"detail":"mut called_once bool","insertText":"called_once","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1667339042}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1667339042}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1667339043}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":48,"method":"textDocument/completion","params":{"position":{"line":67,"character":2},"context":{"triggerKind":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v"}}},"timestamp":1667339043}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":48,"result":[{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"vmod","kind":9,"detail":"","insertText":"vmod","insertTextFormat":1},{"label":"d3d","kind":9,"detail":"","insertText":"d3d","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"a","kind":6,"detail":"mut a App","insertText":"a","insertTextFormat":1},{"label":"with_module_handle","kind":6,"detail":"with_module_handle voidptr","insertText":"with_module_handle","insertTextFormat":1},{"label":"modules","kind":6,"detail":"mut modules []string","insertText":"modules","insertTextFormat":1},{"label":"a","kind":6,"detail":"mut a App","insertText":"a","insertTextFormat":1},{"label":"with_module_handle","kind":6,"detail":"with_module_handle voidptr","insertText":"with_module_handle","insertTextFormat":1},{"label":"modules","kind":6,"detail":"mut modules []string","insertText":"modules","insertTextFormat":1},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"trace_from_to_pos","kind":3,"detail":"pub fn trace_from_to_pos(from_pos Vec3, to_pos Vec3) CGameTrace","insertText":"trace_from_to_pos($0, $1)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"EngineWeaponConfigEntry","kind":22,"detail":"struct EngineWeaponConfigEntry","insertText":"EngineWeaponConfigEntry{def_idx:$1, engine_bones_list:$2, engine_force_bone_id:$3, engine_pref_bone_id:$4, engine_vhv_mode:$5, engine_vhv_aw_factor:$6, engine_vhv_egs_factor:$7}","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins:$16, glow:$17, glow_color_if_visible:$18, glow_color_if_not_visible:$19, box:$20, box_color_if_visible:$21, box_color_if_not_visible:$22, names:$23, hp:$24, names_color_if_visible:$25, names_color_if_not_visible:$26, weapon_name:$27, weapon_clip:$28, weapon_name_color_if_visible:$29, weapon_name_color_if_not_visible:$30, snapline:$31, snapline_color_if_visible:$32, snapline_color_if_not_visible:$33, crosshair:$34, crosshair_color:$35, radar:$36, watermark:$37, watermark_color:$38, indicator:$39, indicator_color_if_on:$40, indicator_color_if_off:$41, fov_circle:$42, fov_circle_color:$43, chams:$44, chams_is_visible_only:$45, chams_material:$46, chams_color_if_visible:$47, chams_color_if_not_visible:$48, engine:$49, fov:$50, engine_adjust_fov_scope:$51, engine_bones_list:$52, engine_force_bone_id:$53, engine_pref_bone_id:$54, engine_automatic_fire_key:$55, engine_force_bone_key:$56, engine_force_awall_key:$57, engine_automatic_fire_key_toggle:$58, engine_force_awall_key_toggle:$59, engine_force_bone_key_toggle:$60, engine_vhv_mode:$61, engine_vhv_aw_factor:$62, engine_vhv_egs_factor:$63, chockers:$64, chockers_limit:$65}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, present:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8, ret_add_check:$9}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_ret_add_check","kind":3,"detail":"fn hk_ret_add_check(ecx voidptr, edx voidptr, mod_name &u8) bool","insertText":"hk_ret_add_check($0, $1, $2)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, skins:$14, visuals:$15, is_ok:$16}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\"","kind":6,"detail":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\" voidptr","insertText":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\"","insertTextFormat":1},{"label":"retadd_check_add_studio","kind":6,"detail":"retadd_check_add_studio voidptr","insertText":"retadd_check_add_studio","insertTextFormat":1},{"label":"retadd_check_add_mat","kind":6,"detail":"retadd_check_add_mat voidptr","insertText":"retadd_check_add_mat","insertTextFormat":1},{"label":"retadd_check_add_engine","kind":6,"detail":"retadd_check_add_engine voidptr","insertText":"retadd_check_add_engine","insertTextFormat":1},{"label":"dsc_base","kind":6,"detail":"dsc_base","insertText":"dsc_base","insertTextFormat":1},{"label":"a","kind":6,"detail":"a","insertText":"a","insertTextFormat":1},{"label":"b","kind":6,"detail":"mut b","insertText":"b","insertTextFormat":1},{"label":"c","kind":6,"detail":"c","insertText":"c","insertTextFormat":1},{"label":"set_viewmodel_offets_add","kind":6,"detail":"set_viewmodel_offets_add voidptr","insertText":"set_viewmodel_offets_add","insertTextFormat":1},{"label":"get_viewmodel_fov_add","kind":6,"detail":"get_viewmodel_fov_add voidptr","insertText":"get_viewmodel_fov_add","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"retadd_check_add_client","kind":6,"detail":"retadd_check_add_client voidptr","insertText":"retadd_check_add_client","insertTextFormat":1},{"label":"called_once","kind":6,"detail":"mut called_once bool","insertText":"called_once","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1667339043}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1667339043}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":49,"method":"textDocument/completion","params":{"position":{"line":67,"character":3},"context":{"triggerCharacter":".","triggerKind":2},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v"}}},"timestamp":1667339044}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":49,"result":[{"label":"h_mod","kind":10,"detail":"pub mut App.h_mod voidptr","insertText":"h_mod","insertTextFormat":1},{"label":"h_wnd","kind":10,"detail":"pub mut App.h_wnd C.HWND","insertText":"h_wnd","insertTextFormat":1},{"label":"h_client","kind":10,"detail":"pub mut App.h_client voidptr","insertText":"h_client","insertTextFormat":1},{"label":"wnd_height","kind":10,"detail":"pub mut App.wnd_height int","insertText":"wnd_height","insertTextFormat":1},{"label":"wnd_width","kind":10,"detail":"pub mut App.wnd_width int","insertText":"wnd_width","insertTextFormat":1},{"label":"v_mod","kind":10,"detail":"pub mut App.v_mod Manifest","insertText":"v_mod","insertTextFormat":1},{"label":"file","kind":10,"detail":"pub mut App.file &C.FILE","insertText":"file","insertTextFormat":1},{"label":"interfaces","kind":10,"detail":"pub mut App.interfaces &Interfaces","insertText":"interfaces","insertTextFormat":1},{"label":"hooks","kind":10,"detail":"pub mut App.hooks &Hooks","insertText":"hooks","insertTextFormat":1},{"label":"d3d","kind":10,"detail":"pub mut App.d3d &D3d9","insertText":"d3d","insertTextFormat":1},{"label":"rnd_queue","kind":10,"detail":"pub mut App.rnd_queue &RenderQueue","insertText":"rnd_queue","insertTextFormat":1},{"label":"ent_cacher","kind":10,"detail":"pub mut App.ent_cacher &EntityCacher","insertText":"ent_cacher","insertTextFormat":1},{"label":"config","kind":10,"detail":"pub mut App.config &ConfigManager","insertText":"config","insertTextFormat":1},{"label":"skins","kind":10,"detail":"pub mut App.skins &Skins","insertText":"skins","insertTextFormat":1},{"label":"visuals","kind":10,"detail":"pub mut App.visuals &Visuals","insertText":"visuals","insertTextFormat":1},{"label":"is_ok","kind":10,"detail":"pub mut App.is_ok bool","insertText":"is_ok","insertTextFormat":1},{"label":"bootstrap","kind":2,"detail":"pub fn (mut a App) bootstrap(with_module_handle voidptr)","insertText":"bootstrap($0)","insertTextFormat":2},{"label":"release","kind":2,"detail":"pub fn (mut a App) release()","insertText":"release()","insertTextFormat":1},{"label":"on_frame","kind":2,"detail":"pub fn (mut a App) on_frame()","insertText":"on_frame()","insertTextFormat":1}]},"timestamp":1667339044}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1667339044}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1667339044}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1667339044}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1667339045}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1667339045}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":50,"method":"textDocument/completion","params":{"position":{"line":67,"character":13},"context":{"triggerCharacter":"(","triggerKind":2},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v"}}},"timestamp":1667339045}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":50,"result":[{"label":"with_module_handle","kind":6,"detail":"with_module_handle voidptr","insertText":"with_module_handle","insertTextFormat":1},{"label":"with_module_handle","kind":6,"detail":"with_module_handle voidptr","insertText":"with_module_handle","insertTextFormat":1},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"EngineWeaponConfigEntry","kind":22,"detail":"struct EngineWeaponConfigEntry","insertText":"EngineWeaponConfigEntry{def_idx:$1, engine_bones_list:$2, engine_force_bone_id:$3, engine_pref_bone_id:$4, engine_vhv_mode:$5, engine_vhv_aw_factor:$6, engine_vhv_egs_factor:$7}","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins:$16, glow:$17, glow_color_if_visible:$18, glow_color_if_not_visible:$19, box:$20, box_color_if_visible:$21, box_color_if_not_visible:$22, names:$23, hp:$24, names_color_if_visible:$25, names_color_if_not_visible:$26, weapon_name:$27, weapon_clip:$28, weapon_name_color_if_visible:$29, weapon_name_color_if_not_visible:$30, snapline:$31, snapline_color_if_visible:$32, snapline_color_if_not_visible:$33, crosshair:$34, crosshair_color:$35, radar:$36, watermark:$37, watermark_color:$38, indicator:$39, indicator_color_if_on:$40, indicator_color_if_off:$41, fov_circle:$42, fov_circle_color:$43, chams:$44, chams_is_visible_only:$45, chams_material:$46, chams_color_if_visible:$47, chams_color_if_not_visible:$48, engine:$49, fov:$50, engine_adjust_fov_scope:$51, engine_bones_list:$52, engine_force_bone_id:$53, engine_pref_bone_id:$54, engine_automatic_fire_key:$55, engine_force_bone_key:$56, engine_force_awall_key:$57, engine_automatic_fire_key_toggle:$58, engine_force_awall_key_toggle:$59, engine_force_bone_key_toggle:$60, engine_vhv_mode:$61, engine_vhv_aw_factor:$62, engine_vhv_egs_factor:$63, chockers:$64, chockers_limit:$65}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, present:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8, ret_add_check:$9}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, skins:$14, visuals:$15, is_ok:$16}","insertTextFormat":2},{"label":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\"","kind":6,"detail":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\" voidptr","insertText":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\"","insertTextFormat":1},{"label":"retadd_check_add_studio","kind":6,"detail":"retadd_check_add_studio voidptr","insertText":"retadd_check_add_studio","insertTextFormat":1},{"label":"retadd_check_add_mat","kind":6,"detail":"retadd_check_add_mat voidptr","insertText":"retadd_check_add_mat","insertTextFormat":1},{"label":"retadd_check_add_engine","kind":6,"detail":"retadd_check_add_engine voidptr","insertText":"retadd_check_add_engine","insertTextFormat":1},{"label":"dsc_base","kind":6,"detail":"dsc_base","insertText":"dsc_base","insertTextFormat":1},{"label":"a","kind":6,"detail":"a","insertText":"a","insertTextFormat":1},{"label":"b","kind":6,"detail":"mut b","insertText":"b","insertTextFormat":1},{"label":"c","kind":6,"detail":"c","insertText":"c","insertTextFormat":1},{"label":"set_viewmodel_offets_add","kind":6,"detail":"set_viewmodel_offets_add voidptr","insertText":"set_viewmodel_offets_add","insertTextFormat":1},{"label":"get_viewmodel_fov_add","kind":6,"detail":"get_viewmodel_fov_add voidptr","insertText":"get_viewmodel_fov_add","insertTextFormat":1},{"label":"retadd_check_add_client","kind":6,"detail":"retadd_check_add_client voidptr","insertText":"retadd_check_add_client","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1}]},"timestamp":1667339045}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1667339045}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1667339047}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1667339056}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339114}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":51,"method":"textDocument/completion","params":{"position":{"line":185,"character":30},"context":{"triggerCharacter":".","triggerKind":2},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v"}}},"timestamp":1667339128}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":51,"result":[]},"timestamp":1667339128}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339128}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":52,"method":"textDocument/completion","params":{"position":{"line":185,"character":31},"context":{"triggerKind":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v"}}},"timestamp":1667339128}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":52,"result":[{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"dev","kind":6,"detail":"dev voidptr","insertText":"dev","insertTextFormat":1},{"label":"params","kind":6,"detail":"params voidptr","insertText":"params","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx","insertText":"app_ctx","insertTextFormat":1},{"label":"is_called_once","kind":6,"detail":"mut is_called_once bool","insertText":"is_called_once","insertTextFormat":1},{"label":"ret","kind":6,"detail":"ret","insertText":"ret","insertTextFormat":1},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"trace_from_to_pos","kind":3,"detail":"pub fn trace_from_to_pos(from_pos Vec3, to_pos Vec3) CGameTrace","insertText":"trace_from_to_pos($0, $1)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"EngineWeaponConfigEntry","kind":22,"detail":"struct EngineWeaponConfigEntry","insertText":"EngineWeaponConfigEntry{def_idx:$1, engine_bones_list:$2, engine_force_bone_id:$3, engine_pref_bone_id:$4, engine_vhv_mode:$5, engine_vhv_aw_factor:$6, engine_vhv_egs_factor:$7}","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins:$16, glow:$17, glow_color_if_visible:$18, glow_color_if_not_visible:$19, box:$20, box_color_if_visible:$21, box_color_if_not_visible:$22, names:$23, hp:$24, names_color_if_visible:$25, names_color_if_not_visible:$26, weapon_name:$27, weapon_clip:$28, weapon_name_color_if_visible:$29, weapon_name_color_if_not_visible:$30, snapline:$31, snapline_color_if_visible:$32, snapline_color_if_not_visible:$33, crosshair:$34, crosshair_color:$35, radar:$36, watermark:$37, watermark_color:$38, indicator:$39, indicator_color_if_on:$40, indicator_color_if_off:$41, fov_circle:$42, fov_circle_color:$43, chams:$44, chams_is_visible_only:$45, chams_material:$46, chams_color_if_visible:$47, chams_color_if_not_visible:$48, engine:$49, fov:$50, engine_adjust_fov_scope:$51, engine_bones_list:$52, engine_force_bone_id:$53, engine_pref_bone_id:$54, engine_automatic_fire_key:$55, engine_force_bone_key:$56, engine_force_awall_key:$57, engine_automatic_fire_key_toggle:$58, engine_force_awall_key_toggle:$59, engine_force_bone_key_toggle:$60, engine_vhv_mode:$61, engine_vhv_aw_factor:$62, engine_vhv_egs_factor:$63, chockers:$64, chockers_limit:$65}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, present:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8, ret_add_check:$9}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_ret_add_check","kind":3,"detail":"fn hk_ret_add_check(ecx voidptr, edx voidptr, mod_name &u8) bool","insertText":"hk_ret_add_check($0, $1, $2)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, skins:$14, visuals:$15, is_ok:$16}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\"","kind":6,"detail":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\" voidptr","insertText":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\"","insertTextFormat":1},{"label":"retadd_check_add_studio","kind":6,"detail":"retadd_check_add_studio voidptr","insertText":"retadd_check_add_studio","insertTextFormat":1},{"label":"retadd_check_add_mat","kind":6,"detail":"retadd_check_add_mat voidptr","insertText":"retadd_check_add_mat","insertTextFormat":1},{"label":"retadd_check_add_engine","kind":6,"detail":"retadd_check_add_engine voidptr","insertText":"retadd_check_add_engine","insertTextFormat":1},{"label":"dsc_base","kind":6,"detail":"dsc_base","insertText":"dsc_base","insertTextFormat":1},{"label":"a","kind":6,"detail":"a","insertText":"a","insertTextFormat":1},{"label":"b","kind":6,"detail":"mut b","insertText":"b","insertTextFormat":1},{"label":"c","kind":6,"detail":"c","insertText":"c","insertTextFormat":1},{"label":"set_viewmodel_offets_add","kind":6,"detail":"set_viewmodel_offets_add voidptr","insertText":"set_viewmodel_offets_add","insertTextFormat":1},{"label":"get_viewmodel_fov_add","kind":6,"detail":"get_viewmodel_fov_add voidptr","insertText":"get_viewmodel_fov_add","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"retadd_check_add_client","kind":6,"detail":"retadd_check_add_client voidptr","insertText":"retadd_check_add_client","insertTextFormat":1},{"label":"called_once","kind":6,"detail":"mut called_once bool","insertText":"called_once","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1667339128}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339128}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339128}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339129}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339130}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339130}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339130}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339130}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339130}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339131}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339131}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":53,"method":"textDocument/completion","params":{"position":{"line":185,"character":39},"context":{"triggerKind":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v"}}},"timestamp":1667339131}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":53,"result":[{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"dev","kind":6,"detail":"dev voidptr","insertText":"dev","insertTextFormat":1},{"label":"params","kind":6,"detail":"params voidptr","insertText":"params","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx","insertText":"app_ctx","insertTextFormat":1},{"label":"is_called_once","kind":6,"detail":"mut is_called_once bool","insertText":"is_called_once","insertTextFormat":1},{"label":"ret","kind":6,"detail":"ret","insertText":"ret","insertTextFormat":1},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"trace_from_to_pos","kind":3,"detail":"pub fn trace_from_to_pos(from_pos Vec3, to_pos Vec3) CGameTrace","insertText":"trace_from_to_pos($0, $1)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"EngineWeaponConfigEntry","kind":22,"detail":"struct EngineWeaponConfigEntry","insertText":"EngineWeaponConfigEntry{def_idx:$1, engine_bones_list:$2, engine_force_bone_id:$3, engine_pref_bone_id:$4, engine_vhv_mode:$5, engine_vhv_aw_factor:$6, engine_vhv_egs_factor:$7}","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins:$16, glow:$17, glow_color_if_visible:$18, glow_color_if_not_visible:$19, box:$20, box_color_if_visible:$21, box_color_if_not_visible:$22, names:$23, hp:$24, names_color_if_visible:$25, names_color_if_not_visible:$26, weapon_name:$27, weapon_clip:$28, weapon_name_color_if_visible:$29, weapon_name_color_if_not_visible:$30, snapline:$31, snapline_color_if_visible:$32, snapline_color_if_not_visible:$33, crosshair:$34, crosshair_color:$35, radar:$36, watermark:$37, watermark_color:$38, indicator:$39, indicator_color_if_on:$40, indicator_color_if_off:$41, fov_circle:$42, fov_circle_color:$43, chams:$44, chams_is_visible_only:$45, chams_material:$46, chams_color_if_visible:$47, chams_color_if_not_visible:$48, engine:$49, fov:$50, engine_adjust_fov_scope:$51, engine_bones_list:$52, engine_force_bone_id:$53, engine_pref_bone_id:$54, engine_automatic_fire_key:$55, engine_force_bone_key:$56, engine_force_awall_key:$57, engine_automatic_fire_key_toggle:$58, engine_force_awall_key_toggle:$59, engine_force_bone_key_toggle:$60, engine_vhv_mode:$61, engine_vhv_aw_factor:$62, engine_vhv_egs_factor:$63, chockers:$64, chockers_limit:$65}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, present:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8, ret_add_check:$9}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_ret_add_check","kind":3,"detail":"fn hk_ret_add_check(ecx voidptr, edx voidptr, mod_name &u8) bool","insertText":"hk_ret_add_check($0, $1, $2)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, skins:$14, visuals:$15, is_ok:$16}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\"","kind":6,"detail":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\" voidptr","insertText":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\"","insertTextFormat":1},{"label":"retadd_check_add_studio","kind":6,"detail":"retadd_check_add_studio voidptr","insertText":"retadd_check_add_studio","insertTextFormat":1},{"label":"retadd_check_add_mat","kind":6,"detail":"retadd_check_add_mat voidptr","insertText":"retadd_check_add_mat","insertTextFormat":1},{"label":"retadd_check_add_engine","kind":6,"detail":"retadd_check_add_engine voidptr","insertText":"retadd_check_add_engine","insertTextFormat":1},{"label":"dsc_base","kind":6,"detail":"dsc_base","insertText":"dsc_base","insertTextFormat":1},{"label":"a","kind":6,"detail":"a","insertText":"a","insertTextFormat":1},{"label":"b","kind":6,"detail":"mut b","insertText":"b","insertTextFormat":1},{"label":"c","kind":6,"detail":"c","insertText":"c","insertTextFormat":1},{"label":"set_viewmodel_offets_add","kind":6,"detail":"set_viewmodel_offets_add voidptr","insertText":"set_viewmodel_offets_add","insertTextFormat":1},{"label":"get_viewmodel_fov_add","kind":6,"detail":"get_viewmodel_fov_add voidptr","insertText":"get_viewmodel_fov_add","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"retadd_check_add_client","kind":6,"detail":"retadd_check_add_client voidptr","insertText":"retadd_check_add_client","insertTextFormat":1},{"label":"called_once","kind":6,"detail":"mut called_once bool","insertText":"called_once","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1667339131}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339131}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339131}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339132}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339132}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339132}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339133}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339135}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":54,"method":"textDocument/completion","params":{"position":{"line":67,"character":4},"context":{"triggerKind":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v"}}},"timestamp":1667339186}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":54,"result":[{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"offsets","kind":9,"detail":"","insertText":"offsets","insertTextFormat":1},{"label":"vmod","kind":9,"detail":"","insertText":"vmod","insertTextFormat":1},{"label":"d3d","kind":9,"detail":"","insertText":"d3d","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"a","kind":6,"detail":"mut a App","insertText":"a","insertTextFormat":1},{"label":"with_module_handle","kind":6,"detail":"with_module_handle voidptr","insertText":"with_module_handle","insertTextFormat":1},{"label":"modules","kind":6,"detail":"mut modules []string","insertText":"modules","insertTextFormat":1},{"label":"a","kind":6,"detail":"mut a App","insertText":"a","insertTextFormat":1},{"label":"with_module_handle","kind":6,"detail":"with_module_handle voidptr","insertText":"with_module_handle","insertTextFormat":1},{"label":"modules","kind":6,"detail":"mut modules []string","insertText":"modules","insertTextFormat":1},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"trace_from_to_pos","kind":3,"detail":"pub fn trace_from_to_pos(from_pos Vec3, to_pos Vec3) CGameTrace","insertText":"trace_from_to_pos($0, $1)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"EngineWeaponConfigEntry","kind":22,"detail":"struct EngineWeaponConfigEntry","insertText":"EngineWeaponConfigEntry{def_idx:$1, engine_bones_list:$2, engine_force_bone_id:$3, engine_pref_bone_id:$4, engine_vhv_mode:$5, engine_vhv_aw_factor:$6, engine_vhv_egs_factor:$7}","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins:$16, glow:$17, glow_color_if_visible:$18, glow_color_if_not_visible:$19, box:$20, box_color_if_visible:$21, box_color_if_not_visible:$22, names:$23, hp:$24, names_color_if_visible:$25, names_color_if_not_visible:$26, weapon_name:$27, weapon_clip:$28, weapon_name_color_if_visible:$29, weapon_name_color_if_not_visible:$30, snapline:$31, snapline_color_if_visible:$32, snapline_color_if_not_visible:$33, crosshair:$34, crosshair_color:$35, radar:$36, watermark:$37, watermark_color:$38, indicator:$39, indicator_color_if_on:$40, indicator_color_if_off:$41, fov_circle:$42, fov_circle_color:$43, chams:$44, chams_is_visible_only:$45, chams_material:$46, chams_color_if_visible:$47, chams_color_if_not_visible:$48, engine:$49, fov:$50, engine_adjust_fov_scope:$51, engine_bones_list:$52, engine_force_bone_id:$53, engine_pref_bone_id:$54, engine_automatic_fire_key:$55, engine_force_bone_key:$56, engine_force_awall_key:$57, engine_automatic_fire_key_toggle:$58, engine_force_awall_key_toggle:$59, engine_force_bone_key_toggle:$60, engine_vhv_mode:$61, engine_vhv_aw_factor:$62, engine_vhv_egs_factor:$63, chockers:$64, chockers_limit:$65}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, present:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8, ret_add_check:$9}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_ret_add_check","kind":3,"detail":"fn hk_ret_add_check(ecx voidptr, edx voidptr, mod_name &u8) bool","insertText":"hk_ret_add_check($0, $1, $2)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, skins:$14, visuals:$15, is_ok:$16}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\"","kind":6,"detail":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\" voidptr","insertText":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\"","insertTextFormat":1},{"label":"retadd_check_add_studio","kind":6,"detail":"retadd_check_add_studio voidptr","insertText":"retadd_check_add_studio","insertTextFormat":1},{"label":"retadd_check_add_mat","kind":6,"detail":"retadd_check_add_mat voidptr","insertText":"retadd_check_add_mat","insertTextFormat":1},{"label":"retadd_check_add_engine","kind":6,"detail":"retadd_check_add_engine voidptr","insertText":"retadd_check_add_engine","insertTextFormat":1},{"label":"dsc_base","kind":6,"detail":"dsc_base","insertText":"dsc_base","insertTextFormat":1},{"label":"a","kind":6,"detail":"a","insertText":"a","insertTextFormat":1},{"label":"b","kind":6,"detail":"mut b","insertText":"b","insertTextFormat":1},{"label":"c","kind":6,"detail":"c","insertText":"c","insertTextFormat":1},{"label":"set_viewmodel_offets_add","kind":6,"detail":"set_viewmodel_offets_add voidptr","insertText":"set_viewmodel_offets_add","insertTextFormat":1},{"label":"get_viewmodel_fov_add","kind":6,"detail":"get_viewmodel_fov_add voidptr","insertText":"get_viewmodel_fov_add","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"retadd_check_add_client","kind":6,"detail":"retadd_check_add_client voidptr","insertText":"retadd_check_add_client","insertTextFormat":1},{"label":"called_once","kind":6,"detail":"mut called_once bool","insertText":"called_once","insertTextFormat":1},{"label":"is_called_once","kind":6,"detail":"mut is_called_once bool","insertText":"is_called_once","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1667339186}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1667339186}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1667339186}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1667339187}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":55,"method":"textDocument/completion","params":{"position":{"line":67,"character":7},"context":{"triggerCharacter":".","triggerKind":2},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v"}}},"timestamp":1667339188}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":55,"result":[]},"timestamp":1667339188}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1667339188}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1667339190}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":56,"method":"textDocument/completion","params":{"position":{"line":105,"character":47},"context":{"triggerCharacter":"(","triggerKind":2},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v"}}},"timestamp":1667339236}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":56,"result":[]},"timestamp":1667339236}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339236}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339237}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339238}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339239}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339239}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":57,"method":"textDocument/completion","params":{"position":{"line":105,"character":47},"context":{"triggerKind":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v"}}},"timestamp":1667339241}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":57,"result":[{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"err","kind":6,"detail":"err IError","insertText":"err","insertTextFormat":1},{"label":"err","kind":6,"detail":"err IError","insertText":"err","insertTextFormat":1},{"label":"err","kind":6,"detail":"err IError","insertText":"err","insertTextFormat":1},{"label":"err","kind":6,"detail":"err IError","insertText":"err","insertTextFormat":1},{"label":"h","kind":6,"detail":"mut h Hooks","insertText":"h","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx","insertText":"app_ctx","insertTextFormat":1},{"label":"retadd_check_add_client","kind":6,"detail":"retadd_check_add_client voidptr","insertText":"retadd_check_add_client","insertTextFormat":1},{"label":"retadd_check_add_studio","kind":6,"detail":"retadd_check_add_studio voidptr","insertText":"retadd_check_add_studio","insertTextFormat":1},{"label":"retadd_check_add_mat","kind":6,"detail":"retadd_check_add_mat voidptr","insertText":"retadd_check_add_mat","insertTextFormat":1},{"label":"retadd_check_add_engine","kind":6,"detail":"retadd_check_add_engine voidptr","insertText":"retadd_check_add_engine","insertTextFormat":1},{"label":"set_viewmodel_offets_add","kind":6,"detail":"set_viewmodel_offets_add voidptr","insertText":"set_viewmodel_offets_add","insertTextFormat":1},{"label":"get_viewmodel_fov_add","kind":6,"detail":"get_viewmodel_fov_add voidptr","insertText":"get_viewmodel_fov_add","insertTextFormat":1},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"trace_from_to_pos","kind":3,"detail":"pub fn trace_from_to_pos(from_pos Vec3, to_pos Vec3) CGameTrace","insertText":"trace_from_to_pos($0, $1)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"EngineWeaponConfigEntry","kind":22,"detail":"struct EngineWeaponConfigEntry","insertText":"EngineWeaponConfigEntry{def_idx:$1, engine_bones_list:$2, engine_force_bone_id:$3, engine_pref_bone_id:$4, engine_vhv_mode:$5, engine_vhv_aw_factor:$6, engine_vhv_egs_factor:$7}","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins:$16, glow:$17, glow_color_if_visible:$18, glow_color_if_not_visible:$19, box:$20, box_color_if_visible:$21, box_color_if_not_visible:$22, names:$23, hp:$24, names_color_if_visible:$25, names_color_if_not_visible:$26, weapon_name:$27, weapon_clip:$28, weapon_name_color_if_visible:$29, weapon_name_color_if_not_visible:$30, snapline:$31, snapline_color_if_visible:$32, snapline_color_if_not_visible:$33, crosshair:$34, crosshair_color:$35, radar:$36, watermark:$37, watermark_color:$38, indicator:$39, indicator_color_if_on:$40, indicator_color_if_off:$41, fov_circle:$42, fov_circle_color:$43, chams:$44, chams_is_visible_only:$45, chams_material:$46, chams_color_if_visible:$47, chams_color_if_not_visible:$48, engine:$49, fov:$50, engine_adjust_fov_scope:$51, engine_bones_list:$52, engine_force_bone_id:$53, engine_pref_bone_id:$54, engine_automatic_fire_key:$55, engine_force_bone_key:$56, engine_force_awall_key:$57, engine_automatic_fire_key_toggle:$58, engine_force_awall_key_toggle:$59, engine_force_bone_key_toggle:$60, engine_vhv_mode:$61, engine_vhv_aw_factor:$62, engine_vhv_egs_factor:$63, chockers:$64, chockers_limit:$65}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, present:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8, ret_add_check:$9}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_ret_add_check","kind":3,"detail":"fn hk_ret_add_check(ecx voidptr, edx voidptr, mod_name &u8) bool","insertText":"hk_ret_add_check($0, $1, $2)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, skins:$14, visuals:$15, is_ok:$16}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\"","kind":6,"detail":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\" voidptr","insertText":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\"","insertTextFormat":1},{"label":"retadd_check_add_studio","kind":6,"detail":"retadd_check_add_studio voidptr","insertText":"retadd_check_add_studio","insertTextFormat":1},{"label":"retadd_check_add_mat","kind":6,"detail":"retadd_check_add_mat voidptr","insertText":"retadd_check_add_mat","insertTextFormat":1},{"label":"retadd_check_add_engine","kind":6,"detail":"retadd_check_add_engine voidptr","insertText":"retadd_check_add_engine","insertTextFormat":1},{"label":"dsc_base","kind":6,"detail":"dsc_base","insertText":"dsc_base","insertTextFormat":1},{"label":"a","kind":6,"detail":"a","insertText":"a","insertTextFormat":1},{"label":"b","kind":6,"detail":"mut b","insertText":"b","insertTextFormat":1},{"label":"c","kind":6,"detail":"c","insertText":"c","insertTextFormat":1},{"label":"set_viewmodel_offets_add","kind":6,"detail":"set_viewmodel_offets_add voidptr","insertText":"set_viewmodel_offets_add","insertTextFormat":1},{"label":"get_viewmodel_fov_add","kind":6,"detail":"get_viewmodel_fov_add voidptr","insertText":"get_viewmodel_fov_add","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"retadd_check_add_client","kind":6,"detail":"retadd_check_add_client voidptr","insertText":"retadd_check_add_client","insertTextFormat":1},{"label":"called_once","kind":6,"detail":"mut called_once bool","insertText":"called_once","insertTextFormat":1},{"label":"is_called_once","kind":6,"detail":"mut is_called_once bool","insertText":"is_called_once","insertTextFormat":1},{"label":"g_x ","kind":6,"detail":"mut g_x ","insertText":"g_x ","insertTextFormat":1},{"label":"g_y ","kind":6,"detail":"mut g_y ","insertText":"g_y ","insertTextFormat":1},{"label":"g_z ","kind":6,"detail":"mut g_z ","insertText":"g_z ","insertTextFormat":1},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1667339241}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339241}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339242}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339242}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339242}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339242}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339242}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339242}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339243}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339243}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339243}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339243}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339244}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339245}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339367}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339367}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339370}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1667339375}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1667339375}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1667339378}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1667339379}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339388}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339388}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339389}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339389}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339389}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339390}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339390}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339391}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339392}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339402}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339416}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339416}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339417}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339418}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339418}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339419}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339419}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339419}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339420}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339462}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":58,"method":"textDocument/completion","params":{"position":{"line":177,"character":5},"context":{"triggerKind":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v"}}},"timestamp":1667339462}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":58,"result":[{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"this","kind":6,"detail":"this voidptr","insertText":"this","insertTextFormat":1},{"label":"a","kind":6,"detail":"a voidptr","insertText":"a","insertTextFormat":1},{"label":"b","kind":6,"detail":"b voidptr","insertText":"b","insertTextFormat":1},{"label":"c","kind":6,"detail":"c voidptr","insertText":"c","insertTextFormat":1},{"label":"d","kind":6,"detail":"d voidptr","insertText":"d","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"called_once","kind":6,"detail":"mut called_once bool","insertText":"called_once","insertTextFormat":1},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"trace_from_to_pos","kind":3,"detail":"pub fn trace_from_to_pos(from_pos Vec3, to_pos Vec3) CGameTrace","insertText":"trace_from_to_pos($0, $1)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"EngineWeaponConfigEntry","kind":22,"detail":"struct EngineWeaponConfigEntry","insertText":"EngineWeaponConfigEntry{def_idx:$1, engine_bones_list:$2, engine_force_bone_id:$3, engine_pref_bone_id:$4, engine_vhv_mode:$5, engine_vhv_aw_factor:$6, engine_vhv_egs_factor:$7}","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins:$16, glow:$17, glow_color_if_visible:$18, glow_color_if_not_visible:$19, box:$20, box_color_if_visible:$21, box_color_if_not_visible:$22, names:$23, hp:$24, names_color_if_visible:$25, names_color_if_not_visible:$26, weapon_name:$27, weapon_clip:$28, weapon_name_color_if_visible:$29, weapon_name_color_if_not_visible:$30, snapline:$31, snapline_color_if_visible:$32, snapline_color_if_not_visible:$33, crosshair:$34, crosshair_color:$35, radar:$36, watermark:$37, watermark_color:$38, indicator:$39, indicator_color_if_on:$40, indicator_color_if_off:$41, fov_circle:$42, fov_circle_color:$43, chams:$44, chams_is_visible_only:$45, chams_material:$46, chams_color_if_visible:$47, chams_color_if_not_visible:$48, engine:$49, fov:$50, engine_adjust_fov_scope:$51, engine_bones_list:$52, engine_force_bone_id:$53, engine_pref_bone_id:$54, engine_automatic_fire_key:$55, engine_force_bone_key:$56, engine_force_awall_key:$57, engine_automatic_fire_key_toggle:$58, engine_force_awall_key_toggle:$59, engine_force_bone_key_toggle:$60, engine_vhv_mode:$61, engine_vhv_aw_factor:$62, engine_vhv_egs_factor:$63, chockers:$64, chockers_limit:$65}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, present:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8, ret_add_check:$9}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_ret_add_check","kind":3,"detail":"fn hk_ret_add_check(ecx voidptr, edx voidptr, mod_name &u8) bool","insertText":"hk_ret_add_check($0, $1, $2)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, skins:$14, visuals:$15, is_ok:$16}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\"","kind":6,"detail":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\" voidptr","insertText":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\"","insertTextFormat":1},{"label":"retadd_check_add_studio","kind":6,"detail":"retadd_check_add_studio voidptr","insertText":"retadd_check_add_studio","insertTextFormat":1},{"label":"retadd_check_add_mat","kind":6,"detail":"retadd_check_add_mat voidptr","insertText":"retadd_check_add_mat","insertTextFormat":1},{"label":"retadd_check_add_engine","kind":6,"detail":"retadd_check_add_engine voidptr","insertText":"retadd_check_add_engine","insertTextFormat":1},{"label":"dsc_base","kind":6,"detail":"dsc_base","insertText":"dsc_base","insertTextFormat":1},{"label":"a","kind":6,"detail":"a","insertText":"a","insertTextFormat":1},{"label":"b","kind":6,"detail":"mut b","insertText":"b","insertTextFormat":1},{"label":"c","kind":6,"detail":"c","insertText":"c","insertTextFormat":1},{"label":"set_viewmodel_offets_add","kind":6,"detail":"set_viewmodel_offets_add voidptr","insertText":"set_viewmodel_offets_add","insertTextFormat":1},{"label":"get_viewmodel_fov_add","kind":6,"detail":"get_viewmodel_fov_add voidptr","insertText":"get_viewmodel_fov_add","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"retadd_check_add_client","kind":6,"detail":"retadd_check_add_client voidptr","insertText":"retadd_check_add_client","insertTextFormat":1},{"label":"called_once","kind":6,"detail":"mut called_once bool","insertText":"called_once","insertTextFormat":1},{"label":"is_called_once","kind":6,"detail":"mut is_called_once bool","insertText":"is_called_once","insertTextFormat":1},{"label":"g_x ","kind":6,"detail":"mut g_x ","insertText":"g_x ","insertTextFormat":1},{"label":"g_y ","kind":6,"detail":"mut g_y ","insertText":"g_y ","insertTextFormat":1},{"label":"g_z ","kind":6,"detail":"mut g_z ","insertText":"g_z ","insertTextFormat":1},{"label":"hk_present","kind":3,"detail":"fn hk_present(this voidptr, a voidptr, b voidptr, c voidptr, d voidptr) int","insertText":"hk_present($0, $1, $2, $3, $4)","insertTextFormat":2},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1667339462}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339462}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339463}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339463}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339463}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339463}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339464}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339464}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339464}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339464}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339465}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339465}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339466}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339494}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339555}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339556}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/config.v","diagnostics":[]}},"timestamp":1667339558}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/config.v","diagnostics":[]}},"timestamp":1667339559}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1667339594}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1667339594}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/app.v","diagnostics":[]}},"timestamp":1667339650}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339653}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339666}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339670}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339671}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339671}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339671}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339673}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339673}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339673}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339673}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339675}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339736}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339736}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339749}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667339937}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667340039}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667340039}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667340040}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667340040}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667340040}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667340041}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667340042}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":59,"method":"textDocument/completion","params":{"position":{"line":176,"character":3},"context":{"triggerKind":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v"}}},"timestamp":1667340042}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":59,"result":[{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"this","kind":6,"detail":"this voidptr","insertText":"this","insertTextFormat":1},{"label":"a","kind":6,"detail":"a voidptr","insertText":"a","insertTextFormat":1},{"label":"b","kind":6,"detail":"b voidptr","insertText":"b","insertTextFormat":1},{"label":"c","kind":6,"detail":"c voidptr","insertText":"c","insertTextFormat":1},{"label":"d","kind":6,"detail":"d voidptr","insertText":"d","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"called_once","kind":6,"detail":"mut called_once bool","insertText":"called_once","insertTextFormat":1},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"trace_from_to_pos","kind":3,"detail":"pub fn trace_from_to_pos(from_pos Vec3, to_pos Vec3) CGameTrace","insertText":"trace_from_to_pos($0, $1)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"EngineWeaponConfigEntry","kind":22,"detail":"struct EngineWeaponConfigEntry","insertText":"EngineWeaponConfigEntry{def_idx:$1, engine_bones_list:$2, engine_force_bone_id:$3, engine_pref_bone_id:$4, engine_vhv_mode:$5, engine_vhv_aw_factor:$6, engine_vhv_egs_factor:$7}","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins:$16, glow:$17, glow_color_if_visible:$18, glow_color_if_not_visible:$19, box:$20, box_color_if_visible:$21, box_color_if_not_visible:$22, names:$23, hp:$24, names_color_if_visible:$25, names_color_if_not_visible:$26, weapon_name:$27, weapon_clip:$28, weapon_name_color_if_visible:$29, weapon_name_color_if_not_visible:$30, snapline:$31, snapline_color_if_visible:$32, snapline_color_if_not_visible:$33, crosshair:$34, crosshair_color:$35, radar:$36, watermark:$37, watermark_color:$38, indicator:$39, indicator_color_if_on:$40, indicator_color_if_off:$41, fov_circle:$42, fov_circle_color:$43, chams:$44, chams_is_visible_only:$45, chams_material:$46, chams_color_if_visible:$47, chams_color_if_not_visible:$48, engine:$49, fov:$50, engine_adjust_fov_scope:$51, engine_bones_list:$52, engine_force_bone_id:$53, engine_pref_bone_id:$54, engine_automatic_fire_key:$55, engine_force_bone_key:$56, engine_force_awall_key:$57, engine_automatic_fire_key_toggle:$58, engine_force_awall_key_toggle:$59, engine_force_bone_key_toggle:$60, engine_vhv_mode:$61, engine_vhv_aw_factor:$62, engine_vhv_egs_factor:$63, chockers:$64, chockers_limit:$65}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, present:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8, ret_add_check:$9}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_ret_add_check","kind":3,"detail":"fn hk_ret_add_check(ecx voidptr, edx voidptr, mod_name &u8) bool","insertText":"hk_ret_add_check($0, $1, $2)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, skins:$14, visuals:$15, is_ok:$16}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\"","kind":6,"detail":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\" voidptr","insertText":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\"","insertTextFormat":1},{"label":"retadd_check_add_studio","kind":6,"detail":"retadd_check_add_studio voidptr","insertText":"retadd_check_add_studio","insertTextFormat":1},{"label":"retadd_check_add_mat","kind":6,"detail":"retadd_check_add_mat voidptr","insertText":"retadd_check_add_mat","insertTextFormat":1},{"label":"retadd_check_add_engine","kind":6,"detail":"retadd_check_add_engine voidptr","insertText":"retadd_check_add_engine","insertTextFormat":1},{"label":"dsc_base","kind":6,"detail":"dsc_base","insertText":"dsc_base","insertTextFormat":1},{"label":"a","kind":6,"detail":"a","insertText":"a","insertTextFormat":1},{"label":"b","kind":6,"detail":"mut b","insertText":"b","insertTextFormat":1},{"label":"c","kind":6,"detail":"c","insertText":"c","insertTextFormat":1},{"label":"set_viewmodel_offets_add","kind":6,"detail":"set_viewmodel_offets_add voidptr","insertText":"set_viewmodel_offets_add","insertTextFormat":1},{"label":"get_viewmodel_fov_add","kind":6,"detail":"get_viewmodel_fov_add voidptr","insertText":"get_viewmodel_fov_add","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"retadd_check_add_client","kind":6,"detail":"retadd_check_add_client voidptr","insertText":"retadd_check_add_client","insertTextFormat":1},{"label":"called_once","kind":6,"detail":"mut called_once bool","insertText":"called_once","insertTextFormat":1},{"label":"is_called_once","kind":6,"detail":"mut is_called_once bool","insertText":"is_called_once","insertTextFormat":1},{"label":"g_x ","kind":6,"detail":"mut g_x ","insertText":"g_x ","insertTextFormat":1},{"label":"g_y ","kind":6,"detail":"mut g_y ","insertText":"g_y ","insertTextFormat":1},{"label":"g_z ","kind":6,"detail":"mut g_z ","insertText":"g_z ","insertTextFormat":1},{"label":"hk_present","kind":3,"detail":"fn hk_present(this voidptr, a voidptr, b voidptr, c voidptr, d voidptr) int","insertText":"hk_present($0, $1, $2, $3, $4)","insertTextFormat":2},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1667340042}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667340042}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667340043}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667340043}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667340043}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667340045}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667340045}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667340046}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667340046}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":60,"method":"textDocument/completion","params":{"position":{"line":176,"character":10},"context":{"triggerCharacter":".","triggerKind":2},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v"}}},"timestamp":1667340046}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":60,"result":[]},"timestamp":1667340046}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667340046}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":61,"method":"textDocument/completion","params":{"position":{"line":176,"character":11},"context":{"triggerKind":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v"}}},"timestamp":1667340047}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":61,"result":[{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"this","kind":6,"detail":"this voidptr","insertText":"this","insertTextFormat":1},{"label":"a","kind":6,"detail":"a voidptr","insertText":"a","insertTextFormat":1},{"label":"b","kind":6,"detail":"b voidptr","insertText":"b","insertTextFormat":1},{"label":"c","kind":6,"detail":"c voidptr","insertText":"c","insertTextFormat":1},{"label":"d","kind":6,"detail":"d voidptr","insertText":"d","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"called_once","kind":6,"detail":"mut called_once bool","insertText":"called_once","insertTextFormat":1},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"trace_from_to_pos","kind":3,"detail":"pub fn trace_from_to_pos(from_pos Vec3, to_pos Vec3) CGameTrace","insertText":"trace_from_to_pos($0, $1)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"EngineWeaponConfigEntry","kind":22,"detail":"struct EngineWeaponConfigEntry","insertText":"EngineWeaponConfigEntry{def_idx:$1, engine_bones_list:$2, engine_force_bone_id:$3, engine_pref_bone_id:$4, engine_vhv_mode:$5, engine_vhv_aw_factor:$6, engine_vhv_egs_factor:$7}","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins:$16, glow:$17, glow_color_if_visible:$18, glow_color_if_not_visible:$19, box:$20, box_color_if_visible:$21, box_color_if_not_visible:$22, names:$23, hp:$24, names_color_if_visible:$25, names_color_if_not_visible:$26, weapon_name:$27, weapon_clip:$28, weapon_name_color_if_visible:$29, weapon_name_color_if_not_visible:$30, snapline:$31, snapline_color_if_visible:$32, snapline_color_if_not_visible:$33, crosshair:$34, crosshair_color:$35, radar:$36, watermark:$37, watermark_color:$38, indicator:$39, indicator_color_if_on:$40, indicator_color_if_off:$41, fov_circle:$42, fov_circle_color:$43, chams:$44, chams_is_visible_only:$45, chams_material:$46, chams_color_if_visible:$47, chams_color_if_not_visible:$48, engine:$49, fov:$50, engine_adjust_fov_scope:$51, engine_bones_list:$52, engine_force_bone_id:$53, engine_pref_bone_id:$54, engine_automatic_fire_key:$55, engine_force_bone_key:$56, engine_force_awall_key:$57, engine_automatic_fire_key_toggle:$58, engine_force_awall_key_toggle:$59, engine_force_bone_key_toggle:$60, engine_vhv_mode:$61, engine_vhv_aw_factor:$62, engine_vhv_egs_factor:$63, chockers:$64, chockers_limit:$65}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, present:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8, ret_add_check:$9}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_ret_add_check","kind":3,"detail":"fn hk_ret_add_check(ecx voidptr, edx voidptr, mod_name &u8) bool","insertText":"hk_ret_add_check($0, $1, $2)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, skins:$14, visuals:$15, is_ok:$16}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\"","kind":6,"detail":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\" voidptr","insertText":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\"","insertTextFormat":1},{"label":"retadd_check_add_studio","kind":6,"detail":"retadd_check_add_studio voidptr","insertText":"retadd_check_add_studio","insertTextFormat":1},{"label":"retadd_check_add_mat","kind":6,"detail":"retadd_check_add_mat voidptr","insertText":"retadd_check_add_mat","insertTextFormat":1},{"label":"retadd_check_add_engine","kind":6,"detail":"retadd_check_add_engine voidptr","insertText":"retadd_check_add_engine","insertTextFormat":1},{"label":"dsc_base","kind":6,"detail":"dsc_base","insertText":"dsc_base","insertTextFormat":1},{"label":"a","kind":6,"detail":"a","insertText":"a","insertTextFormat":1},{"label":"b","kind":6,"detail":"mut b","insertText":"b","insertTextFormat":1},{"label":"c","kind":6,"detail":"c","insertText":"c","insertTextFormat":1},{"label":"set_viewmodel_offets_add","kind":6,"detail":"set_viewmodel_offets_add voidptr","insertText":"set_viewmodel_offets_add","insertTextFormat":1},{"label":"get_viewmodel_fov_add","kind":6,"detail":"get_viewmodel_fov_add voidptr","insertText":"get_viewmodel_fov_add","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"retadd_check_add_client","kind":6,"detail":"retadd_check_add_client voidptr","insertText":"retadd_check_add_client","insertTextFormat":1},{"label":"called_once","kind":6,"detail":"mut called_once bool","insertText":"called_once","insertTextFormat":1},{"label":"is_called_once","kind":6,"detail":"mut is_called_once bool","insertText":"is_called_once","insertTextFormat":1},{"label":"g_x ","kind":6,"detail":"mut g_x ","insertText":"g_x ","insertTextFormat":1},{"label":"g_y ","kind":6,"detail":"mut g_y ","insertText":"g_y ","insertTextFormat":1},{"label":"g_z ","kind":6,"detail":"mut g_z ","insertText":"g_z ","insertTextFormat":1},{"label":"hk_present","kind":3,"detail":"fn hk_present(this voidptr, a voidptr, b voidptr, c voidptr, d voidptr) int","insertText":"hk_present($0, $1, $2, $3, $4)","insertTextFormat":2},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1667340047}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667340047}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667340047}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667340047}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667340048}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667340048}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":62,"method":"textDocument/completion","params":{"position":{"line":176,"character":83},"context":{"triggerCharacter":".","triggerKind":2},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v"}}},"timestamp":1667340053}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":62,"result":[]},"timestamp":1667340053}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667340053}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":63,"method":"textDocument/completion","params":{"position":{"line":176,"character":82},"context":{"triggerKind":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v"}}},"timestamp":1667340054}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":63,"result":[{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"this","kind":6,"detail":"this voidptr","insertText":"this","insertTextFormat":1},{"label":"a","kind":6,"detail":"a voidptr","insertText":"a","insertTextFormat":1},{"label":"b","kind":6,"detail":"b voidptr","insertText":"b","insertTextFormat":1},{"label":"c","kind":6,"detail":"c voidptr","insertText":"c","insertTextFormat":1},{"label":"d","kind":6,"detail":"d voidptr","insertText":"d","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"called_once","kind":6,"detail":"mut called_once bool","insertText":"called_once","insertTextFormat":1},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"trace_from_to_pos","kind":3,"detail":"pub fn trace_from_to_pos(from_pos Vec3, to_pos Vec3) CGameTrace","insertText":"trace_from_to_pos($0, $1)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"EngineWeaponConfigEntry","kind":22,"detail":"struct EngineWeaponConfigEntry","insertText":"EngineWeaponConfigEntry{def_idx:$1, engine_bones_list:$2, engine_force_bone_id:$3, engine_pref_bone_id:$4, engine_vhv_mode:$5, engine_vhv_aw_factor:$6, engine_vhv_egs_factor:$7}","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins:$16, glow:$17, glow_color_if_visible:$18, glow_color_if_not_visible:$19, box:$20, box_color_if_visible:$21, box_color_if_not_visible:$22, names:$23, hp:$24, names_color_if_visible:$25, names_color_if_not_visible:$26, weapon_name:$27, weapon_clip:$28, weapon_name_color_if_visible:$29, weapon_name_color_if_not_visible:$30, snapline:$31, snapline_color_if_visible:$32, snapline_color_if_not_visible:$33, crosshair:$34, crosshair_color:$35, radar:$36, watermark:$37, watermark_color:$38, indicator:$39, indicator_color_if_on:$40, indicator_color_if_off:$41, fov_circle:$42, fov_circle_color:$43, chams:$44, chams_is_visible_only:$45, chams_material:$46, chams_color_if_visible:$47, chams_color_if_not_visible:$48, engine:$49, fov:$50, engine_adjust_fov_scope:$51, engine_bones_list:$52, engine_force_bone_id:$53, engine_pref_bone_id:$54, engine_automatic_fire_key:$55, engine_force_bone_key:$56, engine_force_awall_key:$57, engine_automatic_fire_key_toggle:$58, engine_force_awall_key_toggle:$59, engine_force_bone_key_toggle:$60, engine_vhv_mode:$61, engine_vhv_aw_factor:$62, engine_vhv_egs_factor:$63, chockers:$64, chockers_limit:$65}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, present:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8, ret_add_check:$9}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_ret_add_check","kind":3,"detail":"fn hk_ret_add_check(ecx voidptr, edx voidptr, mod_name &u8) bool","insertText":"hk_ret_add_check($0, $1, $2)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, skins:$14, visuals:$15, is_ok:$16}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\"","kind":6,"detail":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\" voidptr","insertText":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\"","insertTextFormat":1},{"label":"retadd_check_add_studio","kind":6,"detail":"retadd_check_add_studio voidptr","insertText":"retadd_check_add_studio","insertTextFormat":1},{"label":"retadd_check_add_mat","kind":6,"detail":"retadd_check_add_mat voidptr","insertText":"retadd_check_add_mat","insertTextFormat":1},{"label":"retadd_check_add_engine","kind":6,"detail":"retadd_check_add_engine voidptr","insertText":"retadd_check_add_engine","insertTextFormat":1},{"label":"dsc_base","kind":6,"detail":"dsc_base","insertText":"dsc_base","insertTextFormat":1},{"label":"a","kind":6,"detail":"a","insertText":"a","insertTextFormat":1},{"label":"b","kind":6,"detail":"mut b","insertText":"b","insertTextFormat":1},{"label":"c","kind":6,"detail":"c","insertText":"c","insertTextFormat":1},{"label":"set_viewmodel_offets_add","kind":6,"detail":"set_viewmodel_offets_add voidptr","insertText":"set_viewmodel_offets_add","insertTextFormat":1},{"label":"get_viewmodel_fov_add","kind":6,"detail":"get_viewmodel_fov_add voidptr","insertText":"get_viewmodel_fov_add","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"retadd_check_add_client","kind":6,"detail":"retadd_check_add_client voidptr","insertText":"retadd_check_add_client","insertTextFormat":1},{"label":"called_once","kind":6,"detail":"mut called_once bool","insertText":"called_once","insertTextFormat":1},{"label":"is_called_once","kind":6,"detail":"mut is_called_once bool","insertText":"is_called_once","insertTextFormat":1},{"label":"g_x ","kind":6,"detail":"mut g_x ","insertText":"g_x ","insertTextFormat":1},{"label":"g_y ","kind":6,"detail":"mut g_y ","insertText":"g_y ","insertTextFormat":1},{"label":"g_z ","kind":6,"detail":"mut g_z ","insertText":"g_z ","insertTextFormat":1},{"label":"hk_present","kind":3,"detail":"fn hk_present(this voidptr, a voidptr, b voidptr, c voidptr, d voidptr) int","insertText":"hk_present($0, $1, $2, $3, $4)","insertTextFormat":2},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1667340054}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667340054}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":64,"method":"textDocument/completion","params":{"position":{"line":176,"character":79},"context":{"triggerCharacter":".","triggerKind":2},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v"}}},"timestamp":1667340054}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":64,"result":[]},"timestamp":1667340054}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667340054}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":65,"method":"textDocument/completion","params":{"position":{"line":176,"character":78},"context":{"triggerKind":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v"}}},"timestamp":1667340054}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":65,"result":[{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"this","kind":6,"detail":"this voidptr","insertText":"this","insertTextFormat":1},{"label":"a","kind":6,"detail":"a voidptr","insertText":"a","insertTextFormat":1},{"label":"b","kind":6,"detail":"b voidptr","insertText":"b","insertTextFormat":1},{"label":"c","kind":6,"detail":"c voidptr","insertText":"c","insertTextFormat":1},{"label":"d","kind":6,"detail":"d voidptr","insertText":"d","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"called_once","kind":6,"detail":"mut called_once bool","insertText":"called_once","insertTextFormat":1},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"trace_from_to_pos","kind":3,"detail":"pub fn trace_from_to_pos(from_pos Vec3, to_pos Vec3) CGameTrace","insertText":"trace_from_to_pos($0, $1)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"EngineWeaponConfigEntry","kind":22,"detail":"struct EngineWeaponConfigEntry","insertText":"EngineWeaponConfigEntry{def_idx:$1, engine_bones_list:$2, engine_force_bone_id:$3, engine_pref_bone_id:$4, engine_vhv_mode:$5, engine_vhv_aw_factor:$6, engine_vhv_egs_factor:$7}","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins:$16, glow:$17, glow_color_if_visible:$18, glow_color_if_not_visible:$19, box:$20, box_color_if_visible:$21, box_color_if_not_visible:$22, names:$23, hp:$24, names_color_if_visible:$25, names_color_if_not_visible:$26, weapon_name:$27, weapon_clip:$28, weapon_name_color_if_visible:$29, weapon_name_color_if_not_visible:$30, snapline:$31, snapline_color_if_visible:$32, snapline_color_if_not_visible:$33, crosshair:$34, crosshair_color:$35, radar:$36, watermark:$37, watermark_color:$38, indicator:$39, indicator_color_if_on:$40, indicator_color_if_off:$41, fov_circle:$42, fov_circle_color:$43, chams:$44, chams_is_visible_only:$45, chams_material:$46, chams_color_if_visible:$47, chams_color_if_not_visible:$48, engine:$49, fov:$50, engine_adjust_fov_scope:$51, engine_bones_list:$52, engine_force_bone_id:$53, engine_pref_bone_id:$54, engine_automatic_fire_key:$55, engine_force_bone_key:$56, engine_force_awall_key:$57, engine_automatic_fire_key_toggle:$58, engine_force_awall_key_toggle:$59, engine_force_bone_key_toggle:$60, engine_vhv_mode:$61, engine_vhv_aw_factor:$62, engine_vhv_egs_factor:$63, chockers:$64, chockers_limit:$65}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, present:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8, ret_add_check:$9}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_ret_add_check","kind":3,"detail":"fn hk_ret_add_check(ecx voidptr, edx voidptr, mod_name &u8) bool","insertText":"hk_ret_add_check($0, $1, $2)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, skins:$14, visuals:$15, is_ok:$16}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\"","kind":6,"detail":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\" voidptr","insertText":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\"","insertTextFormat":1},{"label":"retadd_check_add_studio","kind":6,"detail":"retadd_check_add_studio voidptr","insertText":"retadd_check_add_studio","insertTextFormat":1},{"label":"retadd_check_add_mat","kind":6,"detail":"retadd_check_add_mat voidptr","insertText":"retadd_check_add_mat","insertTextFormat":1},{"label":"retadd_check_add_engine","kind":6,"detail":"retadd_check_add_engine voidptr","insertText":"retadd_check_add_engine","insertTextFormat":1},{"label":"dsc_base","kind":6,"detail":"dsc_base","insertText":"dsc_base","insertTextFormat":1},{"label":"a","kind":6,"detail":"a","insertText":"a","insertTextFormat":1},{"label":"b","kind":6,"detail":"mut b","insertText":"b","insertTextFormat":1},{"label":"c","kind":6,"detail":"c","insertText":"c","insertTextFormat":1},{"label":"set_viewmodel_offets_add","kind":6,"detail":"set_viewmodel_offets_add voidptr","insertText":"set_viewmodel_offets_add","insertTextFormat":1},{"label":"get_viewmodel_fov_add","kind":6,"detail":"get_viewmodel_fov_add voidptr","insertText":"get_viewmodel_fov_add","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"retadd_check_add_client","kind":6,"detail":"retadd_check_add_client voidptr","insertText":"retadd_check_add_client","insertTextFormat":1},{"label":"called_once","kind":6,"detail":"mut called_once bool","insertText":"called_once","insertTextFormat":1},{"label":"is_called_once","kind":6,"detail":"mut is_called_once bool","insertText":"is_called_once","insertTextFormat":1},{"label":"g_x ","kind":6,"detail":"mut g_x ","insertText":"g_x ","insertTextFormat":1},{"label":"g_y ","kind":6,"detail":"mut g_y ","insertText":"g_y ","insertTextFormat":1},{"label":"g_z ","kind":6,"detail":"mut g_z ","insertText":"g_z ","insertTextFormat":1},{"label":"hk_present","kind":3,"detail":"fn hk_present(this voidptr, a voidptr, b voidptr, c voidptr, d voidptr) int","insertText":"hk_present($0, $1, $2, $3, $4)","insertTextFormat":2},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1667340054}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667340054}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":66,"method":"textDocument/completion","params":{"position":{"line":176,"character":71},"context":{"triggerCharacter":"(","triggerKind":2},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v"}}},"timestamp":1667340055}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":66,"result":[]},"timestamp":1667340055}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667340055}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":67,"method":"textDocument/completion","params":{"position":{"line":176,"character":72},"context":{"triggerKind":1},"textDocument":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v"}}},"timestamp":1667340055}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":67,"result":[{"label":"valve","kind":9,"detail":"","insertText":"valve","insertTextFormat":1},{"label":"utils","kind":9,"detail":"","insertText":"utils","insertTextFormat":1},{"label":"C","kind":9,"detail":"C symbol definitions","insertText":"C.","insertTextFormat":1},{"label":"this","kind":6,"detail":"this voidptr","insertText":"this","insertTextFormat":1},{"label":"a","kind":6,"detail":"a voidptr","insertText":"a","insertTextFormat":1},{"label":"b","kind":6,"detail":"b voidptr","insertText":"b","insertTextFormat":1},{"label":"c","kind":6,"detail":"c voidptr","insertText":"c","insertTextFormat":1},{"label":"d","kind":6,"detail":"d voidptr","insertText":"d","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"called_once","kind":6,"detail":"mut called_once bool","insertText":"called_once","insertTextFormat":1},{"label":"SkinEntry","kind":22,"detail":"struct SkinEntry","insertText":"SkinEntry{definition_index:$1, quality:$2, paint_kit:$3, wear:$4, seed:$5, is_knife:$6}","insertTextFormat":2},{"label":"Skins","kind":22,"detail":"struct Skins","insertText":"Skins{current_selected_in_menu:$1}","insertTextFormat":2},{"label":"EntityCacher","kind":22,"detail":"struct EntityCacher","insertText":"EntityCacher{cache:$1, local_player:$2}","insertTextFormat":2},{"label":"i_can_see","kind":3,"detail":"pub fn i_can_see(player &Player, bones []usize) (bool, valve.CGameTrace)","insertText":"i_can_see($0, $1)","insertTextFormat":2},{"label":"trace_from_to_pos","kind":3,"detail":"pub fn trace_from_to_pos(from_pos Vec3, to_pos Vec3) CGameTrace","insertText":"trace_from_to_pos($0, $1)","insertTextFormat":2},{"label":"ent_weapon","kind":3,"detail":"pub fn ent_weapon(for_ent &Player) ?&Weapon_t","insertText":"ent_weapon($0)","insertTextFormat":2},{"label":"BoxData","kind":22,"detail":"struct BoxData","insertText":"BoxData{screen_pos:$1, height:$2, width:$3}","insertTextFormat":2},{"label":"Visuals","kind":22,"detail":"struct Visuals","insertText":"Visuals{bones_to_be_visible_visuals:$1, current_ent:$2, current_ent_is_visible:$3, current_ent_box:$4}","insertTextFormat":2},{"label":"Interfaces","kind":22,"detail":"struct Interfaces","insertText":"Interfaces{cdll_int:$1, i_cvar:$2, i_base_client:$3, i_entity_list:$4, i_debug_overlay:$5, i_model_info:$6, i_engine_trace:$7, c_global_vars:$8, c_input:$9, i_surface:$10, i_weapon_system:$11, i_studio_renderer:$12, i_material_system:$13}","insertTextFormat":2},{"label":"get_knife_data","kind":3,"detail":"fn get_knife_data(knife_id int) string","insertText":"get_knife_data($0)","insertTextFormat":2},{"label":"get_material_str","kind":3,"detail":"fn get_material_str(for_material_id int) string","insertText":"get_material_str($0)","insertTextFormat":2},{"label":"get_material_id","kind":3,"detail":"fn get_material_id(for_material_name string) int","insertText":"get_material_id($0)","insertTextFormat":2},{"label":"EngineWeaponConfigEntry","kind":22,"detail":"struct EngineWeaponConfigEntry","insertText":"EngineWeaponConfigEntry{def_idx:$1, engine_bones_list:$2, engine_force_bone_id:$3, engine_pref_bone_id:$4, engine_vhv_mode:$5, engine_vhv_aw_factor:$6, engine_vhv_egs_factor:$7}","insertTextFormat":2},{"label":"Config","kind":22,"detail":"struct Config","insertText":"Config{name:$1, knife_changer:$2, bop:$3, spectator:$4, spectator_count_color:$5, spectators_color:$6, killsound:$7, killsound_type:$8, viewmodel_override:$9, viewmodel_override_x:$10, viewmodel_override_y:$11, viewmodel_override_z:$12, viewmodel_override_fov:$13, no_flash:$14, killsay:$15, skins:$16, glow:$17, glow_color_if_visible:$18, glow_color_if_not_visible:$19, box:$20, box_color_if_visible:$21, box_color_if_not_visible:$22, names:$23, hp:$24, names_color_if_visible:$25, names_color_if_not_visible:$26, weapon_name:$27, weapon_clip:$28, weapon_name_color_if_visible:$29, weapon_name_color_if_not_visible:$30, snapline:$31, snapline_color_if_visible:$32, snapline_color_if_not_visible:$33, crosshair:$34, crosshair_color:$35, radar:$36, watermark:$37, watermark_color:$38, indicator:$39, indicator_color_if_on:$40, indicator_color_if_off:$41, fov_circle:$42, fov_circle_color:$43, chams:$44, chams_is_visible_only:$45, chams_material:$46, chams_color_if_visible:$47, chams_color_if_not_visible:$48, engine:$49, fov:$50, engine_adjust_fov_scope:$51, engine_bones_list:$52, engine_force_bone_id:$53, engine_pref_bone_id:$54, engine_automatic_fire_key:$55, engine_force_bone_key:$56, engine_force_awall_key:$57, engine_automatic_fire_key_toggle:$58, engine_force_awall_key_toggle:$59, engine_force_bone_key_toggle:$60, engine_vhv_mode:$61, engine_vhv_aw_factor:$62, engine_vhv_egs_factor:$63, chockers:$64, chockers_limit:$65}","insertTextFormat":2},{"label":"ConfigManager","kind":22,"detail":"struct ConfigManager","insertText":"ConfigManager{configs:$1, active_config:$2, active_config_idx:$3, selected_config_in_menu:$4}","insertTextFormat":2},{"label":"others_on_frame","kind":3,"detail":"pub fn others_on_frame()","insertText":"others_on_frame()","insertTextFormat":1},{"label":"bop","kind":3,"detail":"fn bop()","insertText":"bop()","insertTextFormat":1},{"label":"specs","kind":3,"detail":"pub fn specs()","insertText":"specs()","insertTextFormat":1},{"label":"Line","kind":22,"detail":"struct Line","insertText":"Line{from_pos:$1, to_pos:$2, thickness:$3, color:$4}","insertTextFormat":2},{"label":"new_line","kind":3,"detail":"pub fn new_line(from_pos Vec3, to_pos Vec3, with_thickness f32, and_color Color) Line","insertText":"new_line($0, $1, $2, $3)","insertTextFormat":2},{"label":"Text","kind":22,"detail":"struct Text","insertText":"Text{pos:$1, content:$2, bold:$3, shadow:$4, color:$5, font_size:$6, format_falgs:$7}","insertTextFormat":2},{"label":"new_text","kind":3,"detail":"pub fn new_text(at_pos Vec3, with_content string, with_font_size u16, is_bold bool, has_shadow bool, with_fmt_flags int, and_color Color) Text","insertText":"new_text($0, $1, $2, $3, $4, $5, $6)","insertTextFormat":2},{"label":"Rectangle","kind":22,"detail":"struct Rectangle","insertText":"Rectangle{pos:$1, height:$2, width:$3, thickness:$4, outline_thickness:$5, color:$6}","insertTextFormat":2},{"label":"new_rectangle","kind":3,"detail":"pub fn new_rectangle(at_pos Vec3, with_height f32, with_width f32, with_thickness f32, with_outline_thickness f32, and_color Color) Rectangle","insertText":"new_rectangle($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"Circle","kind":22,"detail":"struct Circle","insertText":"Circle{at_pos:$1, thickness:$2, radius:$3, color:$4}","insertTextFormat":2},{"label":"new_circle","kind":3,"detail":"pub fn new_circle(at_pos Vec3, with_thickness f32, with_radius f32, and_color Color) Circle","insertText":"new_circle($0, $1, $2, $3)","insertTextFormat":2},{"label":"Drawable","kind":8,"detail":"Drawable","insertText":"Drawable","insertTextFormat":1},{"label":"HookEntry","kind":22,"detail":"struct HookEntry","insertText":"HookEntry{name:$1, original_addr:$2, original_save:$3, hooked:$4}","insertTextFormat":2},{"label":"add_hook","kind":3,"detail":"fn add_hook(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry","insertText":"add_hook($0, $1, $2)","insertTextFormat":2},{"label":"Hooks","kind":22,"detail":"struct Hooks","insertText":"Hooks{frame_stage_notify:$1, present:$2, reset:$3, wnd_proc:$4, set_viewmodel_offets:$5, get_viewmodel_fov:$6, lock_cursor:$7, draw_model:$8, ret_add_check:$9}","insertTextFormat":2},{"label":"hk_frame_stage_notify","kind":3,"detail":"fn hk_frame_stage_notify(stage u32)","insertText":"hk_frame_stage_notify($0)","insertTextFormat":2},{"label":"hk_end_scene","kind":3,"detail":"fn hk_end_scene(dev voidptr) bool","insertText":"hk_end_scene($0)","insertTextFormat":2},{"label":"hk_reset","kind":3,"detail":"fn hk_reset(dev voidptr, params voidptr) int","insertText":"hk_reset($0, $1)","insertTextFormat":2},{"label":"hk_set_viewmodel_offets","kind":3,"detail":"fn hk_set_viewmodel_offets(ecx voidptr, edx voidptr, smt int, x f32, y f32, z f32) int","insertText":"hk_set_viewmodel_offets($0, $1, $2, $3, $4, $5)","insertTextFormat":2},{"label":"hk_get_viewmodel_fov","kind":3,"detail":"fn hk_get_viewmodel_fov() f32","insertText":"hk_get_viewmodel_fov()","insertTextFormat":1},{"label":"hk_ret_add_check","kind":3,"detail":"fn hk_ret_add_check(ecx voidptr, edx voidptr, mod_name &u8) bool","insertText":"hk_ret_add_check($0, $1, $2)","insertTextFormat":2},{"label":"RenderQueue","kind":22,"detail":"pub struct RenderQueue","insertText":"RenderQueue{queue:$1}","insertTextFormat":2},{"label":"C.FILE","kind":22,"detail":"struct C.FILE","insertText":"C.FILE{}","insertTextFormat":1},{"label":"App","kind":22,"detail":"struct App","insertText":"App{h_mod:$1, h_wnd:$2, h_client:$3, wnd_height:$4, wnd_width:$5, v_mod:$6, file:$7, interfaces:$8, hooks:$9, d3d:$10, rnd_queue:$11, ent_cacher:$12, config:$13, skins:$14, visuals:$15, is_ok:$16}","insertTextFormat":2},{"label":"app","kind":3,"detail":"fn app() &App","insertText":"app()","insertTextFormat":1},{"label":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\"","kind":6,"detail":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\" voidptr","insertText":"', h.name)\n\t\treturn\n\t}\n\n\t$if prod { C.VMProtectEnd() }\n}\n\nfn add_hook<T>(with_name string, with_og_add voidptr, and_hkd_fn voidptr) HookEntry<T> {\n\n\t$if prod { C.VMProtectBeginMutation(c\"hooks.add_hook\") }\n\n\tmut hk_entry := HookEntry<T>{\n\t\tname: with_name\n\t\toriginal_addr: with_og_add\n\t\thooked: and_hkd_fn\n\t}\n\thk_entry.hook()\n\tutils.pront(utils.str_align(\"[+] $with_name\"","insertTextFormat":1},{"label":"retadd_check_add_studio","kind":6,"detail":"retadd_check_add_studio voidptr","insertText":"retadd_check_add_studio","insertTextFormat":1},{"label":"retadd_check_add_mat","kind":6,"detail":"retadd_check_add_mat voidptr","insertText":"retadd_check_add_mat","insertTextFormat":1},{"label":"retadd_check_add_engine","kind":6,"detail":"retadd_check_add_engine voidptr","insertText":"retadd_check_add_engine","insertTextFormat":1},{"label":"dsc_base","kind":6,"detail":"dsc_base","insertText":"dsc_base","insertTextFormat":1},{"label":"a","kind":6,"detail":"a","insertText":"a","insertTextFormat":1},{"label":"b","kind":6,"detail":"mut b","insertText":"b","insertTextFormat":1},{"label":"c","kind":6,"detail":"c","insertText":"c","insertTextFormat":1},{"label":"set_viewmodel_offets_add","kind":6,"detail":"set_viewmodel_offets_add voidptr","insertText":"set_viewmodel_offets_add","insertTextFormat":1},{"label":"get_viewmodel_fov_add","kind":6,"detail":"get_viewmodel_fov_add voidptr","insertText":"get_viewmodel_fov_add","insertTextFormat":1},{"label":"app_ctx","kind":6,"detail":"mut app_ctx &App","insertText":"app_ctx","insertTextFormat":1},{"label":"retadd_check_add_client","kind":6,"detail":"retadd_check_add_client voidptr","insertText":"retadd_check_add_client","insertTextFormat":1},{"label":"called_once","kind":6,"detail":"mut called_once bool","insertText":"called_once","insertTextFormat":1},{"label":"is_called_once","kind":6,"detail":"mut is_called_once bool","insertText":"is_called_once","insertTextFormat":1},{"label":"g_x ","kind":6,"detail":"mut g_x ","insertText":"g_x ","insertTextFormat":1},{"label":"g_y ","kind":6,"detail":"mut g_y ","insertText":"g_y ","insertTextFormat":1},{"label":"g_z ","kind":6,"detail":"mut g_z ","insertText":"g_z ","insertTextFormat":1},{"label":"hk_present","kind":3,"detail":"fn hk_present(this voidptr, a voidptr, b voidptr, c voidptr, d voidptr) int","insertText":"hk_present($0, $1, $2, $3, $4)","insertTextFormat":2},{"label":"string","kind":22,"detail":"pub struct string","insertText":"string","insertTextFormat":1},{"label":"array","kind":22,"detail":"pub struct array","insertText":"array","insertTextFormat":1},{"label":"map","kind":22,"detail":"pub struct map","insertText":"map","insertTextFormat":1},{"label":"IError","kind":8,"detail":"IError","insertText":"IError","insertTextFormat":1},{"label":"gc_check_leaks","kind":3,"detail":"pub fn gc_check_leaks()","insertText":"gc_check_leaks","insertTextFormat":1},{"label":"Error","kind":22,"detail":"pub struct Error","insertText":"Error","insertTextFormat":1},{"label":"str","kind":3,"detail":"pub fn str() string","insertText":"str","insertTextFormat":1},{"label":"copy","kind":3,"detail":"pub fn copy(mut dst []u8, src []u8) int","insertText":"copy","insertTextFormat":1},{"label":"utf8_char_len","kind":3,"detail":"pub fn utf8_char_len(b u8) int","insertText":"utf8_char_len","insertTextFormat":1},{"label":"utf32_to_str","kind":3,"detail":"pub fn utf32_to_str(code u32) string","insertText":"utf32_to_str","insertTextFormat":1},{"label":"utf8_str_visible_length","kind":3,"detail":"pub fn utf8_str_visible_length(s string) int","insertText":"utf8_str_visible_length","insertTextFormat":1},{"label":"SortedMap","kind":22,"detail":"pub struct SortedMap","insertText":"SortedMap","insertTextFormat":1},{"label":"compare_strings","kind":3,"detail":"pub fn compare_strings(a &string, b &string) int","insertText":"compare_strings","insertTextFormat":1},{"label":"c_error_number_str","kind":3,"detail":"pub fn c_error_number_str(errnum int) string","insertText":"c_error_number_str","insertTextFormat":1},{"label":"eprintln","kind":3,"detail":"pub fn eprintln(s string)","insertText":"eprintln","insertTextFormat":1},{"label":"eprint","kind":3,"detail":"pub fn eprint(s string)","insertText":"eprint","insertTextFormat":1},{"label":"flush_stdout","kind":3,"detail":"pub fn flush_stdout()","insertText":"flush_stdout","insertTextFormat":1},{"label":"flush_stderr","kind":3,"detail":"pub fn flush_stderr()","insertText":"flush_stderr","insertTextFormat":1},{"label":"vcalloc","kind":3,"detail":"pub fn vcalloc(n isize) &u8","insertText":"vcalloc","insertTextFormat":1},{"label":"vcalloc_noscan","kind":3,"detail":"pub fn vcalloc_noscan(n isize) &u8","insertText":"vcalloc_noscan","insertTextFormat":1},{"label":"print_backtrace","kind":3,"detail":"pub fn print_backtrace()","insertText":"print_backtrace","insertTextFormat":1},{"label":"StrIntpMem","kind":22,"detail":"pub struct StrIntpMem","insertText":"StrIntpMem","insertTextFormat":1},{"label":"get_str_intp_u64_format","kind":3,"detail":"pub fn get_str_intp_u64_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u64","insertText":"get_str_intp_u64_format","insertTextFormat":1},{"label":"get_str_intp_u32_format","kind":3,"detail":"pub fn get_str_intp_u32_format(fmt_type StrIntpType, in_width int, in_precision int, in_tail_zeros bool, in_sign bool, in_pad_ch byte, in_base int, in_upper_case bool) u32","insertText":"get_str_intp_u32_format","insertTextFormat":1},{"label":"StrIntpData","kind":22,"detail":"pub struct StrIntpData","insertText":"StrIntpData","insertTextFormat":1},{"label":"StrIntpCgenData","kind":22,"detail":"pub struct StrIntpCgenData","insertText":"StrIntpCgenData","insertTextFormat":1},{"label":"si_s_code","kind":6,"detail":"pub const si_s_code string","insertText":"si_s_code","insertTextFormat":1},{"label":"si_g32_code","kind":6,"detail":"pub const si_g32_code string","insertText":"si_g32_code","insertTextFormat":1},{"label":"si_g64_code","kind":6,"detail":"pub const si_g64_code string","insertText":"si_g64_code","insertTextFormat":1},{"label":"VAssertMetaInfo","kind":22,"detail":"pub struct VAssertMetaInfo","insertText":"VAssertMetaInfo","insertTextFormat":1},{"label":"MethodArgs","kind":22,"detail":"pub struct MethodArgs","insertText":"MethodArgs","insertTextFormat":1},{"label":"FunctionData","kind":22,"detail":"pub struct FunctionData","insertText":"FunctionData","insertTextFormat":1},{"label":"FieldData","kind":22,"detail":"pub struct FieldData","insertText":"FieldData","insertTextFormat":1},{"label":"StructAttribute","kind":22,"detail":"pub struct StructAttribute","insertText":"StructAttribute","insertTextFormat":1},{"label":"ptr_str","kind":3,"detail":"pub fn ptr_str(ptr voidptr) string","insertText":"ptr_str","insertTextFormat":1}]},"timestamp":1667340055}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667340055}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667340055}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667340056}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667340056}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667340058}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667340064}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/d3d/wrapper.v","diagnostics":[]}},"timestamp":1667340068}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/d3d/d3d.v","diagnostics":[]}},"timestamp":1667340068}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/d3d/d3d.v","diagnostics":[]}},"timestamp":1667340068}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/d3d/d3d.v","diagnostics":[]}},"timestamp":1667340068}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/d3d/d3d.v","diagnostics":[]}},"timestamp":1667340068}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/d3d/d3d.v","diagnostics":[]}},"timestamp":1667340075}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/d3d/d3d.v","diagnostics":[]}},"timestamp":1667340075}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667340078}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667340169}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667340169}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667340297}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667340298}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667340299}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667340327}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667340329}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667340561}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667340561}
{"kind":"send-response","message":{"jsonrpc":"2.0","method":"textDocument/publishDiagnostics","params":{"uri":"file:///Users/fleur/Documents/prod/projects/2022/golphook/golphook/hooks.v","diagnostics":[]}},"timestamp":1667340563}
{"kind":"recv-request","message":{"jsonrpc":"2.0","id":68,"method":"shutdown","params":},"timestamp":1667341321}
{"kind":"send-response","message":{"jsonrpc":"2.0","id":68,"result":null},"timestamp":1667341321}
